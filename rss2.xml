<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Song Wang</title>
    <link>http://swang251.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 04 Jun 2020 20:20:32 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Update Hexo</title>
      <link>http://swang251.github.io/2020/06/04/Update-Hexo/</link>
      <guid>http://swang251.github.io/2020/06/04/Update-Hexo/</guid>
      <pubDate>Thu, 04 Jun 2020 18:57:29 GMT</pubDate>
      <description>
      
        &lt;p&gt;At first, all I want is making the &lt;a href=&quot;https://hexo.io/docs/asset-folders.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;asset folder&lt;/a&gt; work, then I tried to update hexo and met a series of problem and got them solved.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>At first, all I want is making the <a href="https://hexo.io/docs/asset-folders.html" target="_blank" rel="noopener">asset folder</a> work, then I tried to update hexo and met a series of problem and got them solved.</p><a id="more"></a><h2 id="conflication-of-hexo-generator-feed-and-hexo-3">Conflication of hexo-generator-feed and hexo 3</h2><h3 id="problem">Problem</h3><p>The first problem I met is shown as following <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Template render error: (unknown path) [Line 8, Column 25]</span><br><span class="line">  Error: Unable to call &#96;the return value of (posts[&quot;first&quot;])[&quot;updated&quot;][&quot;toISOString&quot;]&#96;, which is undefined or falsey</span><br></pre></td></tr></table></figure></p><h3 id="solution">Solution</h3><ul><li><p>I found a <a href="https://github.com/iissnan/theme-next-docs/issues/79" target="_blank" rel="noopener">issue</a> stating the same problem and <a href="https://github.com/iissnan/theme-next-docs/issues/79#issuecomment-287474959" target="_blank" rel="noopener">it was answered</a> that the plugin <code>hexo-generator-feed</code> and <code>hexo-generator-sitemap</code> is incompatible with <code>Hexo 3</code></p></li><li><p><a href="http://mixoo.cn/2020/02/08/hexo-tempalte-render-error/" target="_blank" rel="noopener">someone uninstalls these plugins to solve the problem</a> which doesn't work for me as <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">maupassant-hexo</a> requires <code>hexo-generator-feed</code>.</p></li><li><p>As stated in the <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="noopener"><code>hexo-generator-feed</code> repo</a>:</p><ul><li>Hexo 4: 2.x</li><li>Hexo 3: 1.x</li><li>Hexo 2: 0.x</li></ul></li><li><p>While my version in <code>package.json</code> is <code>"hexo": "^3.2.0"</code> and <code>"hexo-generator-feed": "^1.2.2"</code>. I am guessing that update <code>hexo</code> and <code>hexo-generator-feed</code> might help solve the problem.</p></li><li><p>And yes, when I have Hexo: 4.2.1 and hexo-generator-feed: 2.2.0, it is solved automatically.</p></li><li><p><code>npm rebuild node-sass --force</code>.</p></li></ul><h2 id="updating-node-and-hexo">Updating node and Hexo</h2><h3 id="updating-node.js">Updating Node.js</h3><ul><li>Newer version of <code>node.js</code> is needed for updating Hexo.</li><li>I forgot how I install my <code>node</code> originally. Here reinstalled it as follows<ol type="1"><li><code>which node</code></li><li><code>sudo rm -rf /usr/local/bin/node</code></li><li><code>sudo rm -rf /usr/loca/lib/node_modules/npm/</code></li><li><code>brew doctor</code></li><li><code>brew cleanup --prune-prefix</code></li><li><code>brew install node</code></li></ol></li><li><a href="https://stackoverflow.com/a/26919540/5798355" target="_blank" rel="noopener">Uninstall node.js on OSX</a>.</li></ul><h3 id="brew-link-node"><code>Brew link node</code></h3><ul><li>Then I try to make the link use the command <code>brew link node</code> which shed me the error <code>Error: Could not symlink include/node/common.gypi</code>.</li><li>The solution is <a href="https://discourse.brew.sh/t/mac-osx-homebrew-error-could-not-symlink-include-node-common-gypi/4717" target="_blank" rel="noopener">here</a><ol type="1"><li><code>sudo chown -R $(whoami) /usr/local/*</code>: change the owner of the files (root) to myself <code>$(whoami)</code>, otherwise, I couldn't rm <code>.gypi</code>, refer to <a href="https://discourse.brew.sh/t/mac-osx-homebrew-error-could-not-symlink-include-node-common-gypi/4717/5" target="_blank" rel="noopener">here</a> and <a href="https://gist.github.com/rcugut/c7abd2a425bb65da3c61d8341cd4b02d" target="_blank" rel="noopener">here</a></li><li><code>rm '/usr/local/include/node/config.gypi'</code></li><li><code>brew link --overwrite node</code></li></ol></li><li>Then I met the <a href="https://stackoverflow.com/questions/47306169/npm-version-is-giving-errormodule-js538-throw-err-error-cannot-find-modul" target="_blank" rel="noopener">problem</a> when using <code>npm</code>, giving me the error <code>modeule.js:538 throw err;</code><ul><li>This is <strong>solved</strong> by reinstalling the node using homebrew.</li></ul></li></ul><h3 id="update-hexo">Update hexo</h3><ul><li>modify the <code>package.json</code> and use the command <code>npm update</code> in the terminal.</li></ul><h2 id="downgrading-node">Downgrading node</h2><ul><li>When I try to deploy <code>hexo d</code>, it gave me the error <code>TypeError [ERR_INVALID_ARG_TYPE]: The "mode" argument must be integer. Received an instance of Object</code></li><li>This is because the <a href="https://zhuanlan.zhihu.com/p/136552969" target="_blank" rel="noopener">version of <code>Node.js</code> is too high</a> and we need to downgrade it.</li><li><a href="https://medium.com/@georgeenathomas/3-step-process-to-downgrade-node-version-using-homebrew-bc0b0a72ae27" target="_blank" rel="noopener">Downgrading through <code>brew</code></a><ol type="1"><li><code>brew unlink node</code></li><li><code>brew install node@12</code></li><li><code>brew link node@12</code>: failed</li><li><code>brew link --overwrite node@12</code></li></ol></li></ul><h2 id="about-node.js-npm">About Node.js &amp; NPM</h2><h3 id="node.js">Node.js</h3><ul><li><p><a href="https://en.wikipedia.org/wiki/Node.js" target="_blank" rel="noopener">Node.js wiki</a> &gt; Node.js is an open-source, cross-platform, <strong>JavaScript runtime environment</strong> that executes JavaScript code <strong>outside a web browser</strong>.</p></li><li><p><a href="https://nodejs.org/en/about/" target="_blank" rel="noopener">About Node.js</a>, JavaScript runtime, asynchronous event-driven, concurrency etc.</p></li><li><p><a href="https://www.tutorialspoint.com/nodejs/nodejs_introduction.htm" target="_blank" rel="noopener">tutorialspoint - introduction to Node.js</a></p></li><li><p><a href="https://www.sitepoint.com/node-js-is-the-new-black/" target="_blank" rel="noopener"><em>Node.js is the New Black</em> by Louis Simoneau in July 2010</a></p></li></ul><h3 id="npm">npm</h3><ul><li>node.js package manager.</li><li>write packages needed into <code>package.json</code> and run <code>npm install</code> or <code>npm update</code>. All the packages are inside <code>node_modules</code>.</li><li>An alternative: <a href="https://yarnpkg.com/" target="_blank" rel="noopener">yarn</a></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2020/06/04/Update-Hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Manage Your Own Package in Spacemacs</title>
      <link>http://swang251.github.io/2020/05/29/Manage-Your-Own-Package-in-Spacemacs/</link>
      <guid>http://swang251.github.io/2020/05/29/Manage-Your-Own-Package-in-Spacemacs/</guid>
      <pubDate>Fri, 29 May 2020 19:53:05 GMT</pubDate>
      <description>
      
        &lt;p&gt;How to manage your own package or the one your forked in Spacemacs? The answer is the &lt;em&gt;layer&lt;/em&gt;.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>How to manage your own package or the one your forked in Spacemacs? The answer is the <em>layer</em>. <a id="more"></a></p><h2 id="create-your-layer">Create your layer</h2><ul><li><code>M-x</code> + <code>configuration-layer/create-layer</code></li><li>select <code>~/.spacemacs.d</code></li><li>The layer <code>&lt;layerName&gt;</code> is created with <code>packages.el</code> and/or <code>README.org</code> (depends on your choice).</li><li>add your layer <code>&lt;layerName&gt;</code> into the variable <code>dotspacemacs-configuration-layers</code> in <code>~/.spacemacs.d/init.el</code></li></ul><h2 id="manage-your-packages-in-packages.el">Manage your packages in <code>packages.el</code></h2><ul><li><code>packages.el</code> contains a list of packages and their configuaration functions (init, post-init, etc...)</li><li>Add your packages into <code>packages.el</code> following the grammar in the <a href="https://develop.spacemacs.org/doc/LAYERS.html#packagesel" target="_blank" rel="noopener">documentation</a><ul><li>Spacemacs supports different recipes to install a package. For managing our own package, we need to maintain it locally instead of remotely. This way, you would be able to debug and make sure it is working before your push it.</li><li>For local multi-file package, one has to use <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(package-name :location (recipe :fetcher local))</span><br></pre></td></tr></table></figure></li><li>Initialize the package by adding <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(defun layerName&#x2F;init-packageName ()</span><br><span class="line">    (use-package packageName</span><br><span class="line">  :init)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li><li><strong>IMPORTANT:</strong> Multi-file local package is not supported yet byf the stable version Spacemaces. To make it work, one has to follow the <a href="https://github.com/syl20bnr/spacemacs/pull/8718" target="_blank" rel="noopener">issues #8718</a> and fix the corresponding files. Otherwise, clone the develop branch.</li></ul></li><li>Local packages should reside at <code>&lt;layerName&gt;/local/&lt;packageName&gt;</code>, git repository can be created within this folder.</li><li>See <a href="https://develop.spacemacs.org/doc/DOCUMENTATION.html#configuration-layers" target="_blank" rel="noopener">Configuration layers</a> for more details</li></ul><h2 id="ref">Ref</h2><ul><li><a href="http://book.emacs-china.org/#orgheadline88" target="_blank" rel="noopener">Spacemacs Rocks Season 2</a></li><li><a href="https://emacs-china.org/t/hack-package/2716" target="_blank" rel="noopener">Discussion in Emacs China</a></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2020/05/29/Manage-Your-Own-Package-in-Spacemacs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>COBS Symposium 2020 Poster Presentation</title>
      <link>http://swang251.github.io/2020/05/14/COBS-Symposium-2020-Poster-Presentation-Audio/</link>
      <guid>http://swang251.github.io/2020/05/14/COBS-Symposium-2020-Poster-Presentation-Audio/</guid>
      <pubDate>Thu, 14 May 2020 20:11:31 GMT</pubDate>
      <description>
      
        &lt;p&gt;Here attached are the synthesized sound of two mouthpieces. (prepared for presentation on the &lt;a href=&quot;https://www.cirmmt.org/activities/general-assembly&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CIRMMT-OICRM-BRAMS Student (COBS) Symposium 2020&lt;/a&gt;)
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Here attached are the synthesized sound of two mouthpieces. (prepared for presentation on the <a href="https://www.cirmmt.org/activities/general-assembly" target="_blank" rel="noopener">CIRMMT-OICRM-BRAMS Student (COBS) Symposium 2020</a>) <a id="more"></a>         <div id="aplayer-BzStvnfR" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-BzStvnfR"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Meyer 5M",              author: "Synthesized",              url: "Meyer5M.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script>         <div id="aplayer-EvVzdZFs" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-EvVzdZFs"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "Selmer S80 C*",              author: "Synthesized",              url: "SelmerS80.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script> <img src="/images/20200514/SWang_PosterImage.png" /></p><hr /><p>Hexo audio plugin: <a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">hexo-tag-aplayer</a></p>]]></content:encoded>
      
      <comments>http://swang251.github.io/2020/05/14/COBS-Symposium-2020-Poster-Presentation-Audio/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How do I use Zotero?</title>
      <link>http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/</link>
      <guid>http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/</guid>
      <pubDate>Tue, 07 Jan 2020 15:30:24 GMT</pubDate>
      <description>
      
        &lt;p&gt;I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use &lt;a href=&quot;https://www.zotero.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zotero&lt;/a&gt; mainly because it is an open-source software and is more flexible.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use <a href="https://www.zotero.org/" target="_blank" rel="noopener">Zotero</a> mainly because it is an open-source software and is more flexible.</p><a id="more"></a><h2 id="workflow">Workflow</h2><ul><li>Read the <a href="https://www.zotero.org/support/start" target="_blank" rel="noopener">documentation</a></li><li><a href="https://www.zotero.org/support/adding_items_to_zotero" target="_blank" rel="noopener">Adding Items to Zotero</a><ul><li>We need to install the <em>Zotero Connector</em> for Chrome, Firefox, or other web browsers.</li><li>We need to launch the Zotero desktop application before he could save items to Zotero.</li></ul></li><li><a href="https://www.zotero.org/support/attaching_files#adding_files" target="_blank" rel="noopener">Adding files to items</a><ul><li>the <em>Zotero Connector</em> provides an automatic routine to save the PDF to the Zotero.</li><li>However, I personally prefer to "manually" save the PDFs using <a href="#zotfile">ZotFile</a>.</li></ul></li><li>Organize your PDFs: see <a href="#pdf-organization">below</a></li><li>Adding notes to items: here I list two options<ul><li><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown</a>: use <a href="#markdown-here"><em>Markdown Here</em></a></li><li><a href="https://orgmode.org/" target="_blank" rel="noopener">Org mode</a>: use <a href="#org-mode"><em>.org</em></a> attachments</li></ul></li></ul><h2 id="attachementspdfs-organization">Attachements/PDFs Organization</h2><p>There are two options here to manage your attachments: <a href="https://www.zotero.org/support/attaching_files#stored_files_and_linked_files" target="_blank" rel="noopener">stored files and linked files</a>.</p><h3 id="save-and-sync-the-attachements-in-your-zotero-library">Save and sync the attachements in your Zotero library</h3><ul><li>All your attachments will be stored in <code>${Zotero}\storage</code> (set your Data Directory Location in <code>preference</code>-<code>Advanced</code>-<code>Files and Folders</code>), since everything is coded and automatically organized, you will see a series of folders likely named as <code>2NEHBKP9</code>.</li><li>Zotero allows you to sync your files/attachements in My Library. All the attachements you put under the items can be synchronized to the <a href="https://www.zotero.org/storage" target="_blank" rel="noopener">Zotero Storage</a> or your own WebDAV.<ul><li>You can modify it by going to the <code>preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Sync</code> <span class="math inline">\(\rightarrow\)</span> <code>Settings</code> <span class="math inline">\(\rightarrow\)</span> <code>File Syncing</code></li><li>Check/uncheck the <code>Sync attachement files in My Library using</code></li><li>Select <code>Zotero</code> or <code>WebDAV</code>.</li><li>If you select <code>WebDAV</code>, you will need to provide your account infomation.<ul><li>Here is how it works using <a href="https://www.jianguoyun.com" target="_blank" rel="noopener">Jianguoyun</a>: <a href="http://help.jianguoyun.com/?p=2064" target="_blank" rel="noopener">坚果云第三方应用授权WebDAV开启方法</a></li></ul></li></ul></li></ul><p><strong>However, there are two limitation of the this method:</strong></p><ul><li>Zotero storage is not free</li><li>The cloud storage you are using, like <a href="https://help.dropbox.com/installs-integrations/third-party/webdav-or-ftp" target="_blank" rel="noopener">Dropbox, doesn't support WebDAV</a></li></ul><p>So here is another way to organize and sync your attachements.</p><h3 id="save-the-links-to-the-pdfs-in-your-zotero-library.">Save the links to the PDFs in your Zotero library.</h3><p>Zotero allows you to store the link to files in My Library.</p><ul><li>Set the set your <a href="https://www.zotero.org/support/preferences/advanced#linked_attachment_base_directory" target="_blank" rel="noopener">base directory</a> by going to the <code>Preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Advanced</code> <span class="math inline">\(\rightarrow\)</span> <code>Files and Folders</code> <span class="math inline">\(\rightarrow\)</span> <code>Linked Attachment Base Directory</code>. This way, links are stored as the relative path in your library so that is easier when you access the linked files on different computers.</li><li>Use ZotFile for a linked-file workflow</li></ul><h3 id="zotfile">ZotFile</h3><blockquote><p><a href="http://zotfile.com/" target="_blank" rel="noopener">ZotFile</a> is a Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items, sync PDFs from your Zotero library to your (mobile) PDF reader (e.g. an iPad, Android tablet, etc.) and extract annotations from PDF files.</p></blockquote><ul><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> Renaming Rules</li><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> General Setting<ul><li>Source Folder for Attaching New Files: makes it easier to attach newly downloaded files.<ul><li>Download PDF <span class="math inline">\(\rightarrow\)</span> select the paper item <span class="math inline">\(\rightarrow\)</span> right click: Attach New File (ZotFile)</li></ul></li><li>Location of Files<ul><li>Attach stored copy of file(s)</li><li>Custom Location:<ul><li>Use subfolder defined by <code>/%F</code></li></ul></li></ul></li></ul></li></ul><h2 id="note-management">Note Management</h2><h3 id="markdown-here">Markdown Here</h3><blockquote><p><a href="https://markdown-here.com/" target="_blank" rel="noopener">Markdown Here</a> is an extension for Chrome, Firefox, Safari, Opera, Thunderbird, and Postbox.</p></blockquote><ul><li>One can <a href="https://github.com/jlegewie/markdown-here#building-the-extension-bundles" target="_blank" rel="noopener">build the extension bundle</a> from the source code and generate the <code>.xpi</code> file for Zotero</li><li>Then in Zotero, go to Tools <span class="math inline">\(\rightarrow\)</span> Add-on <span class="math inline">\(\rightarrow\)</span> Install Add-on From File...</li><li>When you edit the note, go to File <span class="math inline">\(\rightarrow\)</span> Markdown Toggle or use the hotkey <code>Ctrl+Alt+M</code> to switch back and forth between the plain and the rendered text</li></ul><h3 id="org-mode">Org-mode</h3><blockquote><p><a href="https://orgmode.org/" target="_blank" rel="noopener">Org mode</a> is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.</p></blockquote><p>I started to use Org mode in 2018 and gradually fall in love with it. To me, there is no substitute of Org mode. I tried different markdown softwares like Quiver, Joplin, etc. They are good, (especially the Joplin) but they cannot replace Org mode. Everything is foldable in Org mode which makes it much easier to explore and organize the documents. Also, considering how painful it is to keep notes in the Zotero-note, even with the <a href="https://markdown-here.com/" target="_blank" rel="noopener">Markdown Here</a>, I decided to find a way out to use Org mode for writing reading summaries and notes which can be integrated with Zotero.</p><ul><li>create a <code>noteTemplate.org</code></li><li>Everytime you will add the note by<ul><li>Right click on items <span class="math inline">\(\rightarrow\)</span> Add Attachment <span class="math inline">\(\rightarrow\)</span> Attach Stored Copy of File <span class="math inline">\(\rightarrow\)</span> Select the <code>noteTemplate.org</code></li><li>Right click on <code>.org</code> file under the item <span class="math inline">\(\rightarrow\)</span> Rename File from Parent Metadata</li></ul></li></ul><h3 id="zotxt">Zotxt</h3><blockquote><p><a href="https://gitlab.com/egh/zotxt-emacs" target="_blank" rel="noopener">zotxt-emacs</a> works with zotxt to provide an Emacs integration with Zotero, allowing you to manage citation keys for pandoc markdown documents as well as org mode links to items in your Zotero collection. - Check <a href="http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/" target="_blank" rel="noopener">this article</a> about using Zotxt</p></blockquote><h2 id="other">Other</h2><h3 id="better-bibtex-for-zotero">Better BibTeX for Zotero</h3><blockquote><p><a href="https://retorque.re/zotero-better-bibtex/" target="_blank" rel="noopener">Beter BibTex (BBT)</a> is an extension for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown). - Automatically exports the <code>.bib</code> file and organizes the citation key.</p></blockquote>]]></content:encoded>
      
      <comments>http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Building a Personal Palabos Git Repository</title>
      <link>http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/</link>
      <guid>http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/</guid>
      <pubDate>Tue, 17 Dec 2019 06:05:22 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;a href=&quot;https://palabos.unige.ch/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Palabos&lt;/a&gt; just released a new version (v2.1r0) and pushed everything on &lt;a href=&quot;https://gitlab.com/unigespc/palabos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitLab&lt;/a&gt;. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Feature Branch Workflow&lt;/a&gt; and the &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Workflow&lt;/a&gt;. &lt;img src=&quot;/images/20191217/PalabosGitFlow.jpg&quot; /&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://palabos.unige.ch/" target="_blank" rel="noopener">Palabos</a> just released a new version (v2.1r0) and pushed everything on <a href="https://gitlab.com/unigespc/palabos" target="_blank" rel="noopener">GitLab</a>. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow" target="_blank" rel="noopener">Feature Branch Workflow</a> and the <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git Workflow</a>. <img src="/images/20191217/PalabosGitFlow.jpg" /> <a id="more"></a> ## Requirements The workflow has to at least fulfill the following requirements. - Allow private development: researchers might want to develop and test their own algorithms on Palabos. Some of the algorithms may not have been published yet. It is therefore reasonable to keep the repository private. - Allow easy merge requests: This is about implementations of published algorithms or some complement functions/dataProcessors that should definitely be contributed to the official Palabos version. - Allow updates from the UniGeSPC/Palabos: keep the personal repository up-to-date with the official one. - Allow bug fixed both committed to the private and the official repositories.</p><h2 id="forked-project">Forked Project</h2><ul><li>Firstly, <a href="https://docs.gitlab.com/ee/gitlab-basics/fork-project.html" target="_blank" rel="noopener">fork</a> the project <a href="https://gitlab.com/unigespc/palabos" target="_blank" rel="noopener">UniGeSPC/palabos</a>. After this, you could find the folked project under <em>Projects--&gt;Your Projects</em></li><li>Go to your forked Palabos project. You can make it private by set the Project visibility to <em>private</em>. (Go to <em>Setting --&gt; General --&gt; Visibility, project features, permissions --&gt; Project visibility</em>)</li></ul><h2 id="branches">Branches</h2><p>There are four kinds of branches:</p><h3 id="master-branch">Master branch</h3><p>The <strong>master</strong> branch is simply used to save a copy of the <strong>UniGeSPC/palabos/master</strong>. Whenever this is a new release/update from the upstream, it should be merged to the <strong>master</strong> branch which is then merged to the <strong>develop</strong> branch.</p><p>As our own Palabos project is forked from the <strong>UniGeSPC/palabos</strong>, when we first clone the GitLab repository, our <strong>master</strong> branch should be synchronized with the <strong>UniGeSPC/palabos/master</strong>.</p><p>In order to track the official Palabos project, we need to add the <strong>UniGeSPC/palabos</strong> as the upstream <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https:&#x2F;&#x2F;gitlab.com&#x2F;unigespc&#x2F;palabos.git</span><br></pre></td></tr></table></figure> The upstream repository is shown when typing <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure> As only the master branch of the upstream repository matters, I modified my <em>.git/config</em> so that whenever I call <code>git fetch</code>, it only fetches the <strong>master</strong> branch instead of all branches. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;upstream&quot;]</span><br><span class="line">        url &#x3D; https:&#x2F;&#x2F;gitlab.com&#x2F;unigespc&#x2F;palabos.git</span><br><span class="line">        fetch &#x3D; +refs&#x2F;heads&#x2F;master:refs&#x2F;remotes&#x2F;upstream&#x2F;master</span><br></pre></td></tr></table></figure></p><p>When there is a new release in the upstream, fetch it and merge it into <strong>master</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream master</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge upstream&#x2F;master</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure> The <strong>master</strong> branch is then merged to the <strong>develop</strong> branch that is introduced later. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><h3 id="develop-branch">Develop branch</h3><p>The <strong>develop</strong> branch is used for the development, including new features or algorithms. It is initially branched off from the <strong>master</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b develop master</span><br></pre></td></tr></table></figure></p><p>However, it may never be merged back to <strong>master</strong>. Instead, whenever <strong>master</strong> gets an update from the upstream, it should be merged to <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure> Remember here we always use the flag <code>--no-ff</code> to avoid fast-forward merge.</p><blockquote><p>The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.</p></blockquote><h3 id="feature-branch">Feature branch</h3><p>The <strong>feature</strong> branch is used for both algorithm implementations and new functions/dataProcessors. It can be used for implementing both published and unpublished algorithms. The <strong>feature</strong> branch has a name convention <strong>feature-</strong>*. Whenever starting a new <strong>feature</strong>, it should be branched off from either the <strong>master</strong> branch or the <strong>develop</strong> branch.</p><p>When you want to implement an algorithm that would be contributed to the upstream Palabos repository, you should branch off the <strong>master</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION master</span><br></pre></td></tr></table></figure> Otherwise, you should branch off the <strong>develop</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION develop</span><br></pre></td></tr></table></figure></p><p>When the development of a new feature is done and tested, it should be merged to the <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff feature-DESCRIPTION</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>If you want to <a href="https://gitlab.com/unigespc/palabos/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">contribute</a> this new feature to Palabos, you can create a <a href="https://docs.gitlab.com/ee/gitlab-basics/add-merge-request.html" target="_blank" rel="noopener"><code>merge request</code></a>.</p><p>You can also delete this branch once it is merged to both the <strong>develop</strong> branch and the official Palabos. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-DESCRIPTION</span><br></pre></td></tr></table></figure></p><h3 id="bugfix-branch">bugFix branch</h3><p><strong>bugFix</strong> is used to fix bugs. It is suggested to open an issue for each bug your find. It could then be branched off from <strong>develop</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix-issueX develop</span><br></pre></td></tr></table></figure> Once the bug is fixed, it should be merged back to the <strong>develop</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff bugFix-issueX</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure> However, the Palabos Group might also fix the bug in the upstream branches if you don't create a <code>merge request</code> for your <strong>bugFix</strong> branch. If this happens, you might have to solve the conflict manually when you fetch <strong>upstream/master</strong> into the local <strong>master</strong> and then merged to the <strong>develop</strong>.</p><h2 id="conclusion">Conclusion</h2><p>Generally, this framework should work for most of our daily development and usage based on Palabos. My main doubt now is about the <strong>master</strong> branch. As it does nothing but saving a copy of the upstream, it seems reasonablbe to remove it. Everytime we see an new release from the upstream, the <strong>upstream/master</strong> could be directly merged in to the <strong>develop</strong> branch. However, the <strong>master</strong> branch is still kept for now to make the structure clearer.</p><p>Even though the workflow is not perfect, it allows us to maintain a customized Palabos while keeping the repository up-to-date with the upstream official Palabos. It is also easy to contribute to Palabos if you want. The flow diagram showed at the beginning is made based on <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen</a>'s template. Don't be hesitate to leave a message if you have any comments or suggestions. Thank you.</p>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Palabos Immersed Boundary-Lattice Boltzmann Method</title>
      <link>http://swang251.github.io/2019/06/12/Palabos-Immersed-Boundary-Lattice-Boltzmann-Method/</link>
      <guid>http://swang251.github.io/2019/06/12/Palabos-Immersed-Boundary-Lattice-Boltzmann-Method/</guid>
      <pubDate>Wed, 12 Jun 2019 14:31:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;The immersed boundary method (IBM) is proposed by Peskin in 1972 in his Ph.D. thesis and then is widely used for complex boundaries and moving boundary problems. IBM is applied in the context of lattice Boltzmann method (LBM) for the first time in 2004 by Feng and Michaelides (Feng and Michaelides, J. Comput. Phys, 2004). People also call such combination immersed boundary-lattice Boltzmann method (IB-LBM). In Palabos, different off-lattice methods have been implemented, including the Filippo-Hanel method, the Guo-Zheng-Shi method, the Bouzidi method and also the IBM.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>The immersed boundary method (IBM) is proposed by Peskin in 1972 in his Ph.D. thesis and then is widely used for complex boundaries and moving boundary problems. IBM is applied in the context of lattice Boltzmann method (LBM) for the first time in 2004 by Feng and Michaelides (Feng and Michaelides, J. Comput. Phys, 2004). People also call such combination immersed boundary-lattice Boltzmann method (IB-LBM). In Palabos, different off-lattice methods have been implemented, including the Filippo-Hanel method, the Guo-Zheng-Shi method, the Bouzidi method and also the IBM.</p><a id="more"></a><p>In Palabos, there is a demo showing how to use the IBM to solve the moving wall problems (<em>example/showCases/movingWall</em>). As one can notice, in Palabosv2.0r0, only 3D IBM is implemented and the corresponding implementaions can be found in</p><ul><li><em>src/offLattice/immersedWalls3D.h</em></li><li><em>src/offLattice/immersedWalls3D.hh</em></li></ul><p>Here I will discuss only how the method used in the showCase works.</p><p>In the moving wall case, the multi direct-forcing IB-LBM proposed by Inamuro (2012) is used. Two main function are used:</p><ul><li><code>instantiateImmersedWallData(vertices, areas, container)</code> for the wall boundary instantiation,</li><li><code>inamuroIteration(parameters)</code> for the main IBM iteration.</li></ul><h3 id="instantiateimmersedwalldata">InstantiateImmersedWallData</h3><p><code>instantiateImmersedWallData</code> is a function wrapper for the functional <code>instantiateImmersedWallData3D</code> where the boundary data is stored in a container block called <code>ImmersedWallData3D</code>.</p><h3 id="inamuroiteration">InamuroIteration</h3><p><code>inamuroIteration</code> is a function wrapper for the functional <code>InamuroIteration3D</code> which implements the IB-LBM algorithm following Inamuro (2012). In Inamuro's paper, there are 5 steps (from Step 0-5) in the iterative procedure and it iterate from Step 1 to Step 4. In Palabos, the iteration is implemented with a slighly different procedure.</p><ul><li><code>for (neighboring) {averageJ += W*nextJ;}</code> corresponds to Eq 2.22 (<em>Step -1</em>) and Eq. 2.28 (<em>Step 3.</em>) and the <span class="math inline">\(\mathbf{j}_l(\mathbf{X}_k)\)</span> is calculated instead of <span class="math inline">\(\mathbf{u}_l(\mathbf{X}_k)\)</span>;</li><li><code>for (vertices) {deltaG[i] = area[i]*(wallVelocity-averageJ);}</code> calculates the <span class="math inline">\(g_l(\mathbf{X}_k)\)</span> in <em>Step 0</em> and the last term of the RHS in Eq. 2.29, <em>Step 4</em>;</li><li><code>for (vertices) {g[i] += deltaG[i];}</code> (incompressible model), does the Eq. 2.29 in <em>Step. 4</em>;</li><li><code>for (neighboring) {nextJ += tau*W*deltaG[i];}</code> corresponds to <em>Step 1</em> and <em>Step 2</em> for spreading the force for correct the velocity at the Eulerian grid points. We can take it as substituting <span class="math inline">\(\mathbf{g}_l(\mathbf{x})\)</span> in Eq. 2.27 by Eq. 2.26.</li></ul><p>In the main function in <em>movingWall.cpp</em>, the iteration time depends on <code>param.ibIter</code>.</p><h4 id="n.b.">N.B.</h4><ul><li>The loop for neighboring starts range from -1 to 2. This is because the <code>plint</code> in the line <code>Array&lt;plint,3&gt; intPos ((plint)vertex[0], (plint)vertex[1], (plint)vertex[2])</code> floors the vertex point to the nearest smaller position.</li><li>Still don't understand how the <code>tau</code> in <code>nextJ += tau*W*deltaG[i]</code> helps calculate the moment.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/06/12/Palabos-Immersed-Boundary-Lattice-Boltzmann-Method/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing Lecture 6 (Notes)</title>
      <link>http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/</link>
      <guid>http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/</guid>
      <pubDate>Wed, 13 Feb 2019 00:33:47 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 6.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 6. <a id="more"></a></p><h3 id="inverse-system">Inverse System</h3><ul><li><span class="math inline">\(y=\mathcal{T}\{x\}\)</span> and <span class="math inline">\(x = \mathcal{T_i}\{y\}\)</span>, where <span class="math inline">\(\mathcal{TT_i} = \mathcal{T_iT} = \mathbf{I}\)</span></li><li><span class="math inline">\(h*h_i = h_i*h = \delta\)</span></li><li><strong>E.g.</strong>, michrophone with a flare that is a high-pass system, needs an inverse system to get rid of the HP effect.</li><li><strong>E.g.</strong>, <span class="math inline">\(h[n]=u[n]\)</span> (accumulator) <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(h_i[n]=\delta[n]-\delta[n-1]\)</span>, where <span class="math inline">\(h*h_i = \delta\)</span></li><li>Infinite impulse response <span class="math inline">\(\longleftrightarrow\)</span> finite impulse response, where the stability needs to be checked when inversion is from finite IR to infinite IR.</li><li><span class="math inline">\(power \propto amplitude^2\)</span><ul><li>Power dB = <span class="math inline">\(10\log_{10}(\dfrac{p}{p_0}) = 20\log_{10}(\dfrac{a}{a_0})\)</span></li><li>Amplitude dB = <span class="math inline">\(5\log_{10}(\dfrac{p}{p_0}) = 10\log_{10}(\dfrac{a}{a_0})\)</span></li></ul></li></ul><h3 id="frequency-response-of-lti-system">Frequency Response of LTI System</h3><ul><li><span class="math inline">\(p_{f_0}[n] = e^{2\pi jf_0 n}\)</span> is the eigenvector of a filter</li><li>Eigenvalue &amp; eigenvector of LTI system<ul><li><span class="math display">\[ \begin{align} y[n] &amp;= h*p_{f_0} = \sum\limits_{k\in \mathbb{Z}}h[k]p_{f_0}[n-k] \\      &amp;= \sum\limits_{k\in \mathbb{Z}}h[k]e^{2\pi jf_0 (n-k)} \\      &amp;= e^{2\pi jf_0 n}\sum\limits_{k\in \mathbb{Z}}h[k]e^{-2\pi jf_0k} \\      &amp;= p_{f_0}[n]H(f_0) \end{align}\]</span></li><li>where <span class="math inline">\(p_{f_0}\)</span> is the eigenvector and <span class="math inline">\(H(f_0)\)</span> is the eigenvalue.</li></ul></li></ul><h3 id="notable-notes">Notable notes</h3>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing Lecture 5 (Notes)</title>
      <link>http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/</link>
      <guid>http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/</guid>
      <pubDate>Tue, 05 Feb 2019 23:00:52 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 5.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 5. <a id="more"></a></p><h3 id="convolution-and-multiplication">Convolution and multiplication</h3><ul><li><span class="math inline">\(Z(f)=X(f)Y(f)\leftrightarrow z=x*y\)</span></li><li><span class="math inline">\(Z(f)=X(f)*Y(f)\leftrightarrow z=xy\)</span></li><li>Application in Source-Filter model</li></ul><h3 id="parsevals-theorem"><a href="https://en.wikipedia.org/wiki/Parseval%27s_theorem" target="_blank" rel="noopener">Parseval's theorem</a></h3><p><span class="math display">\[\sum\limits_{n=-\infty}^\infty x^2[n]= \dfrac{1}{2\pi}\int_{-\pi}^{\pi}|X(e^{j\hat{\omega}})|^2\text{d}\hat{\omega}=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f,\]</span> where the <span class="math inline">\(|X(f)|^2\)</span> is called the power spectral <strong>density</strong> which is with respect to frequency.</p><ul><li>To prove:<ul><li>Given signal and its DTFT <span class="math inline">\(x\leftrightarrow X\)</span></li><li>For the time reversed version of <span class="math inline">\(x\)</span>, <span class="math inline">\(y[n] = x[-n] \leftrightarrow Y(f)=\overline{X}(f)\)</span></li><li>For signal <span class="math inline">\(z\)</span> whose DTFT is defined as <span class="math inline">\(Z(f)=X(f)Y(f) = X(f)\overline{X}(f)\)</span>. <span class="math inline">\(z=x*y\)</span></li><li>In time domain: <span class="math inline">\(z[n]=\sum\limits_{k\in\mathbb{Z}}x[k]y[n-k] = \sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span>, where <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span> is the <a href="https://en.wikipedia.org/wiki/Autocorrelation" target="_blank" rel="noopener">autocorrelation</a>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\sum_\limits{k\in\mathbb{Z}}x^2[k]\label{Parseval1}\end{equation}\]</span>.</li><li>Taking the inverse DTFT: <span class="math inline">\(z[n] = \int_{-\frac{1}{2}}^{\frac{1}{2}}Z(f)e^{2\pi jfn}\text{d}f = \int_{-\tfrac{1}{2}}^{\tfrac{1}{2}}X(f)Y(f)e^{2\pi jfn}\text{d}f\)</span>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f\label{Parseval2}\end{equation}\]</span>.</li><li>Eq. <span class="math inline">\(\eqref{Parseval1}\)</span> = Eq. <span class="math inline">\(\eqref{Parseval2}\)</span>.</li></ul></li></ul><h3 id="symmetry-properties-of-signal-and-related-spectral-properties.">Symmetry properties of signal and related spectral properties.</h3><ul><li>Even: <span class="math inline">\(x_e[n]=x_e[-n]\)</span></li><li>Odd: <span class="math inline">\(x_o[n]=-x_o[-n]\)</span></li><li>properties:<ul><li><span class="math inline">\(x_e\bot x_o\)</span>, (<span class="math inline">\(\sum x[n]y[n]=0\)</span>, dot product equals zero)</li><li><span class="math inline">\(\text{odd}\times\text{even} = \text{even}\)</span></li></ul></li><li>For any signal, it could be decomposed as into an even signal and an odd signal, meaning, <span class="math inline">\(x[n] = x_e[n]+x_o[n]\)</span>, where <span class="math inline">\(x_e[n] = \frac{x[n]+x[-n]}{2}\)</span> and <span class="math inline">\(x_o[n] = \frac{x[n]-x[-n]}{2}\)</span></li><li>Apply it into Fourier transform <span class="math display">\[ \begin{align}    X(f) &amp;= \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]+x_o[n])(\cos 2\pi fn - j \sin2\pi fn)\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]\cos2\pi fn - jx_o[n]\sin2\pi fn),\\ \end{align}\]</span> where <strong>the <span class="math inline">\(\Re{\{X(f)\}}\)</span> is even and the <span class="math inline">\(\Im{\{X(f)\}}\)</span> is odd. </strong><ul><li>So a real spectrum means the even signal and a pure imaginary spectrum corresponds to a odd signal.</li></ul></li></ul><h3 id="frequency-shift-and-modulation">Frequency shift and modulation</h3><ul><li><span class="math inline">\(z=xp_{f_0}\)</span> (<span class="math inline">\(z[n]=x[n]e^{2\pi jf_0n}\)</span>)</li><li>Its Fourier transform: <span class="math inline">\(Z(f) = X*P_{f_0}=X(f-f_0)\)</span>, where <span class="math inline">\(P_{f_0}(f)=\delta(f-f_0)=\delta_{f_0}(f)\)</span></li><li><strong>Periodic in one domain</strong> means <strong>evenly spaced in the other domain</strong>.</li><li><a href="https://en.wikipedia.org/wiki/Dirac_comb" target="_blank" rel="noopener">Dirac comb</a></li></ul><h3 id="derivative-of-a-spectrum">Derivative of a Spectrum</h3><ul><li><span class="math display">\[\begin{align}    \dfrac{\text{d} X(f)}{\text{d} f}        &amp;= \frac{\text{d} \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}}{\text{d} f}\\       &amp;= -2\pi j \sum\limits_{n\in\mathbb{Z}}nx[n]e^{-2\pi jfn}\end{align}\]</span></li><li>Application: <strong>gain</strong><ul><li><span class="math inline">\(x[n] \rightarrow y[n] = g[n]x[n]\)</span>, where <span class="math inline">\(g[n] = a+bn\)</span> is a gain, linearly evolves over time.</li><li><span class="math inline">\(y[n]=ax[n]+b(nx[n])\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y(f) = aX(f)+\frac{bj}{2\pi}\frac{\text{d} X(f)}{\text{d}f}\)</span>.</li><li><strong>gain in time</strong> <span class="math inline">\(\leftrightarrow\)</span> <strong>derivative in spectrum</strong></li><li><strong>Further explanation?</strong></li></ul></li></ul><h3 id="time-scaling">Time scaling</h3><ul><li><span class="math inline">\(y(t)=x(\alpha t)\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y = \frac{1}{\alpha}X(\frac{f}{\alpha})\)</span></li></ul><h3 id="discrete-time-system">Discrete-time system</h3><ul><li>A system: <span class="math inline">\(y=\mathcal{T}\{x\}\)</span> or <span class="math inline">\(y[n] = \mathcal{T}\{x\}[n]\)</span></li><li>Like delay (<span class="math inline">\(y[n]=x[n-n_0]\)</span>), square (<span class="math inline">\(y[n]=x^2[n]\)</span>), moving max, threshold and so on.</li><li><strong>Distortion - Chebyshev polynomials?</strong></li><li><strong>Noise reduction need distortion?</strong></li></ul><h4 id="classes">classes</h4><ul><li>memoryless: only the current time (no past, no future samples);</li><li>linear: additivity and scalability</li><li>time invariance: the system propcessing doesn't depends on when you apply it (<span class="math inline">\(y[n-{n_0}]=\mathcal{T}\{x[n-{n_0}]\}\)</span>)</li><li>Stability: <span class="math inline">\(\lVert x\rVert &lt; B_x\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(\lVert y\rVert &lt; B_y\)</span>.<ul><li>delay: stable</li><li>amplifier: stable</li><li>accumulator: depends</li></ul></li></ul><h3 id="linear-time-invariant-system-leftrightarrow-filter">Linear Time-Invariant system <span class="math inline">\(\leftrightarrow\)</span> filter</h3><ul><li>A filter is a LTI system.</li><li><span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span> <span class="math display">\[\begin{align}  y[n] &amp;= \mathcal{T}\{x\}[n] \\       &amp;= \mathcal{T}\{\sum\limits_{k\in\mathbb{Z}}x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\mathcal{T}\{x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\{x[k]\mathcal{T}\{\delta_k[n]\}\} \quad \text{applying linearities}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}x[k]h_k[n],  \end{align}\]</span> where <span class="math inline">\(h_k=\mathcal{T}\{\delta_k\}\)</span> is the <strong>impulse reponse</strong>.</li><li><span class="math inline">\(y=x*h\)</span></li><li><span class="math inline">\(Y=XH\)</span>, where <span class="math inline">\(H\)</span> is the Fourier transform of <span class="math inline">\(h\)</span> and is the frequency response.</li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix#Discrete_convolution" target="_blank" rel="noopener">Toeplitz matrix and convolution</a></li><li>For convoluion: <span class="math inline">\(N_y = N_x+N_h-1\)</span></li><li>Properties:<ul><li>Stability: depends on <span class="math inline">\(h\)</span>, meaning the bound of <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}|h[n-k]|\)</span></li><li>causality: <span class="math inline">\(h[n-k]=0\)</span> for <span class="math inline">\(k\leq n\)</span>.</li><li>memoryless: <span class="math inline">\(h[k]=0\)</span> when <span class="math inline">\(k\neq 0\)</span></li></ul></li></ul><h3 id="notable-notes">Notable notes</h3><ul><li>Energy: the accumulated version of the power <span class="math inline">\(x^2[n]\)</span></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Simulation Routine, and Code/Result Management across Laptop and Cluster</title>
      <link>http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/</link>
      <guid>http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/</guid>
      <pubDate>Wed, 30 Jan 2019 10:41:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster &lt;a href=&quot;https://docs.computecanada.ca/wiki/Graham&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GRAHAM&lt;/a&gt; of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster <a href="https://docs.computecanada.ca/wiki/Graham" target="_blank" rel="noopener">GRAHAM</a> of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.</p><a id="more"></a><h3 id="softwaretool-list">Software/Tool List</h3><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> (version control)</li><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> (remote repository storage)</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a> (Git GUI)</li><li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> (cross-platform building software)</li><li><a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a> (C++ IDE)</li><li><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> (Text editor for code editing on the cluster)</li><li><a href="https://slurm.schedmd.com/overview.html" target="_blank" rel="noopener">Slurm</a> (job scheduler used by Compute Canada clusters)</li><li><a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a> (file transfer)</li><li><a href="https://www.paraview.org/" target="_blank" rel="noopener">Paraview</a> (result visualization)</li></ul><h3 id="login-and-version-control">Login and Version Control</h3><ul><li>For convenience, I make an alias of the ssh connection called <code>graham</code>. Details could be check in my <a href="https://swang251.github.io/2018/10/04/Passwordless-SSH-connection-to-a-Cluster/">previous blog</a>.</li><li>I am using <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> and <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> for version control.</li></ul><h3 id="file-structure">File Structure</h3><ul><li>For the LBM simulation, I got my projects stored in the folder <em>lbm</em> and the Palabos library in <em>palabos</em>, make sure they are in the same directory level.</li><li>Each project is named as the case short name + dimension. For example, I have <em>aeolianToneCylinder2D</em> and <em>ductRadiation2DAxisymmetric</em>.</li><li>In each project, the file structure is shown below. It includes<ul><li><em>main.cpp</em>: the main c++ file,</li><li><em>CMakeLists.txt</em>: the CMake configuration file,</li><li><em>./laptop-cmake-build-debug/</em>: the workspace folder for the laptop, including the<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file,</li></ul></li><li><em>./cluster-cmake-build-debug/</em>: the workspace folder for the cluster,<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file ,</li><li>.sh file for submitting batch jobs,</li></ul></li><li><em>./Analysis/</em>: the folder for the simulation results and the analysis scripts.<ul><li>.m matlab script</li><li>.vtk for visualization</li><li>.dat for simulaiton <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aeolianToneCylinder2D</span><br><span class="line">+-- main.cpp</span><br><span class="line">+-- CMakeLists.txt</span><br><span class="line">+-- laptop-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">+-- cluster-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">|   +-- aeolianToneCylinder2D.sh</span><br><span class="line">+-- Analysis</span><br><span class="line">|   +-- *.m</span><br><span class="line">|   +-- ResultFolders</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="build-and-compilation">Build and Compilation</h3><ul><li>I am using <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> for cross-platform project building (MacOS for my laptop and Linux on the cluster).</li><li>Each platform owns its own workspace folder, i.e., <em>./laptop-cmake-build-debug</em> for the laptop and <em>./cluster-cmake-build-debug</em> for the cluster.</li><li>The project on the laptop is built and debugged through CLion which is straight forward.</li><li>On the cluster end, go to the folder <em>./cluster-cmake-build-debug</em> and use the command <code>cmake ../</code> to build the project. Then, use <code>make</code> to compile everything.</li><li>Sometimes, we need to manually load cmake module. Use <code>module avail cmake</code> to check the available cmake version and use, e.g., <code>module load cmake/3.12.3</code> to load the new cmake version.</li></ul><h3 id="running-jobs">Running Jobs</h3><ul><li>For each project, there will be a corresponding batch file <em>**.sh</em>. For example <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">#SBATCH --account&#x3D;def-SUPERVISOR</span><br><span class="line">#SBATCH --time&#x3D;01:00:00</span><br><span class="line">#SBATCH --ntasks&#x3D;64</span><br><span class="line">#SBATCH --mem-per-cpu&#x3D;128M</span><br><span class="line">#SBATCH --job-name&#x3D;JOBNAME</span><br><span class="line">#SBATCH --output&#x3D;%x-%j-np64.out</span><br><span class="line">#SBATCH --mail-user&#x3D;EMAILADDRESS</span><br><span class="line">#SBATCH --mail-type&#x3D;BEGIN</span><br><span class="line">#SBATCH --mail-type&#x3D;END</span><br><span class="line">#SBATCH --mail-type&#x3D;FAIL </span><br><span class="line"></span><br><span class="line">mpirun -np 64 .&#x2F;projectName .&#x2F;projectName.xml</span><br></pre></td></tr></table></figure><ul><li><code>--mail</code> provides the option for notification at different stage of the simulation which is quite useful.</li></ul></li><li>make sure everything is included<ul><li>output directory created (or automatically created)</li><li>program parameters</li><li>have the modified code compiled (<code>make</code>)</li></ul></li><li>submit the job: <code>sbatch ./projectName.sh</code><ul><li>you will see <em>Submitted batch job 11315557</em></li></ul></li><li>job status: <code>squeue -u $USER</code><ul><li>you will see <em>JOBID USER ACCOUNT NAME ST START_TIME TIME_LEFT NODES CPUS GRES MIN_MEM NODELIST (REASON)</em></li></ul></li><li>cancel job: <code>scancel JobID</code></li><li>check the efficiency of the job: <code>seff JobID</code></li><li>The information of the submitted job, including the output, would be written in the <em>.out</em> files.</li></ul><h3 id="file-transfer">File transfer</h3><ul><li>File transfer is normally done by <a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a>, details can be found <a href="https://docs.computecanada.ca/wiki/Globus" target="_blank" rel="noopener">here</a></li></ul><h3 id="cpu-based-paraview-client-server-visualization">CPU-based ParaView client-server visualization</h3><p>For large data processing, it will be more convenient to handle it on the cluster end, making use of ParaView cliend-server mechanisms.</p><ul><li>check the <a href="https://docs.computecanada.ca/wiki/Visualization#CPU-based_ParaView_client-server_visualization_on_general_purpose_clusters" target="_blank" rel="noopener">Compute Canada Documentation Wiki</a></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing Lecture 4 (Notes)</title>
      <link>http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/</link>
      <guid>http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/</guid>
      <pubDate>Tue, 29 Jan 2019 22:38:43 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 4.&lt;/p&gt;
&lt;p&gt;NOTA: All &lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt; in this blog refers to the normalized frequency.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 4.</p><p>NOTA: All <span class="math inline">\(f\)</span> in this blog refers to the normalized frequency. <a id="more"></a></p><h3 id="different-representation">Different representation</h3><h4 id="time-domain-representation">Time-domain representation</h4><ul><li><span class="math inline">\(\delta_k\)</span>: the feature of time, representing time 'k';</li><li><span class="math inline">\(x = \sum\limits_{k\in\mathbb{Z}} x[k]\delta_k\)</span> or <span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span></li></ul><h4 id="frequency-domain-representation-spectrum">Frequency-domain representation (spectrum)</h4><ul><li><span class="math inline">\(p_f[n] = e^{2\pi jfn}\)</span>: the feature of frequency, and be used to represent <span class="math inline">\(x[n]\)</span> in terms of frequency <span class="math inline">\(f\)</span>.</li><li><span class="math inline">\(x[n]\)</span> is a linear combination of <span class="math inline">\(p_f[n]\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(x[n] = \int X(f)p_f[n]\text{d}f\)</span>, where <span class="math inline">\(X(f)\)</span> is the Fourier representation.</li></ul><h3 id="heuristic-description-of-fourier-transform">Heuristic description of Fourier Transform</h3><h4 id="for-xn-aejtheta">For <span class="math inline">\(x[n] = ae^{j\theta}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{f_0}[n] = ae^{j(2\pi f_0n+\theta)}\)</span><ul><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\cos(2\pi f_0n+\theta) = a\cos\theta\delta(f_0)\)</span>,</li><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\sin(2\pi f_0n+\theta) = a\sin\theta\delta(f_0)\)</span>,</li><li>so <span class="math display">\[\begin{equation} \sum\limits_{n\in\mathbb{Z}} ae^{j\theta}p_{f_0}n = ae^{j\theta}\delta(f_0),\end{equation}\label{distribution}\]</span> where <span class="math inline">\(\delta(f_0)\)</span> is a distribution function</li></ul></li></ul><h4 id="for-xn-aejthetae2pi-f_0n">For <span class="math inline">\(x[n] = ae^{j\theta}e^{2\pi f_0n}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{-f}[n] = ae^{j\theta}e^{2\pi j(f_0-f)n}\)</span><ul><li>Looking for a modulated frquency <span class="math inline">\(f_{modulated} = f_0-f\)</span>.</li><li>So we have, <span class="math display">\[\begin{equation}\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n] = ae^{j\theta}\delta(f_0-f),\end{equation}\]</span> meaning there is a contribution of <span class="math inline">\(x[n]\)</span> only when <span class="math inline">\(f_0 = f\)</span>.</li></ul></li><li>Go for, <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n]\)</span> = <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]\overline{p_f[n]} = \mathbf{x}\cdot\mathbf{p_f} = \mathbf{p_f}^H\cdot\mathbf{x}\)</span>, assuming <span class="math inline">\(\mathbf{x}\)</span> is a real vector (signal).<ul><li>Meaning <strong>projecting signal <span class="math inline">\(\mathbf{x}\)</span> onto the coordinate <span class="math inline">\(\mathbf{p_f}\)</span></strong>,</li><li>where it first does the modulation (<span class="math inline">\(e^{-2\pi jfn}\)</span>) and then the summation (<span class="math inline">\(\sum\)</span>)</li><li>Properties of the Euclidean Inner Product: <span class="math inline">\(\mathbf{u}\cdot\mathbf{v} = \overline{\mathbf{v}\cdot\mathbf{u}}\)</span></li></ul></li><li><strong>Fourier transform and inverse Fourier transform</strong><ul><li><span class="math inline">\(X(f)=\sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>: the "-" sign comes from the conjugate of <span class="math inline">\(\mathbf{p_f}\)</span> during the dot products</li><li><span class="math inline">\(x[n]=\int X(f)e^{+2\pi jfn}\text{d}f\)</span>: the "+" sign because these is the linear combination of <span class="math inline">\(\mathbf{p_f}\)</span></li></ul></li></ul><h3 id="more-about-fourier-transform">More about Fourier Transform</h3><ul><li>Fourier Transform: <span class="math inline">\(X(f) = \int x(t)e^{-2\pi jFt}\text{d}t\)</span>.</li><li>Discrete-time Fourier Transform: <span class="math inline">\(X(f) = \sum\limits_{n\in \mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>.</li><li>The frequency is real and continuous.</li><li><span class="math inline">\(X(f) \in \mathbb{C}\)</span> is periodic and complex.</li><li>Though it is easy to prove, but <strong>why does sampling make signal periodic in frequency domain?</strong><ul><li><span class="math inline">\(X(f) = X(f+1)\)</span></li></ul></li><li>Convergence: <span class="math inline">\(|X(f)|\)</span>. (<a href="https://en.wikipedia.org/wiki/Norm_(mathematics)" target="_blank" rel="noopener">norm</a>)</li></ul><h3 id="examples">Examples</h3><table><colgroup><col style="width: 42%" /><col style="width: 57%" /></colgroup><thead><tr class="header"><th style="text-align: center;">Time-domain <span class="math inline">\(x[n]\)</span></th><th style="text-align: center;">Frequency-domain <span class="math inline">\(X(f)\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Impulse: <span class="math inline">\(\delta[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr class="even"><td style="text-align: center;">Damped exponential: <span class="math inline">\(a^n u[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(\dfrac{1}{1-ae^{-2\pi jf}}\)</span></td></tr><tr class="odd"><td style="text-align: center;">Rectangular function: <span class="math inline">\(r_N[n]=u[n]-u[n-N]\)</span></td><td style="text-align: center;"><span class="math inline">\(e^{-\pi jf(N-1)}\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span></td></tr></tbody></table><ul><li><strong>NOTA:</strong> For the rectangular function, the <span class="math inline">\(\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span> in the <span class="math inline">\(X(f)\)</span> is not the sinc function. Instead, <span class="math inline">\(\dfrac{\sin(\pi f)}{\pi f} = \text{sinc}(\pi f)\)</span>, the sinc function, which is non-periodic, is the Fourier transform of the rectangular function instead of its DTFT. The sampling makes the <span class="math inline">\(X(f)\)</span> periodic in frequency domain as shown in the table.</li></ul><h3 id="theorems">Theorems</h3><ul><li>periodic in <span class="math inline">\(f\)</span></li><li>linear</li><li>time-shift (delay): <span class="math inline">\(y[n] = x[n-d] \rightarrow Y(f) = X(f)e^{-2\pi jfd}\)</span></li><li>frequency-shift: <span class="math inline">\(y[n] = x[n]e^{2\pi jf_0n} \rightarrow Y(f) = X(f-f_0)\)</span></li><li>time-reverse: <span class="math inline">\(y[n] = x[-n] \rightarrow Y(f)=X(-f)\)</span></li><li>Frequency multiplication means time convolution and vice versa.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing-Lecture 3 (Notes)</title>
      <link>http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/</link>
      <guid>http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/</guid>
      <pubDate>Tue, 22 Jan 2019 22:15:58 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 3.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 3. <a id="more"></a></p><ul><li>From now on, the hat, <span class="math inline">\(\hat{}\)</span>, represents the normalized version.</li></ul><h3 id="notable-notes">Notable Notes</h3><ul><li>von Coler et al. 2018, Parametric Synthesis of Glissando Note Transitions - A User Study in a Real-Time Application, DAFx-18.</li><li>signal: a mathematical function that carries information, could be pressure, control parameters and so on.</li><li>Lagrange polynomial used in spatial sampling, non-integer delay as an interpolating filter.</li><li>A delay system is a system.</li><li>ADSR is a synthesizer.</li><li><span class="math inline">\(s[n] = \sum\limits_{k\in \mathbb{Z}}s[k]\delta[n-k]\)</span></li><li><strong>Dirac delta function</strong><ul><li>There are many ways to define Dirac delta function, see <a href="http://mathworld.wolfram.com/DeltaFunction.html" target="_blank" rel="noopener">Wolfram MathWorld</a></li><li>See more <a href="http://tutorial.math.lamar.edu/Classes/DE/DiracDeltaFunction.aspx" target="_blank" rel="noopener">here</a></li><li>integral, kind of dot product.</li></ul></li><li><strong>Block by Block (buffer)</strong> in applications equals <strong>vectorization</strong></li><li><strong>Sampling</strong> makes the spectrum periodic<ul><li>For two frequency, <span class="math inline">\(\hat{f_0}\)</span> and <span class="math inline">\(\hat{f_0}+r\)</span><ul><li>Discrete-time domain: <span class="math inline">\(\cos(2\pi\hat{f_0}n) = \cos(2\pi(\hat{f_0}+r)n)\)</span>, because <span class="math inline">\(2\pi r n\)</span> is an integer multiple of <span class="math inline">\(2\pi\)</span>, so it is periodic inthe frequency domain.</li><li>Continuous-time domain: <span class="math inline">\(\cos(2\pi f_0 t) \neq \cos(2\pi (f_0+rf_0)t)\)</span></li></ul></li><li>From <span class="math inline">\(x(t)=x(t+T_0)\)</span> to <span class="math inline">\(x[n] = x[n+N_0]\)</span>, it only works when $N_0 = k $ and <span class="math inline">\(k=0,1,\dots, N_0\)</span></li></ul></li><li>impulse (time-domain) <span class="math inline">\(\rightarrow\)</span> 1 (frequency-domain) <span class="math inline">\(\rightarrow\)</span> alias filter (works as a bandlimited filter) <span class="math inline">\(\rightarrow\)</span> rectangular (frequency-domain) <span class="math inline">\(\rightarrow\)</span> ADC <span class="math inline">\(\rightarrow\)</span> sinc function (time-domain)</li><li>The basis of Fourier transform is simply rotating vectors in the 2D plane (<span class="math inline">\(e^{2\pi j\hat{f_0}n}\)</span>)</li></ul><h3 id="discrete-time-sequences">Discrete-time sequences</h3><h4 id="impulse">Impulse</h4><p><span class="math display">\[\begin{equation}  \delta[n] =     \begin{cases}      1, \quad n=0,\\      0, \quad n\neq0    \end{cases}  \end{equation}\]</span></p><ul><li>Delayed impulse: <span class="math inline">\(\delta_{n_0}[n]=\delta[n-n_0]\)</span></li><li>Impulse response</li></ul><h4 id="unit-step-sequence">Unit step sequence</h4><p><span class="math display">\[\begin{equation}  u[n] =     \begin{cases}      1, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(u[n]=u[n-1]+\delta[n]=\sum\limits_{k=0}^\infty\delta[n-k]\)</span></li><li>works as a switch (control)</li><li>used to check the stability</li></ul><h4 id="rectangular-sequence">Rectangular sequence</h4><p><span class="math display">\[\begin{equation}r[n]=u[n]-u[n-N],\end{equation}\]</span> where <span class="math inline">\(N\)</span> is the length of the rectangular</p><ul><li><span class="math inline">\(r[n] = \delta[n]\)</span> when <span class="math inline">\(N=1\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math display">\[\delta[n]=u[n]-u[n-1],\]</span> which is also explained as a finite-difference scheme, representing the slope the signal is we divide both sides by the sampling time $ T_s$</li><li>used to design waveforms like a square wave (a linear combination of rectangular sequence)</li></ul><h4 id="damped-exponentials">Damped Exponentials</h4><p><span class="math display">\[\begin{equation}  x[n] =     \begin{cases}      Aa^n, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(0&lt;a&lt;1\)</span>, damped signal, <span class="math inline">\(-1&lt;a&lt;0\)</span>, damped osillating signal.</li><li><a href="https://en.wikipedia.org/wiki/RC_circuit" target="_blank" rel="noopener"><strong>RC circuit</strong></a> and <a href="https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter" target="_blank" rel="noopener">RC filter</a>, working as a low pass filter, check <a href="https://www.electronics-tutorials.ws/filter/filter_2.html" target="_blank" rel="noopener">here</a>.</li><li>The frequency response of <span class="math inline">\(a^nu[n]\)</span> is <span class="math inline">\(\dfrac{1}{1-ae^{-j\hat{\omega}}}\)</span>, where <span class="math inline">\(\hat{\omega}\)</span> is the normalized radian frequency.</li><li>recursive</li></ul><h4 id="sinusoids-sequence">Sinusoids sequence</h4><p><span class="math display">\[\begin{equation}x[n] = A_0\cos(2\pi \hat{f_0}n+\phi_0),\end{equation}\]</span> where <span class="math inline">\(\hat{f_0}\)</span> is the normalized frequency and <span class="math inline">\(\phi_0\)</span> is the initial phase.</p><ul><li>recursive computaion of <span class="math inline">\(sin\)</span> functions</li></ul><h4 id="complex-exponential-sequence">Complex exponential sequence</h4><p><span class="math display">\[P_{f_0}[n]=e^{2\pi j \hat{f_0}n}\]</span> and <span class="math display">\[z[n] = A_0e^{j\phi_0}e^{j2\pi\hat{f_0}n}=z[n-1]e^{2\pi j \hat{f_0}},\]</span> where the phasor <span class="math inline">\(\hat{A}=Ae^{j\phi_0}\)</span> is the complex amplitude.</p><h4 id="damped-sinusoids">Damped sinusoids</h4><p><span class="math display">\[x[n] = A_0e^{-\alpha n}\cos(2\pi\hat{f_0}n+\phi_0)\]</span> and <span class="math display">\[z[n] = \hat{A_0}e^{-\alpha+2\pi j\hat{f_0}n},\]</span> where <span class="math inline">\(e^{-\alpha}\)</span> represents the damping.</p><h3 id="the-link-between-phase-shift-and-time-delay">The link between phase shift and time delay</h3><p>Comparing: <span class="math display">\[x(t) \rightarrow x(t-d)\]</span> and <span class="math display">\[sin(2\pi f_0t+\phi_0) \rightarrow sin(2\pi f_0 (t-d)+\phi_0),\]</span> where the phase shift <span class="math inline">\(-2\pi f_0 d\)</span> is frequency dependent.</p><h3 id="others">Others</h3><h4 id="spatial-wave">spatial wave</h4><p><span class="math display">\[p(t,r) = A_0\cos(2\pi f_0(t-\frac{r}{c}))\]</span> - the link between the spatial domain and the phase domain - wavenumber is the spatial frequency of the wave <span class="math inline">\(k = \dfrac{2\pi f_0}{c}=\dfrac{2\pi}{\lambda}\)</span> (radians or circle per unit distance), BTW, <strong>wavenumber is not dimensionless</strong> but Helmholtz number <span class="math inline">\(ka\)</span> is. - Compared to frequency <span class="math inline">\(\omega = \dfrac{2\pi}{T}\)</span>, where <span class="math inline">\(T\)</span> and <span class="math inline">\(\lambda\)</span> are the length of the period in time and space, respectively.</p><h4 id="phasor">Phasor</h4><ul><li>phasor <span class="math inline">\(\leftrightarrow\)</span> vector</li></ul><h4 id="linear-chirp">Linear chirp</h4><p><span class="math display">\[\phi[n] = \phi_0 + 2\pi(\hat{f_0}+\frac{\beta(n+1)}{2})n\]</span> instead of simply <span class="math inline">\(\phi[n] = \phi_0+2\pi f[n]n\)</span>, where <span class="math inline">\(f[n] = \hat{f_0}+\beta n\)</span></p><ul><li>this is to maintain the phase continuity.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing Lecture 1 (Notes)</title>
      <link>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/</link>
      <guid>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/</guid>
      <pubDate>Wed, 16 Jan 2019 01:13:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 1.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 1. <a id="more"></a></p><h2 id="introduction">Introduction</h2><ul><li>Tools and concepts used in the course: quantitative, math, symbolic</li><li>Symbolic representation</li></ul><h2 id="symbolic-representation">Symbolic Representation</h2><ul><li>numbers: <span class="math inline">\(i,j,k,l,m,n\)</span> (interger), <span class="math inline">\(x,y,z,t\)</span> (coordinate).</li><li>Interger: count object: <span class="math inline">\(\mathbb{Z,V}\)</span></li><li>Real: <span class="math inline">\(\mathbb{R}\)</span> + rational <span class="math inline">\(x=\dfrac{p}{q}\)</span></li></ul><h2 id="properties-links">Properties Links</h2><ul><li><span class="math inline">\(\subset\)</span> (includes), <span class="math inline">\(\in\)</span> (belong to)</li><li><span class="math inline">\(s_i\)</span>, where <span class="math inline">\(i\in[0,1\cdots]\)</span></li><li><span class="math inline">\(m=\dfrac{1}{N}\sum\limits_{i=0}^{N-1}s_i\)</span></li></ul><h2 id="sequence-and-series">Sequence and Series</h2><h3 id="sequence">Sequence</h3><ul><li><strong>Definition</strong>: ordered set of values (mathmatical objects).</li><li>Arithmetic sequence<ul><li><span class="math display">\[u_n=\begin{cases} a,\quad n=0, \\ u_{n-1}+b,\quad n&gt;0.\end{cases}\]</span></li><li>or <span class="math inline">\(u_n=a+nb\)</span>.</li></ul></li><li>Geometric sequence<ul><li><span class="math display">\[u_n=\begin{cases} a,\quad n=0, \\ u_{n-1}\cdot b,\quad n&gt;0.\end{cases}\]</span></li><li>or <span class="math inline">\(u_n=a\cdot b^n\)</span>.</li></ul></li><li>Harmonic sequence<ul><li><span class="math inline">\(u_k[n]=a_k\cos(2\pi f_k n +\phi_k)\)</span></li></ul></li></ul><h3 id="series">Series</h3><ul><li><strong>Definition</strong>: <span class="math inline">\(S_n=\sum\limits_{i=0}^n u_i\)</span></li><li>Arithmetic series <span class="math display">\[\begin{align}S_n&amp;= \sum\limits_{i=0}^n (b+ia) \\&amp;= \sum\limits_{i=0}^n b \sum\limits_{i=0}^n ia \\&amp;= (n+1)b + a\dfrac{n(n+1)}{2} \\&amp;= (n+1)\cdot(b+\dfrac{an}{2}).\end{align}\]</span></li><li>Geometric series <span class="math display">\[S_n=\sum\limits_{i=0}^n ba^i=b\cdot\sum\limits_{i=0}^n a^i = b\left(\dfrac{1-a^{n+1}}{1-a}\right)\]</span>, when <span class="math inline">\(n\rightarrow \infty\)</span><ul><li><span class="math inline">\(|a|&lt;1 \rightarrow S_n=b\dfrac{1}{1-a}\)</span></li><li><span class="math inline">\(|a|&gt;1 \rightarrow S_n=\pm\infty\)</span></li></ul></li><li>Fourier series <span class="math inline">\(S_K[n]=\sum\limits_{k=0}^Ku_k[n]=\sum\limits_{k=0}^K a_k\cos(2\pi f_k n+\phi_k)\)</span></li></ul><h3 id="vectors-matrices">Vectors &amp; Matrices</h3>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Digital Audio Signal Processing-Lecture 2 (Notes)</title>
      <link>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/</link>
      <guid>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/</guid>
      <pubDate>Wed, 16 Jan 2019 00:15:03 GMT</pubDate>
      <description>
      
        &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 2.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Notes of Digital Audio Signal Processing, Lecture 2. <a id="more"></a></p><h2 id="dot-product">Dot product</h2><ul><li><span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span></li><li>The <a href="https://en.wikipedia.org/wiki/Correlation_and_dependence#Definition" target="_blank" rel="noopener">correlation</a> is related to dot product, see <a href="https://qr.ae/TUnqvl" target="_blank" rel="noopener">here</a>.</li><li>norm (<span class="math inline">\(\left\lVert\mathbf{u}\right\rVert = D(\mathbf{u},\mathbf{u})=\sum_{i=1}^3u_i^2\)</span>) <span class="math inline">\(\rightarrow\)</span> dot product (<span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span>) <span class="math inline">\(\rightarrow\)</span> Energy <span class="math inline">\(\left\lVert\mathbf{u}\right\rVert ^2\)</span>.</li><li><span class="math inline">\(D(\mathbf{u},\mathbf{u}) = \mathbf{u}^\intercal \mathbf{u}\)</span></li><li>inner product</li><li>Signal in discrete time of lenght <span class="math inline">\(N\)</span> has a dimension of <span class="math inline">\(N\)</span>;</li><li><a href="https://en.wikipedia.org/wiki/Orthogonality" target="_blank" rel="noopener">Orthogonal</a> <span class="math inline">\(\mathbf{s_1}^\intercal \mathbf{s_2} = 0\)</span>, meaning, nonzeros in <span class="math inline">\(\mathbf{s_1}\)</span> correspond to zeros in <span class="math inline">\(\mathbf{s_2}\)</span> <span class="math inline">\(\rightarrow\)</span> <strong>Frequency does not overlap ??</strong></li></ul><h2 id="matrix">Matrix</h2><ul><li>A matrix is a system.</li><li><a href="https://en.wikipedia.org/wiki/Hadamard_matrix" target="_blank" rel="noopener"><strong>Hadamard matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> <a href="https://en.wikipedia.org/wiki/Hadamard_transform" target="_blank" rel="noopener">Hadamard Transform</a> is an example of a generalized class of Fourier transform.</li><li><a href="https://en.wikipedia.org/wiki/Rotation_matrix" target="_blank" rel="noopener"><strong>Rotation matrix</strong></a></li><li>In Matlab, <code>u.*v</code> equals <code>diag(u)*v</code> (element-wise multiplication), where <code>diag(u)</code> is the <strong>temporal envelope</strong>.</li><li>In Matlab, <span class="math inline">\(B^{-1}C=\)</span><code>B\C</code> and <span class="math inline">\(B/C^{-1}=\)</span><code>B/C</code>.</li><li>The relationship between <strong>the deconvolution and the inverse of a matrix</strong></li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix" target="_blank" rel="noopener"><strong>Toeplitz matrix</strong></a> and its "upside down" version - <a href="https://en.wikipedia.org/wiki/Hankel_matrix" target="_blank" rel="noopener"><strong>Hankel matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> filter correlation <span class="math inline">\(\rightarrow\)</span> <strong>Transmission line matrix (Waveguide)</strong></li><li><a href="https://en.wikipedia.org/wiki/Vandermonde_matrix" target="_blank" rel="noopener"><strong>VanderMonde matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> damped sine wave (inversion) <span class="math inline">\(\rightarrow\)</span> noise cancellation</li><li>Matrices might not be inversable just like one might not recover the original signal from its projection onto one axis.</li><li><span class="math inline">\((\mathbf{ABC})^\intercal = \mathbf{C}^\intercal\mathbf{B}^\intercal\mathbf{A}^\intercal\)</span></li><li><a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors" target="_blank" rel="noopener">Eigenvector <span class="math inline">\(\mathbf{v}\)</span> and eigenvalues <span class="math inline">\(\lambda\)</span></a>. "Eigen" origins from German for "proper".<ul><li><span class="math inline">\(T(\mathbf{v})=\lambda\mathbf{v}\)</span>: <span class="math inline">\(T\)</span> is a linear transform and <span class="math inline">\(\mathbf{v}\)</span> and <span class="math inline">\(\lambda\)</span> are its eigenvector and eigenvalue.</li><li><a href="https://en.wikipedia.org/wiki/Spectrum_of_a_matrix" target="_blank" rel="noopener">The spectrum of a matrix is the set of its eigenvalues</a> and each eigenvector represents one frequency or one dimension/direction. Check <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix" target="_blank" rel="noopener"><strong>Eigendecomposition of a matrix</strong></a>.</li></ul></li></ul><h2 id="functions-and-polynomials">Functions and Polynomials</h2><ul><li>Linear (gain or interpolation), exponential (the feedback loop) and polynomial functions (spline interpolation, harmonic distortion or representing any functions)</li><li>Chebyshev Polynomial and distortion</li><li>Roots of polynomials <span class="math inline">\(p_n(x_i) = 0\)</span><ul><li><code>roots</code> (order limits)</li><li><span class="math inline">\(p_n(x) = (x-x_1)p_{n-1}(x) = a_n\prod_{i=1}^n(x-x_i)\)</span> <strong>??</strong></li></ul></li></ul><h2 id="rational">Rational</h2><ul><li><span class="math inline">\(f(x) = \frac{Q}{P}\)</span></li><li>Filter frequency response is a rational function (for most of cases), e.g., an exception, viscosity loss of pipe <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(\sqrt{f}\)</span> <span class="math inline">\(\rightarrow\)</span> irrational function</li></ul><h2 id="complex-numbers">Complex numbers</h2><h3 id="imaginary">Imaginary</h3><ul><li>Matlab considers a number to be complex (<span class="math inline">\(\mathbb{C}\)</span>)<br /></li><li>Complex number is defined because it does not exist in <span class="math inline">\(\mathbb{R}\)</span> or is just not defined before?</li><li><span class="math inline">\(j, -1, -j, 1\)</span> for <span class="math inline">\(j^n\)</span>, where <span class="math inline">\(n=1,2,3,4\)</span>.</li><li>Imaginary, a good word, but <a href="https://www.math.toronto.edu/mathnet/answers/imaginary.html" target="_blank" rel="noopener">imaginary is not real imaginary</a></li></ul><h3 id="phase-and-angle">Phase and angle</h3><ul><li><code>atan2</code>, "2" because it accepts two arguments and <code>angle</code> in Matlab uses <code>atan2</code></li><li>phase in(de)crease infinitely but how?</li></ul><h3 id="conjugate">Conjugate</h3><ul><li><a href="http://www.oed.com/view/Entry/39266?rskey=5nAP9w&amp;result=1&amp;isAdvanced=false#eid" target="_blank" rel="noopener">conjugate</a> meaning the opposite angle</li><li>real coefficients of polynomial <span class="math inline">\(\rightarrow\)</span> roots must be grouped by pairs</li><li>Euler's formula<span class="math inline">\(\rightarrow\)</span></li><li><span class="math inline">\(e^{j\theta} = \cos\theta+j\sin\theta\)</span> where <span class="math inline">\(e^{j\theta}\)</span> is the <a href="https://en.wikipedia.org/wiki/Analytic_signal" target="_blank" rel="noopener">analytic signal</a>, the analytic representation of the real-value function (<a href="https://en.wikipedia.org/wiki/Analytic_continuation" target="_blank" rel="noopener">analytic continuation</a>)</li><li>Transfer complex to real after passing a linear system is true but it is not true for a nonliear processing. <strong>WHY?</strong></li></ul><h3 id="unity-circle">Unity Circle</h3><ul><li>For root of unity <span class="math inline">\(z^N=1\)</span>, there are <span class="math inline">\(N\)</span> Nth root because it is an Nth-order polynomial <span class="math inline">\(1-z^N=0\)</span>.</li><li>Reciprocal of <span class="math inline">\(z\)</span> <span class="math inline">\(\rightarrow\)</span> unit circle (in(out)side) <span class="math inline">\(\rightarrow\)</span> stability ((un)stable)</li><li>polynomial<ul><li><a href="https://en.wikipedia.org/wiki/Complex_conjugate_root_theorem" target="_blank" rel="noopener">Complex conjugate root theorem</a>: real coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate pairs.</li><li>symmetrical coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate inverse pairs</li><li>when, <span class="math inline">\(|z|=1\)</span>, <span class="math inline">\(z^*=\dfrac{1}{z}\)</span>, roots are pairs of both inverse and conjugate, and are on unit circle.</li></ul></li><li>For <a href="https://en.wikipedia.org/wiki/Dot_product#Complex_vectors" target="_blank" rel="noopener">complex vectors</a> <span class="math inline">\(\mathbf{u}\)</span> and <span class="math inline">\(\mathbf{v}\)</span>,<ul><li><span class="math inline">\(D(u,v) = \sum_{i=1}^{N}\bar{u}_iv_i=u^{*T}v = u^Hv\)</span>, <span class="math inline">\(H\)</span> means transposed and conjugated <span class="math inline">\(\rightarrow\)</span> <code>u'</code> in Matlab</li><li><code>u.'</code> only does the transpose</li><li><span class="math inline">\(D(u,v)=\overline{D(v,u)}\)</span></li></ul></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sync your blogs across different OSs in Hexo</title>
      <link>http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/</link>
      <guid>http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/</guid>
      <pubDate>Mon, 07 Jan 2019 06:13:04 GMT</pubDate>
      <description>
      
        &lt;p&gt;This is an article about how to synchronize blogs across your different operating systems.
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>This is an article about how to synchronize blogs across your different operating systems. <a id="more"></a></p><p>It has been one year since I first set up Hexo and half a year since my first meaningful blog. I think it better to note down the steps I used to set up my GitHub Pages.</p><h2 id="github-pages-hexo-maupassant">GitHub Pages + Hexo + Maupassant</h2><h3 id="github-pages">GitHub Pages</h3><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p></blockquote><ul><li>You would need to create a new repository named "username.github.io".</li></ul><h3 id="static-generator">Static Generator</h3><p>The static generator would help transform your plain text into static webpages. There are several choices, the most widely used of which are <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> and <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>. I didn't try everything. Instead, I try to read comparison articles online and find the one suit for me. I remember that one of the reasons that Hexo attracts me is its "Blazing Fast". &gt; <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p><h3 id="theme">Theme</h3><p>You might need a theme for your blog and again, there are <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hundreds of options</a>. Finally, I decide to go for <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> because it looks concise. &gt; <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> - A simple Hexo template with great performance on different devices, ported from a Typecho theme by <a href="https://github.com/pagecho/maupassant" target="_blank" rel="noopener">Cho</a>, forked and modified from <a href="https://github.com/icylogic" target="_blank" rel="noopener">icylogic</a>.</p><h2 id="installation">Installation</h2><ul><li>The setup of Hexo is really simple. I just follow the <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo Documentation</a> and its done. This would include:<ul><li>Install <a href="https://hexo.io/docs/#Install-Git" target="_blank" rel="noopener">Git</a></li><li>Install <a href="https://hexo.io/docs/#Install-Node-js" target="_blank" rel="noopener">Node.js</a></li><li>Install <a href="https://hexo.io/docs/#Install-Hexo" target="_blank" rel="noopener">Hexo</a></li></ul></li></ul><h2 id="setup">Setup</h2><h3 id="hexo-setup">Hexo Setup</h3><ol type="1"><li>Go to the directory of the GitHub Page repository</li><li><code>hexo init</code>, initialization. Several folders and files would be generated.</li><li><code>npm install</code>, install packages based on <em>package.json</em> generated during <code>hexo init</code>, where <code>npm</code> is short for Node.js package manager. Actually, <code>npm install</code> should already be called during <code>hexo init</code>. (ref. <a href="https://hexo.io/docs/setup" target="_blank" rel="noopener">Hexo Setup</a>, <a href="https://docs.npmjs.com/cli/install.html" target="_blank" rel="noopener">npm-install</a>)</li><li>Follow the way of <a href="https://hexo.io/docs/deployment#Git" target="_blank" rel="noopener">deployment using Git</a>.</li></ol><h3 id="directory-structures">Directory Structures</h3><p>Several folders and files would be generated after <code>hexo init</code></p><ul><li><strong><a href="(https://hexo.io/docs/setup#config-yml)">_config.yml</a></strong>: site <a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">configuration</a> file, where one can configure most settings here</li><li><strong><a href="https://hexo.io/docs/setup#package-json" target="_blank" rel="noopener">package.json</a></strong> and <strong>package-lock.json</strong>: Application data, including the modules you need. The <strong>package-lock.json</strong> is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates. (ref. <a href="https://docs.npmjs.com/files/package-lock.json" target="_blank" rel="noopener">npm-package-lock.json</a> and <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">npm-package.json</a>).</li><li><strong>[node_modules]</strong>: the folder that local modules/packages of Node.js drop into. Its contents should correspond to <strong>package.json</strong> and is generated based on <code>npm install</code></li><li><strong><a href="https://hexo.io/docs/setup#scaffolds" target="_blank" rel="noopener">scaffolds</a></strong>: Seems like a folder for templates.</li><li><strong><a href="https://hexo.io/docs/setup#source" target="_blank" rel="noopener">source</a></strong>: the source folder including the original contents of the site, e.g., your Markdown files.</li><li><strong><a href="https://hexo.io/docs/setup#themes" target="_blank" rel="noopener">themes</a></strong>: the theme folders.</li><li><strong>db.json</strong>: no ideas about it, seems to be generated by <code>hexo generate</code> and is kind of cache which stores all posts, tags, categories, etc. in a JSON format for faster parsing. It would correspond to the generated sites.</li><li><strong>public</strong>: All the static webpage files generated by <code>hexo generate</code> and also the ones deployed to the git repository using <code>hexo-deployer-git</code>.</li><li><strong>.deploy_git</strong>, the folder for deployment of the static pages.</li></ul><h3 id="theme-setup">Theme Setup</h3><ul><li>Follow the installation of the theme <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a>.</li></ul><h3 id="git-the-whole-blogs-instead-of-the-only-the-static-websites">Git the whole blogs instead of the only the static websites</h3><p>You might have already noticed that using <code>hexo-deployer-git</code>, only the static websites would be git to the GitHub repository and you'll lose everything if your laptop dies without backup. Also, it is hard to synchronize across your multiple computers. So here is how to git everything including the original markdowns using two branches. The is based on this <a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%23more" target="_blank" rel="noopener">article</a> which is 404 now. But you could still refer to his answer in <a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">知乎</a></p><ol type="1"><li>Create the repository username.github.io</li><li>Add the following to .gitignore <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public&#x2F;</span><br><span class="line">package-lock.json</span><br><span class="line">.deploy_git&#x2F;</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></li><li>Create two branches: master and hexo.</li><li>Set hexo as the default branch.</li><li>clone the repository and set up based on the instruction above.</li><li>set the <code>deploy -&gt; branch</code> in **_config.yml** to master.</li></ol><p>This way, the static webpages generated and deployed by <code>hexo g -d</code> would be stored in the master branch which the original markdown files and the configuration would be in hexo branch using <code>git push origin hexo</code>.</p>]]></content:encoded>
      
      <comments>http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Adding a Shared Google Calendar to the Calendar App on the Mac</title>
      <link>http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/</link>
      <guid>http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/</guid>
      <pubDate>Sun, 30 Dec 2018 15:57:19 GMT</pubDate>
      <description>
      
        &lt;p&gt;In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.</p><a id="more"></a><p>There are two methods:</p><h3 id="method-1">Method 1:</h3><ol type="1"><li>When you open the link of the calendar shared with you. You could click the plus sign at the right corner to add it into your own google calendar. <img src="/images/20181229/google_calendar_add.png" /></li><li>Go to https://www.google.com/calendar/syncselect and check the calendar shared with you.</li><li>Go to the Mac Calendar and you will find it in your calendar list just under your google account. Check it for display.</li></ol><h3 id="method-2">Method 2:</h3><ol type="1"><li>As step 1 in Method 1.</li><li>Go to the Google Calendar and the shared calendar appears in the "Other calendars", go to the setting of the shared calendar.</li><li>Scroll down and find the "Integrate calendar-&gt;public address in iCal format" and copy the address.</li><li>Open the Mac Calendar and go to "Files -&gt; New Calendar Subscription" and paste the address into the "Calendar URL".</li></ol><p>PS: Also answered in <a href="https://apple.stackexchange.com/a/347044/222234%7D%3C/p%3E" title="" target="">StackExchange</a>]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DSP First - Chapter 5 - FIR Filters</title>
      <link>http://swang251.github.io/2018/12/24/DSPFirst-Ch5/</link>
      <guid>http://swang251.github.io/2018/12/24/DSPFirst-Ch5/</guid>
      <pubDate>Mon, 24 Dec 2018 18:10:07 GMT</pubDate>
      <description>
      
        &lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;filter&lt;/strong&gt; is a system that is designed to remove some component or modify some characteristic of a signal.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>A <strong>filter</strong> is a system that is designed to remove some component or modify some characteristic of a signal.</p></blockquote><a id="more"></a><p>Several different things are introduced, including: - <em>Finite impulse response (FIR)</em> systems: refered as FIR filters, are systems for which <em>each output value is the sum of a finite number of weighted values of the input sequence</em>. - <em>Difference equation</em>: the basis of the input-output structure of the FIR filter as a time-domain computation. - <em>Unit impulse response</em> - <em>Convolution</em> - <em>Linearity</em> and <em>time invariance</em> - <em>Discrete-time systems</em></p><h3 id="discrete-time-systems">Discrete-time systems</h3><blockquote><p>A discrete-time system is a computational process for transforming one sequence into another sequence. - <span class="math inline">\(x[n]\rightarrow \mathcal{T}\{\cdot\}\rightarrow y[n]=\mathcal{T}\{x[n]\}\)</span>, where <span class="math inline">\(x[n]\)</span> is the input signal and <span class="math inline">\(y[n]\)</span> is the output signal, both of which are discrete-time signals.</p></blockquote><h3 id="the-running-average-moving-average-filter">The running-average (moving-average) filter</h3><ul><li><a href="https://ccrma.stanford.edu/~jos/fp/Difference_Equation_I.html" target="_blank" rel="noopener">Difference equation</a>, e.g., the general, causal, linear and time invariant difference equation: <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{k=0}^M b_k x[n-k] - \sum\limits_{l=0}^N a_l y[n-l],\end{equation}\label{DE}\]</span> where <span class="math inline">\(k\)</span> and <span class="math inline">\(l\)</span> are the "dummy" counting indices for the sum and <span class="math inline">\(n\)</span> denotes the index of the <span class="math inline">\(n^{th}\)</span> sample of the output sequence.</li><li>Causal and noncausal:<ul><li><em>Causal filter</em>: a filter that uses only the present and past values of the <strong>input</strong>.</li><li><em>Noncausal filter</em>: a filter that uses future values of the <strong>input</strong>.</li></ul></li><li>Causal running averager or backward averager, similarly, we have the centralized running averager and the forward averager.</li></ul><h3 id="the-general-fir-filter">The general FIR filter</h3><ul><li>The general causal difference equation <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{k=0}^M b_k x[n-k],\end{equation}\label{FIR}\]</span> where the coefficients <span class="math inline">\(b_k\)</span> are fixed numbers.<ul><li><span class="math inline">\(M\)</span>, the <em>order</em> of the FIR filter</li><li><span class="math inline">\(L=M+1\)</span>, the number of filter coefficients is the filter <em>length</em></li></ul></li><li>Eq. <span class="math inline">\(\eqref{FIR}\)</span> could be written as <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{l=n-M}^n b_{n-l} x[l],\end{equation}\label{FIR_l}\]</span> where <span class="math inline">\(l=n-k\)</span> showing the FIR is causal using the input <span class="math inline">\(x[l]\)</span> start from the previous <span class="math inline">\(M\)</span> samples, i.e. <span class="math inline">\(l=n-M\)</span>, up to the current one <span class="math inline">\(l=n\)</span></li><li>For finite length input signal, i.e., <span class="math inline">\(x[l]\neq 0\)</span> for <span class="math inline">\(l\in[0, N-1]\)</span> and a <span class="math inline">\(M^{th}\)</span>-order FIR filter (of length <span class="math inline">\(M+1\)</span>, i.e., involving <span class="math inline">\(M+1\)</span> samples), there would be <em>transient component</em> of the output including <span class="math inline">\(M\)</span> samples <em>running onto</em> and <em>running off</em> session. And the total output length would be <span class="math inline">\(N+M\text{ (order)}=N+L-1\)</span>.</li></ul><h3 id="the-unit-impulse-response-and-convolution">The unit impulse response and convolution</h3><blockquote><p>The impulse response provides a complete characterization of the FIR filter. - Three new ideas introduced: - the unit impulse sequence - the unit impulse response - the convolution sum</p></blockquote><h4 id="unit-impulse-sequence">Unit impulse sequence</h4><ul><li>Unit impulse, or mathematically taken as the Kronecker <em>delta function</em> <span class="math display">\[\begin{equation} \delta[n]=    \begin{cases}    1\quad n=0\\    0\quad n\neq 0    \end{cases}\end{equation}\label{deltaFunction}\]</span></li><li><em>Express any sequence interm of delta function</em> <span class="math display">\[\begin{equation}  x[n]=\sum\limits_k x[k]\delta[n-k]  \end{equation}\lab  el{x}\]</span><ul><li>the unit impulse is a sequence</li><li><span class="math inline">\(\mathbf{x}\)</span> is a summation of infinite impulse sequences <span class="math inline">\(\mathbf{\delta}_k\)</span></li></ul></li></ul><h4 id="unit-impulse-response-sequence">Unit impulse response sequence</h4><ul><li>The output from a filter is called the <strong>response</strong> to the input.</li><li><strong>Unit impulse response</strong> <span class="math inline">\(h[n]\)</span> represents the output when the input is the unit impulse <span class="math inline">\(\delta[n]\)</span>.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/24/DSPFirst-Ch5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DSP First - Chapter 4 - Sampling and Aliasing</title>
      <link>http://swang251.github.io/2018/12/20/DSPFirst-Ch4/</link>
      <guid>http://swang251.github.io/2018/12/20/DSPFirst-Ch4/</guid>
      <pubDate>Thu, 20 Dec 2018 14:01:28 GMT</pubDate>
      <description>
      
        &lt;p&gt;Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.</p><a id="more"></a><h3 id="review-of-sine-and-cosine-functions">Review of sine and cosine functions</h3><ul><li>Basic <a href="https://en.wikipedia.org/wiki/Trigonometric_functions" target="_blank" rel="noopener">trigonometric functions</a>.</li></ul><h4 id="properties">Properties</h4><ul><li>Equivalence: <span class="math inline">\(\sin\theta = \cos(\theta-\pi/2)\)</span> or <span class="math inline">\(\cos\theta=\sin(\theta+\pi/2)\)</span>; <strong>the sine function is just a cosine function that is shifted to the right by <span class="math inline">\(\pi/2\)</span></strong>,</li><li>Periodicity: <span class="math inline">\(\cos(\theta + 2\pi k) = \cos\theta\)</span>, where <span class="math inline">\(k\in \mathbb{Z}\)</span>,</li><li>Evenness of cosine: <span class="math inline">\(\cos(-\theta) = \cos\theta\)</span>,</li><li>Oddness of sine: <span class="math inline">\(\sin(-\theta) = -\sin\theta\)</span>,</li><li>Zeros of sine: <span class="math inline">\(\sin(\pi k) = 0\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Ones of sine: <span class="math inline">\(\cos(2\pi k) = 1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Minus ones of cosine: <span class="math inline">\(\cos[2\pi(k+\dfrac{1}{2})]=-1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,x</li><li>Derivatives: <span class="math inline">\(\dfrac{d \sin\theta}{d \theta} = \cos\theta\)</span> and <span class="math inline">\(\dfrac{d \cos\theta}{d \theta} = -\sin\theta\)</span>.</li></ul><h4 id="trigonometric-identities">Trigonometric identities</h4><ul><li><span class="math inline">\(\sin^2\theta + \cos^2\theta = 1\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \cos^2\theta - \sin^2\theta\)</span>,</li><li><span class="math inline">\(\sin^2\theta = 2\sin\theta\cos\theta\)</span>,</li><li><span class="math inline">\(\sin(\alpha\pm\beta) = \sin\alpha\cos\beta \pm \cos\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos(\alpha\pm\beta) = \cos\alpha\cos\beta \mp \sin\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \frac{1}{2}(1+\cos 2\theta)\)</span>,</li><li><span class="math inline">\(\sin^2\theta = \frac{1}{2}(1-\cos 2\theta)\)</span>.</li></ul><h3 id="sinusoidal-signals">Sinusoidal signals</h3><h4 id="the-general-mathematical-formula-for-a-cosine-signal-is">The general mathematical formula for a cosine signal is</h4><p><span class="math display">\[\begin{equation}   x(t) = A\cos(\omega_0 t + \phi) = A\cos(2\pi f_0 t + \phi),\end{equation}\label{cos}\]</span> where - <span class="math inline">\(A\)</span> is the <em>amplitude</em>, - <span class="math inline">\(\omega_0\)</span> is the <em>radian frequency</em> (rad/sec), - <span class="math inline">\(\phi\)</span> represents the <em>radian phase-shift</em> (rads), - <span class="math inline">\(f_0 = \omega_0/2\pi\)</span>, the <em>cyclic frequency</em> (sec<span class="math inline">\(^{-1}\)</span>), represents the number of periods (cycles) per second, - <span class="math inline">\(T_0 = \dfrac{1}{f_0} = \dfrac{2\pi}{\omega_0}\)</span>, the <em>period</em> (sec), is the one cycle length of the sinusoid in time.</p><h4 id="phase-shift-and-time-shift">Phase shift and time shift</h4><ul><li>Having <span class="math inline">\(x_1(t) = x(t-t_1)\)</span>, we say <span class="math inline">\(x(t)\)</span> is a time-shifted version of <span class="math inline">\(s(t)\)</span><ul><li>if <span class="math inline">\(t_1 &gt; 0\)</span> (<em>positive</em>), shifted to the right = <em>delayed</em>,</li><li>if <span class="math inline">\(t_1 &lt; 0\)</span> (<em>negative</em>), shifted to the left = <em>advanced</em>.</li></ul></li><li>Taking the sinusoid as the form in Eq. <span class="math inline">\(\eqref{cos}\)</span>,<ul><li>convert time shift to a phase shift: <span class="math inline">\(x(t-t_1) = A\cos(\omega_0(t-t_1)+\phi) = A\cos(\omega_0t+\phi+\phi_1)\)</span>, where <span class="math inline">\(\phi_1 = -\omega_0t_1\)</span> is the phase shift.</li><li><span class="math inline">\(t_1 = -\dfrac{\phi}{\omega_0} = -\dfrac{\phi}{2\pi f_0}\)</span>,</li><li><span class="math inline">\(\phi_1 = -2\pi f_0 t_1 = -2\pi\dfrac{t_1}{T_0}\)</span>.</li></ul></li><li><strong>Based on the definition</strong> of the time shift and the phase shift, <strong>they have the opposite direction</strong>, e.g., if the time shift is positive (delay), the phase shift would be negative.</li><li>modulo reduction and principal value of the phase.</li></ul><h3 id="sampling-and-plotting-sinusoids">Sampling and plotting sinusoids</h3><ul><li>Be careful of the use of <span class="math inline">\(n\)</span> and <span class="math inline">\(t\)</span>, meaning one can use either <span class="math inline">\(x(nT_s)\)</span> or <span class="math inline">\(x(t)\)</span> but never <span class="math inline">\(x(tT_s)\)</span>.</li></ul><h3 id="complex-exponentials-and-phasors">Complex exponentials and phasors</h3><ul><li>Complex exponentials signals provide an alternative representation for the real cosine signal and might make some manipulation or analysis easier.</li></ul><h4 id="review-of-complex-numbers">Review of complex numbers</h4><ul><li>Real part and imaginary part.</li><li>Cartesian form or polar form.</li><li>Magnitude and argument</li><li>Euler's formula: <span class="math inline">\(e^{j\theta} = \cos\theta + j\sin\theta\)</span></li></ul><h4 id="complex-exponentials-signal">Complex exponentials signal</h4><ul><li><span class="math inline">\(\bar{x}(t) = Ae^{j(\omega_0t + \phi)}\)</span></li><li><span class="math inline">\(x(t) = \Re{\{Ae^{j(\omega_0t+\phi)}\}} = A\cos(\omega_0t+\phi)\)</span></li></ul><h4 id="the-rotating-phasor-interpretation">The rotating phasor interpretation</h4><ul><li>The complex exponential signal could be expressed as <span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}\)</span>, i.e., the product of the <em>complex amplitude</em> <span class="math inline">\(X=Ae^{j\phi}\)</span> and the <em>complex-valued</em> function <span class="math inline">\(e^{j\omega_0t}\)</span>.</li><li>The complex amplitude <span class="math inline">\(X\)</span> is also called the <strong>phasor</strong> (vs. vector) (相量 vs. 向量).</li><li><span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}=Ae^{j\theta(t)}\)</span>, where <span class="math inline">\(\theta(t) = \omega_0t + \phi\)</span>.</li><li>In the complex plane, <span class="math inline">\(\bar{x}(t)\)</span> is simply a rotating vector at a constant rate <span class="math inline">\(\omega_0\)</span> with initial phase <span class="math inline">\(\phi\)</span> (<span class="math inline">\(t=0\)</span>). So <em>a complex exponential signal</em> is a <strong>rotating phasor</strong>.<ul><li><span class="math inline">\(\omega_0 &gt; 0\)</span>: rotating counterclockwise,</li><li><span class="math inline">\(\omega_0 &lt; 0\)</span>: rotating clockwise.</li></ul></li></ul><h4 id="inverse-euler-formulas">Inverse Euler formulas</h4><ul><li>Applying the inverse Euler's formula, the real cosine signal with radian frequency <span class="math inline">\(\omega_0\)</span> is composed of two conjugated complex exponential signals with frequencies of <span class="math inline">\(\omega_0\)</span> and <span class="math inline">\(-\omega_0\)</span>, and also complex amplitudes of <span class="math inline">\(\frac{1}{2}Ae^{j\phi}\)</span> and <span class="math inline">\(-\frac{1}{2}Ae^{j\phi}\)</span>, respectively. <span class="math display">\[x(t) = A\cos(\omega_0t+\phi) = \frac{1}{2}\bar{x}(t) + \frac{1}{2}\bar{x}^*(t) = \Re{\{\bar{x}(t)\}}\]</span></li></ul><h3 id="phasor-addition">Phasor Addition</h3><ul><li>Additions of sinusoids with the same frequency but different amplitudes and phases</li></ul><h4 id="addition-of-complex-numbers">Addition of complex numbers</h4><ul><li><span class="math inline">\(z_1+z_2= (x_1+x_2)+j(y_1+y_2)\)</span>.</li></ul><h4 id="phasor-addition-rule">Phasor addition rule</h4><ul><li><em>The summation of sinusoids with the same frequency is a sinusoid with the identical frequency with the amplitude and phase of a certain phasor calculated by the summation of the phasors of each sinusoid.</em></li><li>Summation of phasors is also a phasor: <span class="math display">\[\begin{equation}    \sum_{k=1}^N A_ke^{j\phi_k} = Ae^{j\phi}    \end{equation} \label{phasor_sum}\]</span></li><li>Finally, lead us to: <span class="math display">\[\sum_{k=1}^N A_k\cos(\omega_0t + \phi_k) = A\cos(\omega_0t + \phi)\]</span> which could be proved either by<ul><li>trigonometric identities, or</li><li>summation of phasors following the steps:<ol type="1"><li>Get the phasors <span class="math inline">\(X_k = A_ke^{j\phi_k}\)</span> of each individual cosine signals,</li><li>Add phasors using Eq. <span class="math inline">\(\eqref{phasor_sum}\)</span>, employing polar-to-Cartesian-to-polar conversion,</li><li>Multiply the resulting phasor <span class="math inline">\(X=Ae^{j\phi}\)</span> with the rotating function <span class="math inline">\(e^{j\omega_0t}\)</span> and get <span class="math inline">\(\bar{x}(t)\)</span>,</li><li>Take the real part and get <span class="math inline">\(x(t) = \bar{x}(t)\)</span>.</li></ol></li></ul></li></ul><h3 id="tuning-fork-and-its-physics">Tuning fork and its physics</h3><ul><li>higher-frequency "ting" and the lower-frequency "hum", where the "ting" comes from the <em>transient</em>.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/20/DSPFirst-Ch4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DSP First - Chapter 3 - Spectrum Representation</title>
      <link>http://swang251.github.io/2018/12/19/DSPFirst-Ch3/</link>
      <guid>http://swang251.github.io/2018/12/19/DSPFirst-Ch3/</guid>
      <pubDate>Thu, 20 Dec 2018 02:48:39 GMT</pubDate>
      <description>
      
        &lt;p&gt;Spectrum, a graphic representation of the frequency components of a signal, is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a compact representation of the frequency contents of a signal that can be represented as a sum of sinusoid.&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Spectrum, a graphic representation of the frequency components of a signal, is</p><blockquote><p>a compact representation of the frequency contents of a signal that can be represented as a sum of sinusoid.</p></blockquote><a id="more"></a><blockquote><p>The term spectrum is used in many ways—often without precise definition. Our use of the term is clearly defined in terms of sums of sinusoids or complex exponentials.</p></blockquote><ul><li>In this chapter, instead using Fourier transform, the spectrum is introduced from complex exponentials, illustrated as a clockwise and a counterclockwise rotating phasor.</li></ul><h3 id="the-spectrum-of-a-sum-of-sinusoids">The Spectrum of a sum of sinusoids</h3><ul><li>Additive linear combination of sinusoids for new signals <span class="math inline">\(x(t)\)</span>:<ul><li>represented as real signals: <span class="math inline">\(x(t) = A_0 + \sum\limits_{k=1}^N A_k\cos(2\pi f_k t + \phi_k)\)</span>.</li><li>represented as complex exponentials: <span class="math inline">\(x(t) = X_0 + \sum\limits_{k=1}^N \Re{\{X_k e^{j2\pi f_kt}\}}\)</span>, where <span class="math inline">\(X_0=A_0\)</span></li></ul></li><li>Two-sided spectrum<ul><li>the inverse Euler formula leads the above equation to <span class="math display">\[\begin{equation}x(t)= X_0+ \sum\limits_{k=1}^N\{\dfrac{X_k}{2}e^{j2\pi f_kt}+\dfrac{X_k^*}{2}e^{-j2\pi f_kt}\},\label{two-sided}\end{equation}\]</span> as the real part of a complex number is equal to one-half the sum of that number and its complex conjugate.</li><li>Eq. <span class="math inline">\(\eqref{two-sided}\)</span> means the sinusoids are decomposed into <strong>two rotating phasors</strong> with frequency <span class="math inline">\(f_k\)</span> and <span class="math inline">\(-f_k\)</span>, i.e., <span class="math inline">\(2N+1\)</span> frequency components ("1" corresponds to the <span class="math inline">\(X_0\)</span> which is the zero frequency DC component).</li></ul></li><li>Frequency-domain representation (spectrum) vs. time-domain representation (waveform).</li><li>The spectrum is represented by the set of <span class="math inline">\((f_k, a_k)\)</span> pairs, and the signal can be written as a single compact summation <span class="math display">\[\begin{equation}  x(t)= \sum\limits_{k=-N}^N a_k e^{j2\pi f_k t},  \label{signal_summation}\end{equation}\]</span></li></ul><h3 id="sinusoidal-amplitude-modulation">Sinusoidal amplitude modulation</h3><p>The beat note and the amplitude modulation (AM)</p><h4 id="multiplication-and-sum-of-sinusoids">Multiplication and sum of sinusoids</h4><ul><li>Multiplication of sinusoids could be rewritten as a sum of sinusoids.</li><li>Beat notes, an addition of two sinusoids: <span class="math display">\[x(t) = \cos(2\pi f_1t)+\cos(2\pi f_2t) = 2\cos(2\pi f_{\Delta}t)\cos(2\pi f_c t),\]</span> with the <em>center frequency</em> <span class="math inline">\(f_c=\frac{1}{2}(f_1+f_2)\)</span> and the <em>deviation frequency</em> <span class="math inline">\(f_{\Delta}=\frac{1}{2}(f_2-f_1)\)</span></li><li>Envelope and amplitude modulation.</li></ul><h4 id="amplitude-modulation-am">Amplitude modulation (AM)</h4><ul><li>Amplitude modulation is the process of multiplying a high-frequency sinusoidal signals by a low-frequency signal. <span class="math display">\[x(t) = v(t)\cos(2\pi f_ct ),\]</span> where the <span class="math inline">\(\cos(2\pi f_ct)\)</span> is the carrier signal with the carrier frequency <span class="math inline">\(f_c\)</span> and the <span class="math inline">\(v(t)\)</span> is the modulating signal.</li><li>The primary difference between the AM signal and the beat note signal is that the AM envelope (<span class="math inline">\(v(t)\)</span>) is usually set up to have no zero crossings. However, the beat note signal, due to the property of adding sinusoids, the modulation signal is always a <span class="math inline">\(\cos\)</span> function so that brings in zero-crossings.</li></ul><h4 id="am-spectrum">AM spectrum</h4><ul><li>As the modulating signal <span class="math inline">\(v(t)= V_0 + V\cos(2\pi f_m t)\)</span>, so the resulting spectrum consists of scaled copies of <span class="math inline">\(f=\pm f_c\)</span> because of <span class="math inline">\(V_0\)</span> and two similar subsets <span class="math inline">\(+f_c \pm f_m\)</span> and <span class="math inline">\(-f_c \pm f_m\)</span>. Each subsets is a frequency-shifted and scaled version of the two-sided spectrum of <span class="math inline">\(v(t)\)</span>.</li></ul><h4 id="the-concept-of-bandwidth">The concept of bandwidth</h4><ul><li>For the previous case, the bandwidth equals <span class="math inline">\(BW = (f_c+f_m)-(f_c-f_m)=2f_m\)</span>.</li></ul><blockquote><p>The bandwidth characterization is important in the AM radio broadcast system because each AM radio station is assigned a specific carrier frequency <span class="math inline">\(f_c\)</span> and a bandwidth of 10 kHz centered at the carrier frequency. In this way, many local stations can share the (wide) bandwidth of free space without interfering with each other. This sharing of the free-space communication channel is called <em>frequency-division multiplexing</em> (频分复用).</p></blockquote><h3 id="operations-on-the-spectrum">Operations on the spectrum</h3><blockquote><p>The correspondence between a time-domain operation and spectrum changes is often referred to as a property of the spectrum representation.</p></blockquote><ul><li><em>Scaling</em>: leave all frequencies unchanged with scaled amplitude.</li><li><em>Adding a constant</em>: change the complex amplitude at only frequency at 0.</li><li><em>Adding signals</em>: summation of <span class="math inline">\((f_k, a_k)\)</span> pair.</li><li><em>Time-shifting</em><ul><li>time-domain: <span class="math inline">\(y(t)=x(t-\tau_d)\)</span>, where <span class="math inline">\(\tau_d\)</span> is the delay length.</li><li>freq-domain: <span class="math inline">\(b_k = a_k e^{-j2\pi f_k \tau_d}\)</span>, where <span class="math inline">\(b_k\)</span> is the resulting amplitude.</li></ul></li><li><em>Differentiating</em><ul><li>time-domain: <span class="math inline">\(y(t)=\frac{d}{dt}x(t)\)</span></li><li>freq-domain: <span class="math inline">\(b_k=(j2\pi f_k)a_k\)</span>.</li></ul></li><li><em>Frequency shifting</em><ul><li>time-domain: <span class="math inline">\(y(t)=x(t)e^{j(2\pi f_st+\phi)}\)</span></li><li>freq-domain: <span class="math inline">\((f_k, a_k) \rightarrow (f_k+f_s, a_k Ae^{j\phi})\)</span>.</li></ul></li></ul><h3 id="periodic-waveforms">Periodic waveforms</h3><ul><li>Periodic Signal <span class="math inline">\(x(t)=x(t+T_0)\)</span>, where <span class="math inline">\(T_0\)</span> is the period and <span class="math inline">\(F_0 = 1/T_0\)</span> is the fundamental frequency.</li><li>A Sum of <em>harmonically related</em> sinusoids can be used to synthesize a periodic signal. <span class="math display">\[\begin{equation}  x(t) = A_0 + \sum\limits_{k=1}^N A_k\cos(2\pi k F_0 t+\phi_k),\end{equation}\label{additive synthesis}\]</span> where the frequency, <span class="math inline">\(f_k=kF_0\)</span> is the harmonic frequencies and called the <span class="math inline">\(k^{th}\)</span> harmonic of the <span class="math inline">\(F_0\)</span></li><li>The waveform would be nonperiodic if the frequencies have no harmonic relation to one another.</li></ul><h3 id="fourier-series">Fourier series</h3><ul><li>Fourier Synthesis Summation or <strong>Fourier series</strong> <span class="math display">\[\begin{equation}  x(t)=\sum\limits_{-\infty}^{\infty} a_k e^{j2\pi f_kt},\end{equation}\label{FSS}\]</span> where <span class="math inline">\(f_k=k/T_0=kf_0\)</span> and <span class="math inline">\(F_0=1/T_0\)</span>.</li><li>Mathematical theory of <em>Fourier series</em>: a general theory that shows how to find the coefficients <span class="math inline">\(a_k\)</span> so that any periodic signal can be synthesized with a sum of harmonically related sinusoids, even when the sum may need an infinite umber of terms.</li><li>Two aspects of the Fourier series:<ul><li><em>Fourier analysis</em>: from <span class="math inline">\(x(t)\)</span> to calculate <span class="math inline">\({a_k}\)</span>.</li><li><em>Fourier synthesis</em>: from <span class="math inline">\({a_k}\)</span> to generate <span class="math inline">\(x(t)\)</span>.</li></ul></li></ul><h4 id="fourier-series-analysis">Fourier series: analysis</h4><ul><li><p>Fourier analysis integral <span class="math display">\[\begin{equation}   a_k=\dfrac{1}{T_0}\int\limits_0^{T_0}x(t)e^{-j2\pi f_k t} dt,\end{equation}\label{FAI}\]</span></p></li><li><p>DC Component <span class="math display">\[\begin{equation}   a_0=\dfrac{1}{T_0}\int\limits_0^{T_0}x(t) dt,\end{equation}\label{DC}\]</span></p></li><li><p>Only one period of <span class="math inline">\(x(t)\)</span> is required.</p></li><li><p>Two representations</p><ul><li><span class="math inline">\(x(t)\)</span>, time-domain representation.</li><li><span class="math inline">\(a_k\)</span>, frequency-domain representation or the spectrum representation.</li></ul></li></ul><h4 id="examples">Examples</h4><ul><li>The square wave (1st edition)</li><li>the triangle wave (1st edition), which is the integral of the square wave</li><li>Full-wave rectified sine wave (FWRS), <span class="math inline">\(x(t)=|\sin(2\pi t/T_1)|\)</span>, where the fundamental period <span class="math inline">\(T_0 = \frac{1}{2}T_1\)</span>.</li></ul><h3 id="time-frequency-spectrum-spectrogram">Time-frequency spectrum (Spectrogram)</h3><h3 id="frequency-modulation-chirp-signals">Frequency modulation: chirp signals</h3><ul><li><span class="math inline">\(x(t)=\Re{Ae^{j\psi(t)}}=A\cos(\psi(t))\)</span>, where <span class="math inline">\(\psi(t)\)</span> is the angle function.</li><li><strong>Instantaneous frequency</strong> <span class="math inline">\(\omega_i(t) = \dfrac{d}{dt}\psi(t) \; \text{rad/s}\)</span> and <span class="math inline">\(f_i(t) = \dfrac{1}{2\pi}\dfrac{d}{dt}\psi(t) \; \text{Hz}\)</span></li><li>Quadratic angle function<ul><li><span class="math inline">\(\psi(t)=2\pi\mu t^2 + 2\pi f_0 t + \phi\)</span>.</li><li><span class="math inline">\(f_i(t)=2\mu t + f_0\)</span> <span class="math inline">\(\rightarrow\)</span> <em>linear Frequency modulation</em> or <em>chirp</em></li></ul></li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/19/DSPFirst-Ch3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DSP First - Chapter 2 - Sinusoids</title>
      <link>http://swang251.github.io/2018/12/19/DSPFirst-Ch2/</link>
      <guid>http://swang251.github.io/2018/12/19/DSPFirst-Ch2/</guid>
      <pubDate>Wed, 19 Dec 2018 16:11:09 GMT</pubDate>
      <description>
      
        &lt;p&gt;Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.</p><a id="more"></a><h3 id="review-of-sine-and-cosine-functions">Review of sine and cosine functions</h3><ul><li>Basic <a href="https://en.wikipedia.org/wiki/Trigonometric_functions" target="_blank" rel="noopener">trigonometric functions</a>.</li></ul><h4 id="properties">Properties</h4><ul><li>Equivalence: <span class="math inline">\(\sin\theta = \cos(\theta-\pi/2)\)</span> or <span class="math inline">\(\cos\theta=\sin(\theta+\pi/2)\)</span>; <strong>the sine function is just a cosine function that is shifted to the right by <span class="math inline">\(\pi/2\)</span></strong>,</li><li>Periodicity: <span class="math inline">\(\cos(\theta + 2\pi k) = \cos\theta\)</span>, where <span class="math inline">\(k\in \mathbb{Z}\)</span>,</li><li>Evenness of cosine: <span class="math inline">\(\cos(-\theta) = \cos\theta\)</span>,</li><li>Oddness of sine: <span class="math inline">\(\sin(-\theta) = -\sin\theta\)</span>,</li><li>Zeros of sine: <span class="math inline">\(\sin(\pi k) = 0\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Ones of sine: <span class="math inline">\(\cos(2\pi k) = 1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Minus ones of cosine: <span class="math inline">\(\cos[2\pi(k+\dfrac{1}{2})]=-1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Derivatives: <span class="math inline">\(\dfrac{d \sin\theta}{d \theta} = \cos\theta\)</span> and <span class="math inline">\(\dfrac{d \cos\theta}{d \theta} = -\sin\theta\)</span>.</li></ul><h4 id="trigonometric-identities">Trigonometric identities</h4><ul><li><span class="math inline">\(\sin^2\theta + \cos^2\theta = 1\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \cos^2\theta - \sin^2\theta\)</span>,</li><li><span class="math inline">\(\sin^2\theta = 2\sin\theta\cos\theta\)</span>,</li><li><span class="math inline">\(\sin(\alpha\pm\beta) = \sin\alpha\cos\beta \pm \cos\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos(\alpha\pm\beta) = \cos\alpha\cos\beta \mp \sin\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \frac{1}{2}(1+\cos 2\theta)\)</span>,</li><li><span class="math inline">\(\sin^2\theta = \frac{1}{2}(1-\cos 2\theta)\)</span>.</li></ul><h3 id="sinusoidal-signals">Sinusoidal signals</h3><h4 id="the-general-mathematical-formula-for-a-cosine-signal-is">The general mathematical formula for a cosine signal is</h4><p><span class="math display">\[\begin{equation}   x(t) = A\cos(\omega_0 t + \phi) = A\cos(2\pi f_0 t + \phi),\end{equation}\label{cos}\]</span> where - <span class="math inline">\(A\)</span> is the <em>amplitude</em>, - <span class="math inline">\(\omega_0\)</span> is the <em>radian frequency</em> (rad/sec), - <span class="math inline">\(\phi\)</span> represents the <em>radian phase-shift</em> (rads), - <span class="math inline">\(f_0 = \omega_0/2\pi\)</span>, the <em>cyclic frequency</em> (sec<span class="math inline">\(^{-1}\)</span>), represents the number of periods (cycles) per second, - <span class="math inline">\(T_0 = \dfrac{1}{f_0} = \dfrac{2\pi}{\omega_0}\)</span>, the <em>period</em> (sec), is the one cycle length of the sinusoid in time.</p><h4 id="phase-shift-and-time-shift">Phase shift and time shift</h4><ul><li>Having <span class="math inline">\(x_1(t) = x(t-t_1)\)</span>, we say <span class="math inline">\(x(t)\)</span> is a time-shifted version of <span class="math inline">\(s(t)\)</span><ul><li>if <span class="math inline">\(t_1 &gt; 0\)</span> (<em>positive</em>), shifted to the right = <em>delayed</em>,</li><li>if <span class="math inline">\(t_1 &lt; 0\)</span> (<em>negative</em>), shifted to the left = <em>advanced</em>.</li></ul></li><li>Taking the sinusoid as the form in Eq. <span class="math inline">\(\eqref{cos}\)</span>,<ul><li>convert time shift to a phase shift: <span class="math inline">\(x(t-t_1) = A\cos(\omega_0(t-t_1)+\phi) = A\cos(\omega_0t+\phi+\phi_1)\)</span>, where <span class="math inline">\(\phi_1 = -\omega_0t_1\)</span> is the phase shift.</li><li><span class="math inline">\(t_1 = -\dfrac{\phi}{\omega_0} = -\dfrac{\phi}{2\pi f_0}\)</span>,</li><li><span class="math inline">\(\phi_1 = -2\pi f_0 t_1 = -2\pi\dfrac{t_1}{T_0}\)</span>.</li></ul></li><li><strong>Based on the definition</strong> of the time shift and the phase shift, <strong>they have the opposite direction</strong>, e.g., if the time shift is positive (delay), the phase shift would be negative.</li><li>modulo reduction and principal value of the phase.</li></ul><h3 id="sampling-and-plotting-sinusoids">Sampling and plotting sinusoids</h3><ul><li>Be careful of the use of <span class="math inline">\(n\)</span> and <span class="math inline">\(t\)</span>, meaning one can use either <span class="math inline">\(x(nT_s)\)</span> or <span class="math inline">\(x(t)\)</span> but never <span class="math inline">\(x(tT_s)\)</span>.</li></ul><h3 id="complex-exponentials-and-phasors">Complex exponentials and phasors</h3><ul><li>Complex exponential signals provide an alternative representation for the real cosine signal and might make some manipulation or analysis easier.</li></ul><h4 id="review-of-complex-numbers">Review of complex numbers</h4><ul><li>Real part and imaginary part.</li><li>Cartesian form or polar form.</li><li>Magnitude and argument</li><li>Euler's formula: <span class="math inline">\(e^{j\theta} = \cos\theta + j\sin\theta\)</span></li></ul><h4 id="complex-exponentials-signal">Complex exponentials signal</h4><ul><li><span class="math inline">\(\bar{x}(t) = Ae^{j(\omega_0t + \phi)}\)</span></li><li><span class="math inline">\(x(t) = \Re{\{Ae^{j(\omega_0t+\phi)}\}} = A\cos(\omega_0t+\phi)\)</span></li></ul><h4 id="the-rotating-phasor-interpretation">The rotating phasor interpretation</h4><ul><li>The complex exponential signal could be expressed as <span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}\)</span>, i.e., the product of the <em>complex amplitude</em> <span class="math inline">\(X=Ae^{j\phi}\)</span> and the <em>complex-valued</em> function <span class="math inline">\(e^{j\omega_0t}\)</span>.</li><li>The complex amplitude <span class="math inline">\(X\)</span> is also called the <strong>phasor</strong> (vs. vector) (相量 vs. 向量).</li><li><span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}=Ae^{j\theta(t)}\)</span>, where <span class="math inline">\(\theta(t) = \omega_0t + \phi\)</span>.</li><li>In the complex plane, <span class="math inline">\(\bar{x}(t)\)</span> is simply a rotating vector at a constant rate <span class="math inline">\(\omega_0\)</span> with initial phase <span class="math inline">\(\phi\)</span> (<span class="math inline">\(t=0\)</span>). So <em>a complex exponential signal</em> is a <strong>rotating phasor</strong>.<ul><li><span class="math inline">\(\omega_0 &gt; 0\)</span>: rotating counterclockwise,</li><li><span class="math inline">\(\omega_0 &lt; 0\)</span>: rotating clockwise.</li></ul></li></ul><h4 id="inverse-euler-formulas">Inverse Euler formulas</h4><ul><li>Applying the inverse Euler's formula, the real cosine signal with radian frequency <span class="math inline">\(\omega_0\)</span> is composed of two conjugated complex exponential signals with frequencies of <span class="math inline">\(\omega_0\)</span> and <span class="math inline">\(-\omega_0\)</span>, and also complex amplitudes of <span class="math inline">\(\frac{1}{2}Ae^{j\phi}\)</span> and <span class="math inline">\(-\frac{1}{2}Ae^{j\phi}\)</span>, respectively. <span class="math display">\[x(t) = A\cos(\omega_0t+\phi) = \frac{1}{2}\bar{x}(t) + \frac{1}{2}\bar{x}^*(t) = \Re{\{\bar{x}(t)\}}\]</span></li></ul><h3 id="phasor-addition">Phasor Addition</h3><ul><li>Additions of sinusoids with the same frequency but different amplitudes and phases</li></ul><h4 id="addition-of-complex-numbers">Addition of complex numbers</h4><ul><li><span class="math inline">\(z_1+z_2= (x_1+x_2)+j(y_1+y_2)\)</span>.</li></ul><h4 id="phasor-addition-rule">Phasor addition rule</h4><ul><li><em>The summation of sinusoids with the same frequency is a sinusoid with the identical frequency with the amplitude and phase of a certain phasor calculated by the summation of the phasors of each sinusoid.</em></li><li>Summation of phasors is also a phasor: <span class="math display">\[\begin{equation}    \sum_{k=1}^N A_ke^{j\phi_k} = Ae^{j\phi}    \end{equation} \label{phasor_sum}\]</span></li><li>Finally, lead us to: <span class="math display">\[\sum_{k=1}^N A_k\cos(\omega_0t + \phi_k) = A\cos(\omega_0t + \phi)\]</span> which could be proved either by<ul><li>trigonometric identities, or</li><li>summation of phasors following the steps:<ol type="1"><li>Get the phasors <span class="math inline">\(X_k = A_ke^{j\phi_k}\)</span> of each individual cosine signals,</li><li>Add phasors using Eq. <span class="math inline">\(\eqref{phasor_sum}\)</span>, employing polar-to-Cartesian-to-polar conversion,</li><li>Multiply the resulting phasor <span class="math inline">\(X=Ae^{j\phi}\)</span> with the rotating function <span class="math inline">\(e^{j\omega_0t}\)</span> and get <span class="math inline">\(\bar{x}(t)\)</span>,</li><li>Take the real part and get <span class="math inline">\(x(t) = \bar{x}(t)\)</span>.</li></ol></li></ul></li></ul><h3 id="tuning-fork-and-its-physics">Tuning fork and its physics</h3><ul><li>higher-frequency "ting" and the lower-frequency "hum", where the "ting" comes from the <em>transient</em>.</li></ul>]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/19/DSPFirst-Ch2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DSP First - Appendix A - Complex Numbers</title>
      <link>http://swang251.github.io/2018/12/18/DSPFirst-AppendixA/</link>
      <guid>http://swang251.github.io/2018/12/18/DSPFirst-AppendixA/</guid>
      <pubDate>Wed, 19 Dec 2018 03:18:05 GMT</pubDate>
      <description>
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot; cla
        
      
      </description>
      
      
      <content:encoded><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ul><li>In this appendix, the basic manipulations of complex numbers are reviewed. There ideas are treated:<ul><li>simple algebraic rules: operations on <span class="math inline">\(z = x+jy\)</span>.</li><li>elimination of trigonometry: Euler's formula for the complex exponential <span class="math inline">\(z = re^{j\theta}=r\cos\theta+jr\sin\theta\)</span>.</li><li>representation by vectors: a way for visualization.</li></ul></li><li>Symbol: <span class="math inline">\(i\)</span> or <span class="math inline">\(j\)</span><ul><li>Physicists and mathematicians use symbol <span class="math inline">\(i=\sqrt{-1}\)</span>.</li><li>Electrical engineers use symbol <span class="math inline">\(j=\sqrt{-1}\)</span> instead because <span class="math inline">\(i\)</span> is left to the current.</li></ul></li><li>Algebraic vs. Trigonometric vs. Geometric.</li></ul><h3 id="a.1-introduction">A.1 Introduction</h3><ul><li>The way <span class="math inline">\(j\)</span> is introduced: <span class="math inline">\(z^2=-1\)</span> ==&gt; <span class="math inline">\(z=\pm j\)</span>.</li><li>More general, complex numbers are the roots of quadratic equations.</li></ul><h3 id="a.2-notation-for-complex-numbers">A.2 Notation for complex numbers</h3><ul><li>There are two types complex number representations:<ul><li>Rectangular form (Cartesian form): <span class="math inline">\(z = (x, y) = x + jy = \Re \{ z \} + j\Im\{z\}\)</span>, where <span class="math inline">\(\Re\{\}\)</span> and <span class="math inline">\(\Im\{\}\)</span> represent the real and imaginary parts of the complex number, respectively.</li><li>Polar form: <span class="math inline">\(z \leftrightarrow r\angle\theta\)</span> where <span class="math inline">\(r\)</span> is the amplitude and <span class="math inline">\(\angle\theta\)</span> is the angle whose principal value belongs to <span class="math inline">\(-180^{\circ}&lt;\theta &lt; 180^{\circ}\)</span></li><li>Conversion:<ul><li>polar --&gt; rectangular: <span class="math inline">\(z=x + jy\)</span>, where <span class="math display">\[\begin{equation}      \begin{cases}      x = r\cos\theta,\\      y = r\sin\theta      \end{cases} \end{equation}   \label{eq1}\]</span></li><li>rectangular --&gt; polar: <span class="math inline">\(z = re^{j\theta}=|z|e^{j\, \text{arg}|z|}\)</span>, where <span class="math display">\[\begin{equation}      \begin{cases}      r = \sqrt{x^2+y^2},\\      \theta = \text{atan}(y, x)      \end{cases} \end{equation}   \label{eq2}\]</span></li></ul></li></ul></li></ul><h3 id="a.3-eulers-formula">A.3 Euler's formula</h3><ul><li>Euler's formula <span class="math display">\[ \begin{equation} e^{j\theta} = \cos{\theta} + j\sin\theta \end{equation}\label{Euler} \]</span></li><li>Inverse Euler fomulas <span class="math display">\[ \begin{align}    \cos\theta &amp;= \frac{e^{j\theta} + e^{-j\theta}}{2}\\    \sin\theta &amp;= \frac{e^{j\theta} - e^{-j\theta}}{2} \end{align}\]</span></li></ul><h3 id="a.4-algebraic-rules-for-complex-numbers">A.4 Algebraic rules for complex numbers</h3><h4 id="rectangular-form">Rectangular form</h4><p>For <span class="math inline">\(z_1 = x_1 + jy_1\)</span> and <span class="math inline">\(z_2 = x_2+jy_2\)</span>,</p><ul><li>addition and subtraction: <span class="math inline">\(z_1 \pm z_2 = (x_1 \pm x_2) + j(y_1 \pm y_2)\)</span>.</li><li>multiplication: <span class="math inline">\(z_1 z_2 = (x_1 x_2-y_1 y_2)+j(x_1 y_2+x_2 y_1)\)</span></li><li>conjugate: <span class="math inline">\(z_1^* = x_1 - jy_1\)</span></li><li>division: <span class="math inline">\(\dfrac{z_1}{z_2} = \dfrac{z_1z_2^*}{z_2z_2^*} = \dfrac{z_1z_2^*}{|z_2|^2} = \dfrac{(x_1x_2+y_1y_2) + j(x_2y_1-x_1y_2)}{x_2^2+y_2^2}\)</span></li></ul><h4 id="polar-form">Polar form</h4><p>For <span class="math inline">\(z_1 = r_1e^{j\theta_1}\)</span> and <span class="math inline">\(z_2 = r_2e^{j\theta_2}\)</span>,</p><ul><li>multiplication: <span class="math inline">\(z_1z_2 = (r_1r_2)e^{j(\theta_1+\theta_2)}\)</span></li><li>conjugate: <span class="math inline">\(z_1^* = r_1e^{-j\theta_1}\)</span></li><li>division: <span class="math inline">\(\dfrac{z_1}{z_2} = \dfrac{r_1}{r_2}e^{j(\theta_1-\theta_2)}\)</span></li><li>addition and subtraction: transfer to rectangular form and do the addition or subtraction, and then, transfer back to polar form.</li></ul><h4 id="others">others</h4><ul><li><span class="math inline">\(\Re\{z\} = \dfrac{z+z^*}{2}\)</span></li><li><span class="math inline">\(\Im\{z\} = \dfrac{z-z^*}{2j}\)</span></li><li><span class="math inline">\(|z|^2 = zz^*\)</span></li></ul><h3 id="a.5-geometric-views-off-complex-operations">A.5 Geometric views off complex operations</h3><p>A geometric view provides a convenient visualization for complex number operations.</p><h3 id="a.6-powers-and-roots">A.6 Powers and Roots</h3><ul><li><span class="math inline">\(z^N = (re^{j\theta})^N = r^Ne^{jN\theta}\)</span></li><li>De Moivre's formula: <span class="math inline">\((\cos\theta + j\sin\theta)^N = \cos N\theta + j\sin N\theta\)</span> (because <span class="math inline">\((e^{j\theta})^N = e^{jN\theta}\)</span>)</li><li>Roots of unity (<span class="math inline">\(z^N=1\)</span>): <span class="math inline">\(z=e^{j2\pi l/N}\)</span> for <span class="math inline">\(l=0,1,2\dots N-1\)</span></li><li><span class="math inline">\(z^N=c=|c|e^{j\phi}\)</span>: <span class="math inline">\(z=re^{j\theta}\)</span>, where <span class="math display">\[\begin{cases}r = |c|^{1/N},\\\theta = \dfrac{\phi+2\pi l}{N},\end{cases}\]</span> and <span class="math inline">\(\theta\)</span> is the angular spacing.</li></ul><!-- the famous matter-energy equation $\eqref{eq1}$ proposed by Einstein ...-->]]></content:encoded>
      
      <comments>http://swang251.github.io/2018/12/18/DSPFirst-AppendixA/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swang251.github.io/"/>
  <updated>2019-01-11T22:25:30.000Z</updated>
  <id>http://swang251.github.io/</id>
  
  <author>
    <name>Song Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sync your blogs across different OSs in Hexo</title>
    <link href="http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/"/>
    <id>http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/</id>
    <published>2019-01-07T06:13:04.000Z</published>
    <updated>2019-01-11T22:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article about how to synchronize blogs across your different operating systems. <a id="more"></a></p><p>It has been one year since I first set up Hexo and half a year since my first meaningful blog. I think it better to note down the steps I used to set up my GitHub Pages.</p><h2 id="github-pages-hexo-maupassant">GitHub Pages + Hexo + Maupassant</h2><h3 id="github-pages">GitHub Pages</h3><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p></blockquote><ul><li>You would need to create a new repository named &quot;username.github.io&quot;.</li></ul><h3 id="static-generator">Static Generator</h3><p>The static generator would help transform your plain text into static webpages. There are several choices, the most widely used of which are <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> and <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>. I didn't try everything. Instead, I try to read comparison articles online and find the one suit for me. I remember that one of the reasons that Hexo attracts me is its &quot;Blazing Fast&quot;. &gt; <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p><h3 id="theme">Theme</h3><p>You might need a theme for your blog and again, there are <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hundreds of options</a>. Finally, I decide to go for <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> because it looks concise. &gt; <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> - A simple Hexo template with great performance on different devices, ported from a Typecho theme by <a href="https://github.com/pagecho/maupassant" target="_blank" rel="noopener">Cho</a>, forked and modified from <a href="https://github.com/icylogic" target="_blank" rel="noopener">icylogic</a>.</p><h2 id="installation">Installation</h2><ul><li>The setup of Hexo is really simple. I just follow the <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo Documentation</a> and its done. This would include:<ul><li>Install <a href="https://hexo.io/docs/#Install-Git" target="_blank" rel="noopener">Git</a></li><li>Install <a href="https://hexo.io/docs/#Install-Node-js" target="_blank" rel="noopener">Node.js</a></li><li>Install <a href="https://hexo.io/docs/#Install-Hexo" target="_blank" rel="noopener">Hexo</a></li></ul></li></ul><h2 id="setup">Setup</h2><h3 id="hexo-setup">Hexo Setup</h3><ol type="1"><li>Go to the directory of the GitHub Page repository</li><li><code>hexo init</code>, initialization. Several folders and files would be generated.</li><li><code>npm install</code>, install packages based on <em>package.json</em> generated during <code>hexo init</code>, where <code>npm</code> is short for Node.js package manager. Actually, <code>npm install</code> should already be called during <code>hexo init</code>. (ref. <a href="https://hexo.io/docs/setup" target="_blank" rel="noopener">Hexo Setup</a>, <a href="https://docs.npmjs.com/cli/install.html" target="_blank" rel="noopener">npm-install</a>)</li><li>Follow the way of <a href="https://hexo.io/docs/deployment#Git" target="_blank" rel="noopener">deployment using Git</a>.</li></ol><h3 id="directory-structures">Directory Structures</h3><p>Several folders and files would be generated after <code>hexo init</code></p><ul><li><strong><a href="(https://hexo.io/docs/setup#config-yml)">_config.yml</a></strong>: site <a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">configuration</a> file, where one can configure most settings here</li><li><strong><a href="https://hexo.io/docs/setup#package-json" target="_blank" rel="noopener">package.json</a></strong> and <strong>package-lock.json</strong>: Application data, including the modules you need. The <strong>package-lock.json</strong> is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates. (ref. <a href="https://docs.npmjs.com/files/package-lock.json" target="_blank" rel="noopener">npm-package-lock.json</a> and <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">npm-package.json</a>).</li><li><strong>[node_modules]</strong>: the folder that local modules/packages of Node.js drop into. Its contents should correspond to <strong>package.json</strong> and is generated based on <code>npm install</code></li><li><strong><a href="https://hexo.io/docs/setup#scaffolds" target="_blank" rel="noopener">scaffolds</a></strong>: Seems like a folder for templates.</li><li><strong><a href="https://hexo.io/docs/setup#source" target="_blank" rel="noopener">source</a></strong>: the source folder including the original contents of the site, e.g., your Markdown files.</li><li><strong><a href="https://hexo.io/docs/setup#themes" target="_blank" rel="noopener">themes</a></strong>: the theme folders.</li><li><strong>db.json</strong>: no ideas about it, seems to be generated by <code>hexo generate</code> and is kind of cache which stores all posts, tags, categories, etc. in a JSON format for faster parsing. It would correspond to the generated sites.</li><li><strong>public</strong>: All the static webpage files generated by <code>hexo generate</code> and also the ones deployed to the git repository using <code>hexo-deployer-git</code>.</li><li><strong>.deploy_git</strong>, the folder for deployment of the static pages.</li></ul><h3 id="theme-setup">Theme Setup</h3><ul><li>Follow the installation of the theme <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a>.</li></ul><h3 id="git-the-whole-blogs-instead-of-the-only-the-static-websites">Git the whole blogs instead of the only the static websites</h3><p>You might have already noticed that using <code>hexo-deployer-git</code>, only the static websites would be git to the GitHub repository and you'll lose everything if your laptop dies without backup. Also, it is hard to synchronize across your multiple computers. So here is how to git everything including the original markdowns using two branches. The is based on this <a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%23more" target="_blank" rel="noopener">article</a> which is 404 now. But you could still refer to his answer in <a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">知乎</a></p><ol type="1"><li>Create the repository username.github.io</li><li><p>Add the following to .gitignore <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public/</span><br><span class="line">package-lock.json</span><br><span class="line">.deploy_git/</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></p></li><li>Create two branches: master and hexo.</li><li>Set hexo as the default branch.</li><li>clone the repository and set up based on the instruction above.</li><li><p>set the <code>deploy -&gt; branch</code> in **_config.yml** to master.</p></li></ol><p>This way, the static webpages generated and deployed by <code>hexo g -d</code> would be stored in the master branch which the original markdown files and the configuration would be in hexo branch using <code>git push origin hexo</code>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an article about how to synchronize blogs across your different operating systems.
    
    </summary>
    
      <category term="daily" scheme="http://swang251.github.io/categories/daily/"/>
    
    
      <category term="Hexo" scheme="http://swang251.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Adding a Shared Google Calendar to the Calendar App on the Mac</title>
    <link href="http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/"/>
    <id>http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/</id>
    <published>2018-12-30T15:57:19.000Z</published>
    <updated>2018-12-30T17:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.</p><a id="more"></a><p>There are two methods:</p><h3 id="method-1">Method 1:</h3><ol type="1"><li>When you open the link of the calendar shared with you. You could click the plus sign at the right corner to add it into your own google calendar. <img src="/images/20181229/google_calendar_add.png"></li><li>Go to https://www.google.com/calendar/syncselect and check the calendar shared with you.</li><li>Go to the Mac Calendar and you will find it in your calendar list just under your google account. Check it for display.</li></ol><h3 id="method-2">Method 2:</h3><ol type="1"><li>As step 1 in Method 1.</li><li>Go to the Google Calendar and the shared calendar appears in the &quot;Other calendars&quot;, go to the setting of the shared calendar.</li><li>Scroll down and find the &quot;Integrate calendar-&gt;public address in iCal format&quot; and copy the address.</li><li>Open the Mac Calendar and go to &quot;Files -&gt; New Calendar Subscription&quot; and paste the address into the &quot;Calendar URL&quot;.</li></ol><p>PS: Also answered in <a href="https://apple.stackexchange.com/a/347044/222234}</p>" target="_blank" rel="noopener">StackExchange</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.&lt;/p&gt;
    
    </summary>
    
      <category term="daily" scheme="http://swang251.github.io/categories/daily/"/>
    
    
      <category term="MacOS" scheme="http://swang251.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>DSP First - Chapter 2 - Sinusoids</title>
    <link href="http://swang251.github.io/2018/12/19/DSPFirst-Ch2/"/>
    <id>http://swang251.github.io/2018/12/19/DSPFirst-Ch2/</id>
    <published>2018-12-19T16:11:09.000Z</published>
    <updated>2018-12-30T01:08:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.</p><a id="more"></a><h3 id="sinusoidal-signals">Sinusoidal signals</h3><ul><li>The general mathematical formula for a cosine signal is <span class="math display">\[\begin{equation} x(t) = A\cos(\omega_0 t + \phi) = A\cos(2\pi f_0 t + \phi), \end{equation}\label{cos}\]</span> where<ul><li><span class="math inline">\(A\)</span> is the amplitude,</li><li><span class="math inline">\(\omega_0\)</span> is the radian frequency (rad/sec),</li><li><span class="math inline">\(\phi\)</span> represents the radian phase-shift (rads),</li><li><span class="math inline">\(f_0 = \omega_0/2\pi\)</span>, the cyclic frequency (sec<span class="math inline">\(^{-1}\)</span>), represents the number of periods (cycles) per second,</li><li><span class="math inline">\(T_0 = \dfrac{1}{f_0} = \dfrac{2\pi}{\omega_0}\)</span>, the period (sec), is the one cycle length of the sinusoid in time.</li></ul></li><li>Phase shift and time shift<ul><li>Having <span class="math inline">\(x_1(t) = x(t-t_1)\)</span>, we say <span class="math inline">\(x(t)\)</span> is a time-shifted version of <span class="math inline">\(s(t)\)</span><ul><li>if <span class="math inline">\(t_1 &gt; 0\)</span>, shifted to the right = delayed,</li><li>if <span class="math inline">\(t_1 &lt; 0\)</span>, shifted to the left = advanced.</li></ul></li><li>Taking the sinusoid as the form in Eq. <span class="math inline">\(\eqref{cos}\)</span>,<ul><li>convert time shift to a phase shift: <span class="math inline">\(x(t-t_1) = A\cos(\omega_0(t-t_1)+\phi) = A\cos(\omega_0t+\phi+\phi_1)\)</span>, where <span class="math inline">\(\phi_1 = -\omega_0t_1\)</span> is the phase shift.</li><li><span class="math inline">\(t_1 = -\dfrac{\phi}{\omega_0} = -\dfrac{\phi}{2\pi f_0}\)</span>,</li><li><span class="math inline">\(\phi_1 = -2\pi f_0 t_1 = -2\pi\dfrac{t_1}{T_0}\)</span>.</li></ul></li><li>Based on the definition of the time shift and the phase shift, <strong>they have the opposite direction</strong>, e.g., if the time shift is positive (delay), the phase shift would be negative.</li></ul></li></ul><h3 id="complex-exponentials-and-phasors">Complex exponentials and phasors</h3><h4 id="complex-exponentials">Complex exponentials</h4><ul><li>Complex exponentials provide an alternative representation for the real cosine signal and might make things easier: <span class="math display">\[\begin{equation}\bar{x}(t) = Ae^{j(\omega_0t + \phi)}\end{equation} \label{complex} \]</span><ul><li><span class="math inline">\(x(t) = \Re{\{Ae^{j(\omega_0t+\phi)}\}} = A\cos(\omega_0t+\phi)\)</span></li></ul></li></ul><h4 id="phasors">Phasors</h4><ul><li>The rotating phasor interpretation<ul><li>The complex exponential signal could be expressed as <span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}\)</span>, i.e., the product of the complex amplitude <span class="math inline">\(X=Ae^{j\phi}\)</span> and the complex-valued function <span class="math inline">\(e^{j\omega_0t}\)</span>.</li><li>The complex amplitude <span class="math inline">\(X\)</span> is also called the <strong>phasor</strong>.</li><li><span class="math inline">\(\bar{x}(t)=Xe^{j\omega_0t}=Ae^{j\theta(t)}\)</span>, where <span class="math inline">\(\theta(t) = \omega_0t + \phi\)</span>.</li><li>In the complex plane, <span class="math inline">\(\bar{x}(t)\)</span> is simply a rotating vector at a constant rate <span class="math inline">\(\omega_0\)</span> with initial phase <span class="math inline">\(\phi\)</span> (<span class="math inline">\(t=0\)</span>). So a complex exponential signal is a <strong>rotating phasor</strong>.<ul><li><span class="math inline">\(\omega_0 &gt; 0\)</span>: rotating counterclockwise,</li><li><span class="math inline">\(\omega_0 &lt; 0\)</span>: rotating clockwise.</li></ul></li></ul></li><li><p>Applying the inverse Euler's formula, the real cosine signal with radian frequency <span class="math inline">\(\omega_0\)</span> is composed of two conjugated complex exponential signals with frequencies of <span class="math inline">\(\omega_0\)</span> and <span class="math inline">\(-\omega_0\)</span>, and also complex amplitudes of <span class="math inline">\(\frac{1}{2}Ae^{j\phi}\)</span> and <span class="math inline">\(-\frac{1}{2}Ae^{j\phi}\)</span>, respectively. <span class="math display">\[x(t) = A\cos(\omega_0t+\phi) = \frac{1}{2}\bar{x}(t) + \frac{1}{2}\bar{x}^*(t) = \Re{\{\bar{x}(t)\}}\]</span></p></li><li>Phasor Addition (additions of sinusoids with the same frequency but different amplitudes and phases)<ul><li>Phasor addition rule: <em>The summation of sinusoids with the same frequency is a sinusoid with the identical frequency with the amplitude and phase of a certain phasor calculated by the summation of the phasors of each sinusoid.</em></li><li>Summation of phasors is also a phasor: <span class="math display">\[\begin{equation}  \sum_{k=1}^N A_ke^{j\phi_k} = Ae^{j\phi}  \end{equation} \label{phasor_sum}\]</span></li><li>Finally, lead us to: <span class="math display">\[\sum_{k=1}^N A_k\cos(\omega_0t + \phi_k) = A\cos(\omega_0t + \phi)\]</span> which could be proved either by<ul><li>trigonometric identities, or</li><li>summation of phasors following the steps:<ol type="1"><li>Get the phasors <span class="math inline">\(X_k = A_ke^{j\phi_k}\)</span> of each individual cosine signals,</li><li>Add phasors using Eq. <span class="math inline">\(\eqref{phasor_sum}\)</span>, employing polar-to-Cartesian-to-polar conversion,</li><li>Multiply the resulting phasor <span class="math inline">\(X=Ae^{j\phi}\)</span> with the rotating function <span class="math inline">\(e^{j\omega_0t}\)</span> and get <span class="math inline">\(\bar{x}(t)\)</span>,</li><li>Take the real part and get <span class="math inline">\(x(t) = \bar{x}(t)\)</span>.</li></ol></li></ul></li></ul></li></ul><h3 id="review-of-sine-and-cosine-functions">Review of sine and cosine functions</h3><h4 id="properties">Properties</h4><ul><li>Equivalence: <span class="math inline">\(\sin\theta = \cos(\theta-\pi/2)\)</span> or <span class="math inline">\(\cos\theta=\sin(\theta+\pi/2)\)</span>; <strong>the sine function is just a cosine function that is shifted to the right by <span class="math inline">\(\pi/2\)</span></strong>,</li><li>Periodicity: <span class="math inline">\(\cos(\theta + 2\pi k) = \cos\theta\)</span>, where <span class="math inline">\(k\in \mathbb{Z}\)</span>,</li><li>Evenness of cosine: <span class="math inline">\(\cos(-\theta) = \cos\theta\)</span>,</li><li>Oddness of sine: <span class="math inline">\(\sin(-\theta) = -\sin\theta\)</span>,</li><li>Zeros of sine: <span class="math inline">\(\sin(\pi k) = 0\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Ones of sine: <span class="math inline">\(\cos(2\pi k) = 1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,</li><li>Minus ones of cosine: <span class="math inline">\(\cos[2\pi(k+\dfrac{1}{2})]=-1\)</span>, for <span class="math inline">\(k\in\mathbb{Z}\)</span>,x</li><li>Derivatives: <span class="math inline">\(\dfrac{d \sin\theta}{d \theta} = \cos\theta\)</span> and <span class="math inline">\(\dfrac{d \cos\theta}{d \theta} = -\sin\theta\)</span>.</li></ul><h4 id="trigonometric-identities">Trigonometric identities</h4><ul><li><span class="math inline">\(\sin^2\theta + \cos^2\theta = 1\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \cos^2\theta - \sin^2\theta\)</span>,</li><li><span class="math inline">\(\sin^2\theta = 2\sin\theta\cos\theta\)</span>,</li><li><span class="math inline">\(\sin(\alpha\pm\beta) = \sin\alpha\cos\beta \pm \cos\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos(\alpha\pm\beta) = \cos\alpha\cos\beta \mp \sin\alpha\sin\beta\)</span>,</li><li><span class="math inline">\(\cos^2\theta = \frac{1}{2}(1+\cos 2\theta)\)</span>,</li><li><span class="math inline">\(\sin^2\theta = \frac{1}{2}(1-\cos 2\theta)\)</span>.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sinusoids, or sinusoidal signals, representing the cosine or sine signals/waves, are the most basic signals in the theory of signals and systems. This chapter introduces the basic sinusoid concepts and operations.&lt;/p&gt;
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="DSP First" scheme="http://swang251.github.io/tags/DSP-First/"/>
    
  </entry>
  
  <entry>
    <title>DSP First - Appendix A - Complex Numbers</title>
    <link href="http://swang251.github.io/2018/12/18/DSPFirst-AppendixA/"/>
    <id>http://swang251.github.io/2018/12/18/DSPFirst-AppendixA/</id>
    <published>2018-12-19T03:18:05.000Z</published>
    <updated>2018-12-30T01:12:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>In this appendix, the basic manipulations of complex numbers are reviewed. There ideas are treated:<ul><li>simple algebraic rules: operations on <span class="math inline">\(z = x+jy\)</span>.</li><li>elimination of trigonometry: Euler's formula for the complex exponential <span class="math inline">\(z = re^{j\theta}=r\cos\theta+jr\sin\theta\)</span>.</li><li>representation by vectors: a way for visualization.</li></ul></li><li>Symbol: <span class="math inline">\(i\)</span> or <span class="math inline">\(j\)</span><ul><li>Physicists and mathematicians use symbol <span class="math inline">\(i=\sqrt{-1}\)</span>.</li><li>Electrical engineers use symbol <span class="math inline">\(j=\sqrt{-1}\)</span> instead because <span class="math inline">\(i\)</span> is left to the current.</li></ul></li><li>Algebraic vs. Trigonometric vs. Geometric.</li></ul><h3 id="a.1-introduction">A.1 Introduction</h3><ul><li>The way <span class="math inline">\(j\)</span> is introduced: <span class="math inline">\(z^2=-1\)</span> ==&gt; <span class="math inline">\(z=\pm j\)</span>.</li><li>More general, complex numbers are the roots of quadratic equations.</li></ul><h3 id="a.2-notation-for-complex-numbers">A.2 Notation for complex numbers</h3><ul><li>There are two types complex number representations:<ul><li>Rectangular form (Cartesian form): <span class="math inline">\(z = (x, y) = x + jy = \Re \{ z \} + j\Im\{z\}\)</span>, where <span class="math inline">\(\Re\{\}\)</span> and <span class="math inline">\(\Im\{\}\)</span> represent the real and imaginary parts of the complex number, respectively.</li><li>Polar form: <span class="math inline">\(z \leftrightarrow r\angle\theta\)</span> where <span class="math inline">\(r\)</span> is the amplitude and <span class="math inline">\(\angle\theta\)</span> is the angle whose principal value belongs to <span class="math inline">\(-180^{\circ}&lt;\theta &lt; 180^{\circ}\)</span></li><li>Conversion:<ul><li>polar --&gt; rectangular: <span class="math inline">\(z=x + jy\)</span>, where <span class="math display">\[\begin{equation}      \begin{cases}      x = r\cos\theta,\\      y = r\sin\theta      \end{cases} \end{equation}   \label{eq1}\]</span></li><li>rectangular --&gt; polar: <span class="math inline">\(z = re^{j\theta}=|z|e^{j\, \text{arg}|z|}\)</span>, where <span class="math display">\[\begin{equation}      \begin{cases}      r = \sqrt{x^2+y^2},\\      \theta = \text{atan}(y, x)      \end{cases} \end{equation}   \label{eq2}\]</span></li></ul></li></ul></li></ul><h3 id="a.3-eulers-formula">A.3 Euler's formula</h3><ul><li>Euler's formula <span class="math display">\[ \begin{equation} e^{j\theta} = \cos{\theta} + j\sin\theta \end{equation}\label{Euler} \]</span></li><li>Inverse Euler fomulas <span class="math display">\[ \begin{align}    \cos\theta &amp;= \frac{e^{j\theta} + e^{-j\theta}}{2}\\    \sin\theta &amp;= \frac{e^{j\theta} - e^{-j\theta}}{2} \end{align}\]</span></li></ul><h3 id="a.4-algebraic-rules-for-complex-numbers">A.4 Algebraic rules for complex numbers</h3><h4 id="rectangular-form">Rectangular form</h4><p>For <span class="math inline">\(z_1 = x_1 + jy_1\)</span> and <span class="math inline">\(z_2 = x_2+jy_2\)</span>,</p><ul><li>addition and subtraction: <span class="math inline">\(z_1 \pm z_2 = (x_1 \pm x_2) + j(y_1 \pm y_2)\)</span>.</li><li>multiplication: <span class="math inline">\(z_1 z_2\)</span> = (x_1x_2-y_1y_2)+j(x_1y_2+x_2y_1)$</li><li>conjugate: <span class="math inline">\(z_1^* = x_1 - jy_1\)</span></li><li>division: <span class="math inline">\(\dfrac{z_1}{z_2} = \dfrac{z_1z_2^*}{z_2z_2^*} = \dfrac{z_1z_2^*}{|z_2|^2} = \dfrac{(x_1x_2+y_1y_2) + j(x_2y_1-x_1y_2)}{x_2^2+y_2^2}\)</span></li></ul><h4 id="polar-form">Polar form</h4><p>For <span class="math inline">\(z_1 = r_1e^{j\theta_1}\)</span> and <span class="math inline">\(z_2 = r_2e^{j\theta_2}\)</span>,</p><ul><li>multiplication: <span class="math inline">\(z_1z_2 = (r_1r_2)e^{j(\theta_1+theta_2)}\)</span></li><li>conjugate: <span class="math inline">\(z_1^* = r_1e^{-j\theta_1}\)</span></li><li>division: <span class="math inline">\(\dfrac{z_1}{z_2} = \dfrac{r_1}{r_2}e^{j(\theta_1-\theta_2)}\)</span></li><li>addition and subtraction: transfer to rectangular form and do the addition or subtraction, and then, transfer back to polar form.</li></ul><h4 id="others">others</h4><ul><li><span class="math inline">\(\Re\{z\} = \dfrac{z+z^*}{2}\)</span></li><li><span class="math inline">\(\Im\{z\} = \dfrac{z-z^*}{2j}\)</span></li><li><span class="math inline">\(|z|^2 = zz^*\)</span></li></ul><h3 id="a.5-geometric-views-off-complex-operations">A.5 Geometric views off complex operations</h3><p>A geometric view provides a convenient visualization for complex number operations.</p><h3 id="a.6-powers-and-roots">A.6 Powers and Roots</h3><ul><li><span class="math inline">\(z^N = (re^{j\theta})^N = r^Ne^{jN\theta}\)</span></li><li>De Moivre's formula: <span class="math inline">\((\cos\theta + j\sin\theta)^N = \cos N\theta + j\sin N\theta\)</span> (because <span class="math inline">\((e^{j\theta})^N = e^{jN\theta}\)</span>)</li><li>Roots of unity (<span class="math inline">\(z^N=1\)</span>): <span class="math inline">\(z=e^{j2\pi l/N}\)</span> for <span class="math inline">\(l=0,1,2\dots N-1\)</span></li><li><span class="math inline">\(z^N=c=|c|e^{j\phi}\)</span>: <span class="math inline">\(z=re^{j\theta}\)</span>, where <span class="math display">\[\begin{cases}r = |c|^{1/N},\\\theta = \dfrac{\phi+2\pi l}{N},\end{cases}\]</span> and <span class="math inline">\(\theta\)</span> is the angular spacing.</li></ul><!-- the famous matter-energy equation $\eqref{eq1}$ proposed by Einstein ...-->]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;In this appendix, the basic manipulations of complex numbers are reviewed. There ideas are treated:
&lt;ul&gt;
&lt;li&gt;simple algebraic rules
      
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="DSP First" scheme="http://swang251.github.io/tags/DSP-First/"/>
    
  </entry>
  
  <entry>
    <title>DSP First - Chapter 1 - Introduction</title>
    <link href="http://swang251.github.io/2018/12/17/DSPFirst-Ch1/"/>
    <id>http://swang251.github.io/2018/12/17/DSPFirst-Ch1/</id>
    <published>2018-12-17T23:12:37.000Z</published>
    <updated>2018-12-30T01:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Just got the TA position for the lecture <em>Digital Audio Signal Processing</em>. It is a class introducing the basic digital audio signal processing. Even so, I thought it better to prepare more for the lecture. So I decided to review the reference book <em>DSP FIRST - A multimedia Approach</em> during the break.</p><p>The contents in the book are well-structured and well-explained, and there is nothing tricky inside. All we need to do is to review and use it again and again to make it a solid in our mind. In the blogs, there is nothing else but a list of the key points presented in the book but hopefully, this could help me strengthen my understanding.</p><a id="more"></a><ul><li>This is a book about signals and systems.</li><li>A signal is something that carries information and the system is something that operates the signals.</li><li>In the other <a href="https://www.dspguide.com/ch5/1.htm" target="_blank" rel="noopener">book</a>: A signal is a description of how one parameter varies with another parameter. For instance, the voltage changing over time in an electronic circuit, or brightness varying with distance in an image. A system is any process that produces an output signal in response to an input signal.</li></ul><h4 id="mathematical-representation-of-signals">1.1 Mathematical representation of signals</h4><ul><li><span class="math inline">\(s(t)\)</span>: the continuous signal</li><li><span class="math inline">\(s[n] = s(nT_s)\)</span>: the discrete-time signal, where <span class="math inline">\(T_s\)</span> is the sampling period.</li><li>Same for the image: <span class="math inline">\(p(x,y) \rightarrow p(m\Delta x, n\Delta y) = p[m, n]\)</span></li></ul><h4 id="mathematical-representation-of-systems">1.2 Mathematical representation of systems</h4><ul><li>A system is something that transform signals into new signals or different signal representations: <span class="math inline">\(y(t) = \mathcal{T}\{x(t)\}\)</span> where the system is represented by the operation <span class="math inline">\(\mathcal{T}\{\}\)</span>.</li><li>block diagram: a way for the visualization to represent operations and to show the interrelations among the signals.</li></ul><blockquote><p>A block diagram is a diagram of a system in which the principal parts or functions are represented by blocks connected by lines that show the relationships of the blocks. (from <a href="https://en.wikipedia.org/wiki/Block_diagram" target="_blank" rel="noopener">wiki</a>)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Just got the TA position for the lecture &lt;em&gt;Digital Audio Signal Processing&lt;/em&gt;. It is a class introducing the basic digital audio signal processing. Even so, I thought it better to prepare more for the lecture. So I decided to review the reference book &lt;em&gt;DSP FIRST - A multimedia Approach&lt;/em&gt; during the break.&lt;/p&gt;
&lt;p&gt;The contents in the book are well-structured and well-explained, and there is nothing tricky inside. All we need to do is to review and use it again and again to make it a solid in our mind. In the blogs, there is nothing else but a list of the key points presented in the book but hopefully, this could help me strengthen my understanding.&lt;/p&gt;
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="DSP First" scheme="http://swang251.github.io/tags/DSP-First/"/>
    
  </entry>
  
  <entry>
    <title>Calculating Fluctuation in Paraview</title>
    <link href="http://swang251.github.io/2018/11/08/Calculating-Fluctuation-in-Paraview/"/>
    <id>http://swang251.github.io/2018/11/08/Calculating-Fluctuation-in-Paraview/</id>
    <published>2018-11-08T21:32:21.000Z</published>
    <updated>2018-11-08T22:44:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is to show the way to calculate variable (e.g. pressure) fluctuation in Paraview.</p><a id="more"></a><p>To calculate the <span class="math inline">\(\tilde{p} = p - \bar{p}\)</span> in Paraview, where <span class="math inline">\(\bar{p}\)</span> is the time average.</p><ul><li>Open the data (.vtk files) as object <code>p</code> and saying it contains the variable <code>pressure</code>.</li><li>Calculate the time average using the filter <em>Temporal Statistics</em> (Filters -&gt; Temporal -&gt; Temporal Statistices) and the output is the object <code>TemporalStatistics1</code>.</li><li>Selecte the <code>p</code> and the <code>TemporalStatistics1</code>, and apply the filter <em>Append Attributes</em>. The output is <code>AppendAttributes1</code>.</li><li>Use a <em>Calculator</em> to subtract pressure_average from pressure.</li></ul><figure><img src="/images/20181108/paraview_fluctuation.png" alt="Fig. 1 - The pipeline for calculating the fluctuation"><figcaption>Fig. 1 - The pipeline for calculating the fluctuation</figcaption></figure><h3 id="reference">Reference</h3><p>Paraview Forum Discussion: https://public.kitware.com/pipermail/paraview/2012-May/024845.html</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is to show the way to calculate variable (e.g. pressure) fluctuation in Paraview.&lt;/p&gt;
    
    </summary>
    
      <category term="Paraview" scheme="http://swang251.github.io/categories/Paraview/"/>
    
    
      <category term="Paraview" scheme="http://swang251.github.io/tags/Paraview/"/>
    
  </entry>
  
  <entry>
    <title>Reflection at Discontinuities</title>
    <link href="http://swang251.github.io/2018/10/21/Reflection-at-Discontinuities/"/>
    <id>http://swang251.github.io/2018/10/21/Reflection-at-Discontinuities/</id>
    <published>2018-10-22T03:58:25.000Z</published>
    <updated>2018-10-22T19:28:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>I got suddenly confused about how the reflection coefficient is computed, and it took me a whole night to figure out my mistake.</p><a id="more"></a><p>Consider such a case, when a wave is propagating, there is an abrupt discontinuity, which separates two different medium <span class="math inline">\(M1\)</span> and <span class="math inline">\(M2\)</span> to the left and right of the discontinuity point, respectively. The two medium has two different characteristic impedance <span class="math inline">\(Z_1\)</span> and <span class="math inline">\(Z_2\)</span>. (It could also be the same media with different cross-section areas in a tube).</p><p>The pressure in <span class="math inline">\(M1\)</span> is decomposed into a right-going wave <span class="math inline">\(p_1^+\)</span> and a left-going wave <span class="math inline">\(p_1^-\)</span>, which correspond to incident and reflection, respectively. So the right- and left-going volume flow rate are <span class="math inline">\(\dfrac{p_1^+}{Z_1}\)</span> and <span class="math inline">\(-\dfrac{p_1^-}{Z_1}\)</span>. (the &quot;<span class="math inline">\(-\)</span>&quot; sign means the left-going traveling direction)</p><p>Assuming the continuity of the pressure and the conservation of the volume flow at the boundary, we have: <span class="math display">\[p_1^+ + p_1^- = p_2^+ + p_2^-  \quad\quad (1)\]</span> and <span class="math display">\[\dfrac{p_1^+ - p_1^-}{Z_1} = \dfrac{p_2^+ - p_2^-}{Z_2}\quad\quad (2)\]</span></p><p><strong>From here the problem comes.</strong> I try to compute the reflection coefficient from the above two equations, but of course, I can't get anything. <strong>This is because</strong> the reflection coefficient is not related to <span class="math inline">\(Z\_2\)</span>. Instead, it relates to the load impedance <span class="math inline">\(Z\_{load}\)</span>, e.g., the input impedance of the system to the right of the discontinuity point. So we will replace the eq. (1) and (2) by <span class="math display">\[p\_1^+ + p\_1^- = p\_2   \quad\quad (3)\]</span> and <span class="math display">\[\dfrac{p_1^+ - p\_1^-}{Z_1} = \dfrac{p\_2}{Z\_{load}} \quad\quad (4)\]</span>. This way, we get the reflection coefficient <span class="math display">\[R = \dfrac{Z_{load}-Z\_1}{Z\_{load}+Z\_1} \quad\quad(5)\]</span></p><p><strong>Wait!</strong> But why I always see the reflection coefficient with two different characteristic impedances? <strong>The answer is,</strong> to calculate the reflection coefficient based on characteristic impedance, it is assumed that <span class="math inline">\(p_2^-=0\)</span>, indicating an infinite length of <span class="math inline">\(M2\)</span> with no reflection or right-going wave. This way the input impedance of <span class="math inline">\(M2\)</span> is simply its characteristic impedance <span class="math inline">\(Z\_2\)</span>. Then we get <span class="math display">\[R = \dfrac{Z\_2-Z\_1}{Z\_2+Z\_1} \quad\quad(6)\]</span></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I got suddenly confused about how the reflection coefficient is computed, and it took me a whole night to figure out my mistake.&lt;/p&gt;
    
    </summary>
    
      <category term="Acoustics" scheme="http://swang251.github.io/categories/Acoustics/"/>
    
    
      <category term="Acoustics" scheme="http://swang251.github.io/tags/Acoustics/"/>
    
  </entry>
  
  <entry>
    <title>Descriptor and External Field of Palabos</title>
    <link href="http://swang251.github.io/2018/10/15/Palabos-Descriptor-External-Field/"/>
    <id>http://swang251.github.io/2018/10/15/Palabos-Descriptor-External-Field/</id>
    <published>2018-10-15T19:29:31.000Z</published>
    <updated>2018-10-15T21:03:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>For the lattice Boltzmann method, the descriptor has to be defined in advance. Here we briefly discuss the descriptor structure in Palabos.</p><a id="more"></a><h2 id="descriptor">Descriptor</h2><p>In palabos, the descriptors are stored in <code>/src/latticeBoltzmann/nearestNeighborLatticesXD.h</code>, where <span class="math inline">\(X=2,3\)</span>.</p><p>Each descriptor is a <strong>combination</strong> of the lattice schema and the external field, so that must inherit from at least two <em><code>DescriptorBase</code></em> including the basic <em><code>DdQqDescriptorBase</code></em> defining the lattice-related variables, and a <em><code>EXTERNALVARLISTDescriptorBase</code></em> with external variables or <code>NoExternalFieldBase</code> if the problem involves no external variables. (<em><code>DdQqDescriptorBase</code></em> could be <code>D2Q9DescriptorBase</code>, and <em><code>EXTERNALVARLISTDescriptorBase</code></em> could be <code>RhoBarVelocityPiNeqOmegaDescriptorBase2D</code>).</p><ul><li><p>In <em><code>DdQqDescriptorBase</code></em>, it defines the <code>d</code>, the <code>q</code>, the lattice velocity <code>c[q][d]</code>, lattice weight <code>t[q]</code>, square speed of sound <code>cs2</code> and so on by means of <code>DdQqConstants</code>.</p></li><li><p>The <em><code>EXTERNALVARLISTDescriptorBaseXD</code></em> is written in <code>/src/latticeBoltzmann/externalFields.h</code>. In <em><code>EXTERNALVARLISTDescriptorBaseXD</code></em>, it defines the problem-specific <code>ExternalField</code> as <code>EXTERNALVARLISTDescriptorXD</code>. Here the <code>DdQq</code> of <code>EXTERNALVARLISTDdQqDescriptor</code> must correspond to the one in <code>DdQqDescriptorBase</code>. Here above <code>EXTERNALVARLIST-</code> represents the name list of the external variables, e.g., <code>EXTERNALVARLIST=RhoBarVelocityPiNeqOmega</code> and <code>EXTERNALVARLIST=ForcedRhoBarJ</code> for <code>RhoBarVelocityPiNeqOmegaD2Q9Descriptor</code> and <code>ForcedRhoBarJD2Q9Descriptor</code>, respectively.</p></li></ul><h2 id="example">Example</h2><ul><li>Take the <code>RhoBarVelocityPiNeqOmegaD2Q9Descriptor</code> as an example to illustrate the structure, it inherits from <code>D2Q9DescriptorBase</code> and <code>RhoBarVelocityPiNeqOmegaDescriptorBase2D</code>. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; struct RhoBarVelocityPiNeqOmegaD2Q9Descriptor</span><br><span class="line">   : public D2Q9DescriptorBase&lt;T&gt;, </span><br><span class="line">     public RhoBarVelocityPiNeqOmegaDescriptorBase2D</span><br><span class="line">&#123;</span><br><span class="line">    static const char name[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="ddqqdescriptorbase">DdQqDescriptorBase</h3><ul><li><p>The <code>D2Q9DescriptorBase</code> is defined as <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; struct D2Q9DescriptorBase</span><br><span class="line">    : public D2Q9Constants&lt;T&gt;, public DefaultRoundOffPolicy&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line">    typedef D2Q9DescriptorBase&lt;T&gt; BaseDescriptor;</span><br><span class="line">    enum &#123; numPop=D2Q9Constants&lt;T&gt;::q &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li><li><p>where the lattce-related variables are defined in <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">template &lt;typename T&gt; struct D2Q9Constants</span><br><span class="line">&#123;</span><br><span class="line">    enum &#123; d = 2, q = 9 &#125;;        ///&lt; number of dimensions/distr. functions</span><br><span class="line">    static const T invD;          ///&lt; 1 / (number of dimensions)</span><br><span class="line">    static const int vicinity;    ///&lt; size of neighborhood</span><br><span class="line">    static const int c[q][d];     ///&lt; lattice directions</span><br><span class="line">    static const int cNormSqr[q]; ///&lt; norm-square of the vector c</span><br><span class="line">    static const T t[q];          ///&lt; lattice weights</span><br><span class="line">    static const T cs2;           ///&lt; lattice constant cs2 (in BGK, this is the square-speed-of-sound)</span><br><span class="line">    static const T invCs2;        ///&lt; 1 / cs2</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p></li></ul><h3 id="externalvarlistdescriptorbasexd">EXTERNALVARLISTDescriptorBaseXD</h3><ul><li><p>The <code>RhoBarVelocityPiNeqOmegaDescriptorBase2D</code> has a component <code>ExternalField</code> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">struct RhoBarVelocityPiNeqOmegaDescriptorBase2D &#123;</span><br><span class="line">    typedef RhoBarVelocityPiNeqOmegaDescriptor2D ExternalField;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li><li>and the <code>RhoBarVelocityPiNeqOmegaDescriptor2D</code> would store</li><li>the number of scalars,</li><li>the number of the species,</li><li>the index each variable starts,</li><li><p>the size of each variable (2 for 2d and 3 for 3d tensors), <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">struct RhoBarVelocityPiNeqOmegaDescriptor2D &#123;</span><br><span class="line">    static const int numScalars       = 7;</span><br><span class="line">    static const int numSpecies       = 4;</span><br><span class="line">    static const int rhoBarBeginsAt   = 0;</span><br><span class="line">    static const int sizeOfRhoBar     = 1;</span><br><span class="line">    static const int velocityBeginsAt = 1; </span><br><span class="line">    static const int sizeOfVelocity   = 2;</span><br><span class="line">    static const int piNeqBeginsAt    = 3;</span><br><span class="line">    static const int sizeOfPiNeq      = 3;</span><br><span class="line">    static const int omegaBeginsAt    = 6;</span><br><span class="line">    static const int sizeOfOmega      = 1;</span><br><span class="line">    static const int sizeOfForce      = 0;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></li><li><p>meaning <code>ForcedRhoBarJdescriptor3DRhoBarVelocityPiNeqOmegaDescriptor2D</code> have 4 species including <code>rhoBar</code>, <code>velocity</code>, <code>piNeq</code> and <code>omega</code>, with 1, 2, 3 and 1 as the sizes, respectively. So the scalar number would be <span class="math inline">\(1+2+3+1=7\)</span> in total.</p></li></ul><h2 id="setting-up-the-external-field">Setting up the external field</h2><p>Once the descriptor with an external field is defined, the memory of <code>external</code> inside the <code>cell</code> is allocated (see <code>src/core/cell.h</code>). For initializing or simply setting values to the external field, one would use the data processor, i.e., <code>setExternalVector</code> or <code>setExternalScalar</code> with the variable start index like <code>DESCRIPTOR&lt;T&gt;::ExternalField::rhoBarBeginsAt</code>.</p><ul><li><p>An example of external force flow would be found in the project <code>/examples/showCases/womersley/</code>. Where the external forces is set by an array, i.e., the force is uniformally deployed in the domain. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Array&lt;T,NSDESCRIPTOR&lt;T&gt;::d&gt; force(womersleyForce((T)0, amplitude, frequency, parameters),0.);</span><br><span class="line">setExternalVector(lattice,lattice.getBoundingBox(),NSDESCRIPTOR&lt;T&gt;::ExternalField::forceBeginsAt,force);</span><br></pre></td></tr></table></figure></p></li><li><p>For position-dependent external variables, one could use a <code>MultiScalarFieldXD</code> or <code>MultiTensorFieldXD</code>, initialized from a functional, as the input of <code>setExternalVector</code> or <code>setExternalScalar</code> and use a functional to initialize the <code>MultiXXXXFieldXD</code>. For the setup of the absorbing layers, I use <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MultiScalarField2D&lt;T&gt; sigma(lattice);</span><br><span class="line">WaveAbsorptionSigmaFunction2D&lt;T&gt; sigmaFunction2D(lattice.getBoundingBox(), numSpongeCells ,bulkValue);</span><br><span class="line">setToFunction(sigma, lattice.getBoundingBox(), sigmaFunction2D);</span><br><span class="line">setExternalScalar(lattice, lattice.getBoundingBox(),</span><br><span class="line">                      DESCRIPTOR&lt;T&gt;::ExternalField::sigmaBeginsAt, sigma );</span><br></pre></td></tr></table></figure></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For the lattice Boltzmann method, the descriptor has to be defined in advance. Here we briefly discuss the descriptor structure in Palabos.&lt;/p&gt;
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
  </entry>
  
  <entry>
    <title>3D Printing and Musical Instruments</title>
    <link href="http://swang251.github.io/2018/10/06/3D-Printer/"/>
    <id>http://swang251.github.io/2018/10/06/3D-Printer/</id>
    <published>2018-10-06T21:29:47.000Z</published>
    <updated>2018-10-15T19:27:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>3D printing is becoming more and more popular in a variety of areas and there are already many application in musical instruments. Here I will briefly talks about the main techniques and some of my preliminary attemps in printing a mouthpiece.</p><a id="more"></a><h2 id="d-printing-techniques">3D Printing Techniques</h2><p>This article deserves reading, <a href="https://all3dp.com/1/types-of-3d-printers-3d-printing-technology/" target="_blank" rel="noopener">All 10 Types of 3D Printing Technology in 2018 - All3DP</a>, inside which it classify the 3D printing techniques into, <em>material extrusion</em>, <em>vat polymerization</em>, <em>material jetting</em>, <em>binder jetting</em>, and <em>powder bed fusion (polymers or metals)</em>.</p><h3 id="fused-deposition-modeling-fdm---material-extrusion">Fused Deposition Modeling (FDM) - Material Extrusion</h3><p>The model is built layer by layer by the deposited materials which is melt through a nozzle in the extrusion head. The model is normally built from the bottom to the top.</p><h3 id="stereolithography-apparatus-sla---vat-polymerization">Stereolithography Apparatus (SLA) - Vat Polymerization</h3><p>SLA is the earliest commercialized 3D printing technique. The 3D model is fabricated layer by layer from the liquid resin which is selectively solidified or polymerized by the ultraviolet (UV) rays through the lenses and the mirror. The object is normally built from the top to the bottom. A good introductory guide is provided by <a href="https://formlabs.com/blog/ultimate-guide-to-stereolithography-sla-3d-printing/" target="_blank" rel="noopener">Formlab</a>.</p><h3 id="selective-laser-sintering-sls---power-bed-fusion">Selective Laser Sintering (SLS) - Power Bed Fusion</h3><p>SLS is similar to SLA. A thin layer of material powder is dispersed on the platform and preheated to the temperature just below the melting point. The the laser as the power source is used to sinter the materials (nylon or polymers). A good introductory guide is provided by <a href="https://formlabs.com/blog/what-is-selective-laser-sintering/#origins-sls" target="_blank" rel="noopener">Formlab</a>.</p><h3 id="polyjet---material-jetting">PolyJet - Material Jetting</h3><p>PolyJet provide a faster and more accurate 3D printing compared with the techniques mentioned above. The print head deposits hundreds of tiny liquid droplets of the UV curable materials on the platform and the UV light attached to the print head simultaniously cures/solidifies the materials. A brief introduction could be found the <a href="http://www.stratasys.com/polyjet-technology" target="_blank" rel="noopener">Stratsys website</a> or the <a href="https://youtu.be/Som3CddHfZE" target="_blank" rel="noopener">introduction video</a> provided by Solid Concepts.</p><h3 id="comparisons-between-them">Comparisons between them</h3><ul><li><a href="https://www.cadimensions.com/blog/sla-vs-polyjet-need-know/" target="_blank" rel="noopener">SLA vs. PolyJet</a></li><li><a href="https://pinshape.com/blog/fdm-vs-sla-how-does-3d-printer-tech-work/" target="_blank" rel="noopener">FDM vs. SLA</a></li><li><a href="https://all3dp.com/fdm-vs-sla/" target="_blank" rel="noopener">FDM vs. SLA</a></li></ul><h2 id="d-printed-musical-instruments---the-real-functional-instruments-instead-of-the-ones-just-for-fun">3D Printed Musical Instruments - the real functional instruments instead of the ones just for fun</h2><h3 id="strings">Strings</h3><p>Two of the 3D printed violins are <a href="https://www.3d-varius.com/" target="_blank" rel="noopener">3Dvarius</a>, the first electronic 3D printed violin inspired by Stradivarius and made by SLA, and <a href="http://www.hovalabs.com/hova-instruments/hovalin" target="_blank" rel="noopener">HOVALIN</a>, an open source 3D printable acoustic violin made by FDM.</p><h3 id="brass-instruments">Brass instruments</h3><p><a href="http://jeromewiss.com/en/" target="_blank" rel="noopener">Jerome Wiss</a> use 3D printing for the prototype of his brass instruments.</p><h3 id="saxophone-mouthpiece">Saxophone Mouthpiece</h3><p>It is tested by Lorenzoni et al. (2013) that PolyJet is the best technique for 3D printing a mouthpiece. <a href="https://www.syos.co/en/" target="_blank" rel="noopener">SYOS</a> is using FDM for making customized mouthpiece.</p><p>Personnaly, I have tried both FDM (Ultimaker 2+/3)and SLA (Form2) in 3D printing a saxophone mouthpiece. SLA provides a better resolution with an easier operation while you have to play with hundreds of parameters to print an acceptable mouthpiece by FDM. Such parameters might include:</p><ul><li>Resolution</li><li>Nozzle sizes</li><li>Layer thickness</li><li>Line width</li><li>Infilling</li><li>Ironing</li></ul><h2 id="ref.">Ref.</h2><ul><li><a href="https://www.syos.co/en/blog/lab/3-d-printing-musical-instruments" target="_blank" rel="noopener">3D printing: future of the music instrument making? - Syos Blog</a></li><li><a href="https://www.3dnatives.com/en/top-15-3d-printing-music210620174/" target="_blank" rel="noopener">TOP 15 3D Printed Music Instruments &amp; Music Applications</a></li><li><a href="http://www.3ddayin.net/fuwu/3Ddayinbaike/23932.html" target="_blank" rel="noopener">常见三种3D打印技术：FDM、SLS、SLA技术原理</a></li><li><a href="http://www.cnpowdertech.com/2017/kejifazhan_0327/20974.html" target="_blank" rel="noopener">20张动图秒懂SLA、CLIP、3DP、PolyJet和FDM 3D打印原理</a></li><li><a href="https://www.quora.com/How-does-a-Form2-3D-printer-compare-to-an-Ultimaker2+-What-is-the-failure-rate-and-how-much-maintenance-is-needed" target="_blank" rel="noopener">How does a Form2 3D printer compare to an Ultimaker2+? What is the failure rate and how much maintenance is needed?-Quora</a></li><li>Lorenzoni, Valerio, E. L. Doubrovski, and J. C. Verlinden. 2013. “Embracing the Digital in Instrument Making: Towards a Musician-Tailored Mouthpiece by 3D Printing.” In Proceedings of the Stockholm Music Acoustics Conference 2013, SMAC 2013, Stockholm (Sweden), 30 July-3 August, 2013.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;3D printing is becoming more and more popular in a variety of areas and there are already many application in musical instruments. Here I will briefly talks about the main techniques and some of my preliminary attemps in printing a mouthpiece.&lt;/p&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/tags/Research-Daily/"/>
    
      <category term="CAML" scheme="http://swang251.github.io/tags/CAML/"/>
    
  </entry>
  
  <entry>
    <title>SSH connection to a Cluster</title>
    <link href="http://swang251.github.io/2018/10/04/Passwordless-SSH-connection-to-a-Cluster/"/>
    <id>http://swang251.github.io/2018/10/04/Passwordless-SSH-connection-to-a-Cluster/</id>
    <published>2018-10-04T19:10:09.000Z</published>
    <updated>2018-11-10T16:14:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>I am using the cluster <a href="https://docs.computecanada.ca/wiki/Graham" target="_blank" rel="noopener">GRAHAM</a> for our simulation, and it uses SSH (Secure Shell) to connect to the remote servers. It is found annoying to type the password everytime you try to log in or copy files from the server. Herewith several simple commands, we could domake the password-less connection (for MacOS only).</p><a id="more"></a><ol type="1"><li><code>cd ~/.ssh/</code>, enter the folder where the ssh keys are kept.</li><li><code>ssh-keygen -t rsa</code>, create a new ssh key pair. You would be asked to <code>Enter file in which to save the key:</code> and I use <code>graham</code> here.</li><li><code>ssh-add -K graham</code>, add the ssh private key to the ssh-agent to store the passphrase the keychain.</li><li><code>cat graham.pub &gt;&gt; authorized_keys</code>, write the public key into the file authorized_keys.</li><li><code>ssh-copy-id -i graham.pub USER@graham.computecanada.ca</code>, <code>ssh-copy-id</code> is to use locally available keys to authorize logins on a remote machine. The authorized_keys is copied to the cluster.</li><li>Add the following lines to <em>~/.ssh/config</em> to avoid <code>ssh-add</code> everytime after restart. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Host graham.computecanada.ca</span><br><span class="line">  HostName graham.computecanada.ca</span><br><span class="line">  User Username</span><br><span class="line">  PreferredAuthentications publickey</span><br><span class="line">  IdentityFile ~/.ssh/graham</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  AddKeysToAgent yes</span><br></pre></td></tr></table></figure></li></ol><p><strong>Done!</strong></p><p>PS: add <code>alias graham='ssh -y USER@graham.comoputecanada.ca'</code> into <code>~./bash_profile</code> for convenience</p><h3 id="userful-links">Userful links</h3><ul><li><a href="https://www.ssh.com/ssh/key/" target="_blank" rel="noopener">SSH Key</a></li><li><a href="https://www.msri.org/realvideo/ln/msri/usered/ssh/bernstein/1/7.html" target="_blank" rel="noopener">SSH Files</a></li><li><a href="https://help.github.com/articles/connecting-to-github-with-ssh/" target="_blank" rel="noopener">Github Help</a></li><li><a href="https://docs.computecanada.ca/wiki/SSH" target="_blank" rel="noopener">Compute Canada Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I am using the cluster &lt;a href=&quot;https://docs.computecanada.ca/wiki/Graham&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GRAHAM&lt;/a&gt; for our simulation, and it uses SSH (Secure Shell) to connect to the remote servers. It is found annoying to type the password everytime you try to log in or copy files from the server. Herewith several simple commands, we could domake the password-less connection (for MacOS only).&lt;/p&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/tags/Research-Daily/"/>
    
      <category term="CAML" scheme="http://swang251.github.io/tags/CAML/"/>
    
      <category term="HPC" scheme="http://swang251.github.io/tags/HPC/"/>
    
  </entry>
  
</feed>

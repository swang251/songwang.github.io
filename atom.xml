<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swang251.github.io/"/>
  <updated>2019-02-15T20:50:06.588Z</updated>
  <id>http://swang251.github.io/</id>
  
  <author>
    <name>Song Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 6 (Notes)</title>
    <link href="http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/"/>
    <id>http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/</id>
    <published>2019-02-13T00:33:47.000Z</published>
    <updated>2019-02-15T20:50:06.588Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 6. <a id="more"></a></p><h3 id="inverse-system">Inverse System</h3><ul><li><span class="math inline">\(y=\mathcal{T}\{x\}\)</span> and <span class="math inline">\(x = \mathcal{T_i}\{y\}\)</span>, where <span class="math inline">\(\mathcal{TT_i} = \mathcal{T_iT} = \mathbf{I}\)</span></li><li><span class="math inline">\(h*h_i = h_i*h = \delta\)</span></li><li><strong>E.g.</strong>, michrophone with a flare that is a high-pass system, needs an inverse system to get rid of the HP effect.</li><li><strong>E.g.</strong>, <span class="math inline">\(h[n]=u[n]\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(h_i[n]=\delta[n]-delta[n-1]\)</span>, where <span class="math inline">\(h*h_i = \delta\)</span></li><li>Infinite impulse response <span class="math inline">\(\longleftrightarrow\)</span> finite impulse response, where the stability needs to be checked when inversion is from finite IR to infinite IR.</li></ul><h3 id="notable-notes">Notable notes</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 6.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 5 (Notes)</title>
    <link href="http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/"/>
    <id>http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/</id>
    <published>2019-02-05T23:00:52.000Z</published>
    <updated>2019-02-15T15:30:48.706Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 5. <a id="more"></a></p><h3 id="convolution-and-multiplication">Convolution and multiplication</h3><ul><li><span class="math inline">\(Z(f)=X(f)Y(f)\leftrightarrow z=x*y\)</span></li><li><span class="math inline">\(Z(f)=X(f)*Y(f)\leftrightarrow z=xy\)</span></li><li>Application in Source-Filter model</li></ul><h3 id="parsevals-theorem"><a href="https://en.wikipedia.org/wiki/Parseval%27s_theorem" target="_blank" rel="noopener">Parseval's theorem</a></h3><p><span class="math display">\[\sum\limits_{n=-\infty}^\infty x^2[n]= \dfrac{1}{2\pi}\int_{-\pi}^{\pi}|X(e^{j\hat{\omega}})|^2\text{d}\hat{\omega}=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f,\]</span> where the <span class="math inline">\(|X(f)|^2\)</span> is called the power spectral <strong>density</strong> which is with respect to frequency.</p><ul><li>To prove:<ul><li>Given signal and its DTFT <span class="math inline">\(x\leftrightarrow X\)</span></li><li>For the time reversed version of <span class="math inline">\(x\)</span>, <span class="math inline">\(y[n] = x[-n] \leftrightarrow Y(f)=\overline{X}(f)\)</span></li><li>For signal <span class="math inline">\(z\)</span> whose DTFT is defined as <span class="math inline">\(Z(f)=X(f)Y(f) = X(f)\overline{X}(f)\)</span>. <span class="math inline">\(z=x*y\)</span></li><li>In time domain: <span class="math inline">\(z[n]=\sum\limits_{k\in\mathbb{Z}}x[k]y[n-k] = \sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span>, where <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span> is the <a href="https://en.wikipedia.org/wiki/Autocorrelation" target="_blank" rel="noopener">autocorrelation</a>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\sum_\limits{k\in\mathbb{Z}}x^2[k]\label{Parseval1}\end{equation}\]</span>.</li><li>Taking the inverse DTFT: <span class="math inline">\(z[n] = \int_{-\frac{1}{2}}^{\frac{1}{2}}Z(f)e^{2\pi jfn}\text{d}f = \int_{-\tfrac{1}{2}}^{\tfrac{1}{2}}X(f)Y(f)e^{2\pi jfn}\text{d}f\)</span>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f\label{Parseval2}\end{equation}\]</span>.</li><li>Eq. <span class="math inline">\(\eqref{Parseval1}\)</span> = Eq. <span class="math inline">\(\eqref{Parseval2}\)</span>.</li></ul></li></ul><h3 id="symmetry-properties-of-signal-and-related-spectral-properties.">Symmetry properties of signal and related spectral properties.</h3><ul><li>Even: <span class="math inline">\(x_e[n]=x_e[-n]\)</span></li><li>Odd: <span class="math inline">\(x_o[n]=-x_o[-n]\)</span></li><li>properties:<ul><li><span class="math inline">\(x_e\bot x_o\)</span>, (<span class="math inline">\(\sum x[n]y[n]=0\)</span>, dot product equals zero)</li><li><span class="math inline">\(\text{odd}\times\text{even} = \text{even}\)</span></li></ul></li><li>For any signal, it could be decomposed as into an even signal and an odd signal, meaning, <span class="math inline">\(x[n] = x_e[n]+x_o[n]\)</span>, where <span class="math inline">\(x_e[n] = \frac{x[n]+x[-n]}{2}\)</span> and <span class="math inline">\(x_o[n] = \frac{x[n]-x[-n]}{2}\)</span></li><li>Apply it into Fourier transform <span class="math display">\[ \begin{align}    X(f) &amp;= \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]+x_o[n])(\cos 2\pi fn - j \sin2\pi fn)\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]\cos2\pi fn - jx_o[n]\sin2\pi fn),\\ \end{align}\]</span> where <strong>the <span class="math inline">\(\Re{\{X(f)\}}\)</span> is even and the <span class="math inline">\(\Im{\{X(f)\}}\)</span> is odd. </strong><ul><li>So a real spectrum means the even signal and a pure imaginary spectrum corresponds to a odd signal.</li></ul></li></ul><h3 id="frequency-shift-and-modulation">Frequency shift and modulation</h3><ul><li><span class="math inline">\(z=xp_{f_0}\)</span> (<span class="math inline">\(z[n]=x[n]e^{2\pi jf_0n}\)</span>)</li><li>Its Fourier transform: <span class="math inline">\(Z(f) = X*P_{f_0}=X(f-f_0)\)</span>, where <span class="math inline">\(P_{f_0}(f)=\delta(f-f_0)=\delta_{f_0}(f)\)</span></li><li><strong>Periodic in one domain</strong> means <strong>evenly spaced in the other domain</strong>.</li><li><a href="https://en.wikipedia.org/wiki/Dirac_comb" target="_blank" rel="noopener">Dirac comb</a></li></ul><h3 id="derivative-of-a-spectrum">Derivative of a Spectrum</h3><ul><li><span class="math display">\[\begin{align}    \dfrac{\text{d} X(f)}{\text{d} f}        &amp;= \frac{\text{d} \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}}{\text{d} f}\\       &amp;= -2\pi j \sum\limits_{n\in\mathbb{Z}}nx[n]e^{-2\pi jfn}\end{align}\]</span></li><li>Application: <strong>gain</strong><ul><li><span class="math inline">\(x[n] \rightarrow y[n] = g[n]x[n]\)</span>, where <span class="math inline">\(g[n] = a+bn\)</span> is a gain, linearly evolves over time.</li><li><span class="math inline">\(y[n]=ax[n]+b(nx[n])\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y(f) = aX(f)+\frac{bj}{2\pi}\frac{\text{d} X(f)}{\text{d}f}\)</span>.</li><li><strong>gain in time</strong> <span class="math inline">\(\leftrightarrow\)</span> <strong>derivative in spectrum</strong></li><li><strong>Further explanation?</strong></li></ul></li></ul><h3 id="time-scaling">Time scaling</h3><ul><li><span class="math inline">\(y(t)=x(\alpha t)\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y = \frac{1}{\alpha}X(\frac{f}{\alpha})\)</span></li></ul><h3 id="discrete-time-system">Discrete-time system</h3><ul><li>A system: <span class="math inline">\(y=\mathcal{T}\{x\}\)</span> or <span class="math inline">\(y[n] = \mathcal{T}\{x\}[n]\)</span></li><li>Like delay (<span class="math inline">\(y[n]=x[n-n_0]\)</span>), square (<span class="math inline">\(y[n]=x^2[n]\)</span>), moving max, threshold and so on.</li><li><strong>Distortion - Chebyshev polynomials?</strong></li><li><strong>Noise reduction need distortion?</strong></li></ul><h4 id="classes">classes</h4><ul><li>memoryless: only the current time (no past, no future samples);</li><li>linear: additivity and scalability</li><li>time invariance: the system propcessing doesn't depends on when you apply it (<span class="math inline">\(y[n-{n_0}]=\mathcal{T}\{x[n-{n_0}]\}\)</span>)</li><li>Stability: <span class="math inline">\(\lVert x\rVert &lt; B_x\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(\lVert y\rVert &lt; B_y\)</span>.<ul><li>delay: stable</li><li>amplifier: stable</li><li>accumulator: dependsf</li></ul></li></ul><h3 id="linear-time-invariant-system-leftrightarrow-filter">Linear Time-Invariant system <span class="math inline">\(\leftrightarrow\)</span> filter</h3><ul><li>A filter is a LTI system.</li><li><span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span> <span class="math display">\[\begin{align}  y[n] &amp;= \mathcal{T}\{x\}[n] \\       &amp;= \mathcal{T}\{\sum\limits_{k\in\mathbb{Z}}x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\mathcal{T}\{x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\{x[k]\mathcal{T}\{\delta_k[n]\}\} \quad \text{applying linearities}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}x[k]h_k[n],  \end{align}\]</span> where <span class="math inline">\(h_k=\mathcal{T}\{\delta_k\}\)</span> is the <strong>impulse reponse</strong>.</li><li><span class="math inline">\(y=x*h\)</span></li><li><span class="math inline">\(Y=XH\)</span>, where <span class="math inline">\(H\)</span> is the Fourier transform of <span class="math inline">\(h\)</span> and is the frequency response.</li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix#Discrete_convolution" target="_blank" rel="noopener">Toeplitz matrix and convolution</a></li><li>For convoluion: <span class="math inline">\(N_y = N_x+N_h-1\)</span></li><li>Properties:<ul><li>Stability: depends on <span class="math inline">\(h\)</span>, meaning the bound of <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}|h[n-k]|\)</span></li><li>causality: <span class="math inline">\(h[n-k]=0\)</span> for <span class="math inline">\(k\leq n\)</span>.</li><li>memoryless: <span class="math inline">\(h[k]=0\)</span> when <span class="math inline">\(k\neq 0\)</span></li></ul></li></ul><h3 id="notable-notes">Notable notes</h3><ul><li>Energy: the accumulated version of the power <span class="math inline">\(x^2[n]\)</span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 5.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Simulation Routine, and Code/Result Management across Laptop and Cluster</title>
    <link href="http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/"/>
    <id>http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/</id>
    <published>2019-01-30T10:41:19.000Z</published>
    <updated>2019-05-31T20:33:58.636Z</updated>
    
    <content type="html"><![CDATA[<p>For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster <a href="https://docs.computecanada.ca/wiki/Graham" target="_blank" rel="noopener">GRAHAM</a> of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.</p><a id="more"></a><h3 id="softwaretool-list">Software/Tool List</h3><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> (version control)</li><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> (remote repository storage)</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a> (Git GUI)</li><li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> (cross-platform building software)</li><li><a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a> (C++ IDE)</li><li><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> (Text editor for code editing on the cluster)</li><li><a href="https://slurm.schedmd.com/overview.html" target="_blank" rel="noopener">Slurm</a> (job scheduler used by Compute Canada clusters)</li><li><a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a> (file transfer)</li><li><a href="https://www.paraview.org/" target="_blank" rel="noopener">Paraview</a> (result visualization)</li></ul><h3 id="login-and-version-control">Login and Version Control</h3><ul><li>For convenience, I make an alias of the ssh connection called <code>graham</code>. Details could be check in my <a href="https://swang251.github.io/2018/10/04/Passwordless-SSH-connection-to-a-Cluster/">previous blog</a>.</li><li>I am using <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> and <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> for version control.</li></ul><h3 id="file-structure">File Structure</h3><ul><li>For the LBM simulation, I got my projects stored in the folder <em>lbm</em> and the Palabos library in <em>palabos</em>, make sure they are in the same directory level.</li><li>Each project is named as the case short name + dimension. For example, I have <em>aeolianToneCylinder2D</em> and <em>ductRadiation2DAxisymmetric</em>.</li><li>In each project, the file structure is shown below. It includes<ul><li><em>main.cpp</em>: the main c++ file,</li><li><em>CMakeLists.txt</em>: the CMake configuration file,</li><li><em>./laptop-cmake-build-debug/</em>: the workspace folder for the laptop, including the<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file,</li></ul></li><li><em>./cluster-cmake-build-debug/</em>: the workspace folder for the cluster,<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file ,</li><li>.sh file for submitting batch jobs,</li></ul></li><li><em>./Analysis/</em>: the folder for the simulation results and the analysis scripts.<ul><li>.m matlab script</li><li>.vtk for visualization</li><li>.dat for simulaiton <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aeolianToneCylinder2D</span><br><span class="line">+-- main.cpp</span><br><span class="line">+-- CMakeLists.txt</span><br><span class="line">+-- laptop-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">+-- cluster-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">|   +-- aeolianToneCylinder2D.sh</span><br><span class="line">+-- Analysis</span><br><span class="line">|   +-- *.m</span><br><span class="line">|   +-- ResultFolders</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="build-and-compilation">Build and Compilation</h3><ul><li>I am using <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> for cross-platform project building (MacOS for my laptop and Linux on the cluster).</li><li>Each platform owns its own workspace folder, i.e., <em>./laptop-cmake-build-debug</em> for the laptop and <em>./cluster-cmake-build-debug</em> for the cluster.</li><li>The project on the laptop is built and debugged through CLion which is straight forward.</li><li>On the cluster end, go to the folder <em>./cluster-cmake-build-debug</em> and use the command <code>cmake ../</code> to build the project. Then, use <code>make</code> to compile everything.</li><li>Sometimes, we need to manually load cmake module. Use <code>module avail cmake</code> to check the available cmake version and use, e.g., <code>module load cmake/3.12.3</code> to load the new cmake version.</li></ul><h3 id="running-jobs">Running Jobs</h3><ul><li><p>For each project, there will be a corresponding batch file <em>**.sh</em>. For example <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#SBATCH --account=def-SUPERVISOR</span><br><span class="line">#SBATCH --time=01:00:00</span><br><span class="line">#SBATCH --ntasks=64</span><br><span class="line">#SBATCH --mem-per-cpu=128M</span><br><span class="line">#SBATCH --job-name=JOBNAME</span><br><span class="line">#SBATCH --output=%x-%j-np64.out</span><br><span class="line">#SBATCH --mail-user=EMAILADDRESS</span><br><span class="line">#SBATCH --mail-type=BEGIN</span><br><span class="line">#SBATCH --mail-type=END</span><br><span class="line">#SBATCH --mail-type=FAIL </span><br><span class="line"></span><br><span class="line">mpirun -np 64 ./projectName ./projectName.xml</span><br></pre></td></tr></table></figure></p><ul><li><code>--mail</code> provides the option for notification at different stage of the simulation which is quite useful.</li></ul></li><li><p>make sure everything is included</p><ul><li>output directory created (or automatically created)</li><li>program parameters</li><li>have the modified code compiled (<code>make</code>)</li></ul></li><li><p>submit the job: <code>sbatch ./projectName.sh</code></p><ul><li>you will see <em>Submitted batch job 11315557</em></li></ul></li><li><p>job status: <code>squeue -u $USER</code></p><ul><li>you will see <em>JOBID USER ACCOUNT NAME ST START_TIME TIME_LEFT NODES CPUS GRES MIN_MEM NODELIST (REASON)</em></li></ul></li><li><p>cancel job: <code>scancel JobID</code></p></li><li><p>check the efficiency of the job: <code>seff JobID</code></p></li><li><p>The information of the submitted job, including the output, would be written in the <em>.out</em> files.</p></li></ul><h3 id="file-transfer">File transfer</h3><ul><li>File transfer is normally done by <a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a>, details can be found <a href="https://docs.computecanada.ca/wiki/Globus" target="_blank" rel="noopener">here</a></li></ul><h3 id="cpu-based-paraview-client-server-visualization">CPU-based ParaView client-server visualization</h3><p>For large data processing, it will be more convenient to handle it on the cluster end, making use of ParaView cliend-server mechanisms.</p><ul><li>check the <a href="https://docs.computecanada.ca/wiki/Visualization#CPU-based_ParaView_client-server_visualization_on_general_purpose_clusters" target="_blank" rel="noopener">Compute Canada Documentation Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster &lt;a href=&quot;https://docs.computecanada.ca/wiki/Graham&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GRAHAM&lt;/a&gt; of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.&lt;/p&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/tags/Research-Daily/"/>
    
      <category term="HPC" scheme="http://swang251.github.io/tags/HPC/"/>
    
      <category term="CAML" scheme="http://swang251.github.io/tags/CAML/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 4 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/"/>
    <id>http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/</id>
    <published>2019-01-29T22:38:43.000Z</published>
    <updated>2019-02-02T04:26:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 4.</p><p>NOTA: All <span class="math inline">\(f\)</span> in this blog refers to the normalized frequency. <a id="more"></a></p><h3 id="different-representation">Different representation</h3><h4 id="time-domain-representation">Time-domain representation</h4><ul><li><span class="math inline">\(\delta_k\)</span>: the feature of time, representing time 'k';</li><li><span class="math inline">\(x = \sum\limits_{k\in\mathbb{Z}} x[k]\delta_k\)</span> or <span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span></li></ul><h4 id="frequency-domain-representation-spectrum">Frequency-domain representation (spectrum)</h4><ul><li><span class="math inline">\(p_f[n] = e^{2\pi jfn}\)</span>: the feature of frequency, and be used to represent <span class="math inline">\(x[n]\)</span> in terms of frequency <span class="math inline">\(f\)</span>.</li><li><span class="math inline">\(x[n]\)</span> is a linear combination of <span class="math inline">\(p_f[n]\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(x[n] = \int X(f)p_f[n]\text{d}f\)</span>, where <span class="math inline">\(X(f)\)</span> is the Fourier representation.</li></ul><h3 id="heuristic-description-of-fourier-transform">Heuristic description of Fourier Transform</h3><h4 id="for-xn-aejtheta">For <span class="math inline">\(x[n] = ae^{j\theta}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{f_0}[n] = ae^{j(2\pi f_0n+\theta)}\)</span><ul><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\cos(2\pi f_0n+\theta) = a\cos\theta\delta(f_0)\)</span>,</li><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\sin(2\pi f_0n+\theta) = a\sin\theta\delta(f_0)\)</span>,</li><li>so <span class="math display">\[\begin{equation} \sum\limits_{n\in\mathbb{Z}} ae^{j\theta}p_{f_0}n = ae^{j\theta}\delta(f_0),\end{equation}\label{distribution}\]</span> where <span class="math inline">\(\delta(f_0)\)</span> is a distribution function</li></ul></li></ul><h4 id="for-xn-aejthetae2pi-f_0n">For <span class="math inline">\(x[n] = ae^{j\theta}e^{2\pi f_0n}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{-f}[n] = ae^{j\theta}e^{2\pi j(f_0-f)n}\)</span><ul><li>Looking for a modulated frquency <span class="math inline">\(f_{modulated} = f_0-f\)</span>.</li><li>So we have, <span class="math display">\[\begin{equation}\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n] = ae^{j\theta}\delta(f_0-f),\end{equation}\]</span> meaning there is a contribution of <span class="math inline">\(x[n]\)</span> only when <span class="math inline">\(f_0 = f\)</span>.</li></ul></li><li>Go for, <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n]\)</span> = <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]\overline{p_f[n]} = \mathbf{x}\cdot\mathbf{p_f} = \mathbf{p_f}^H\cdot\mathbf{x}\)</span>, assuming <span class="math inline">\(\mathbf{x}\)</span> is a real vector (signal).<ul><li>Meaning <strong>projecting signal <span class="math inline">\(\mathbf{x}\)</span> onto the coordinate <span class="math inline">\(\mathbf{p_f}\)</span></strong>,</li><li>where it first does the modulation (<span class="math inline">\(e^{-2\pi jfn}\)</span>) and then the summation (<span class="math inline">\(\sum\)</span>)</li><li>Properties of the Euclidean Inner Product: <span class="math inline">\(\mathbf{u}\cdot\mathbf{v} = \overline{\mathbf{v}\cdot\mathbf{u}}\)</span></li></ul></li><li><strong>Fourier transform and inverse Fourier transform</strong><ul><li><span class="math inline">\(X(f)=\sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>: the "-" sign comes from the conjugate of <span class="math inline">\(\mathbf{p_f}\)</span> during the dot products</li><li><span class="math inline">\(x[n]=\int X(f)e^{+2\pi jfn}\text{d}f\)</span>: the "+" sign because these is the linear combination of $</li></ul></li></ul><h3 id="more-about-fourier-transform">More about Fourier Transform</h3><ul><li>Fourier Transform: <span class="math inline">\(X(f) = \int x(t)e^{-2\pi jFt}\text{d}t\)</span>.</li><li>Discrete-time Fourier Transform: <span class="math inline">\(X(f) = \sum\limits_{n\in \mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>.</li><li>The frequency is real and continuous.</li><li><span class="math inline">\(X(f) \in \mathbb{C}\)</span> is periodic and complex.</li><li>Though it is easy to prove, but <strong>why does sampling make signal periodic in frequency domain?</strong><ul><li><span class="math inline">\(X(f) = X(f+1)\)</span></li></ul></li><li>Convergence: <span class="math inline">\(|X(f)|\)</span>. (<a href="https://en.wikipedia.org/wiki/Norm_(mathematics)" target="_blank" rel="noopener">norm</a>)</li></ul><h3 id="examples">Examples</h3><table><colgroup><col style="width: 42%"><col style="width: 57%"></colgroup><thead><tr class="header"><th style="text-align: center;">Time-domain <span class="math inline">\(x[n]\)</span></th><th style="text-align: center;">Frequency-domain <span class="math inline">\(X(f)\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Impulse: <span class="math inline">\(\delta[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr class="even"><td style="text-align: center;">Damped exponential: <span class="math inline">\(a^n u[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(\dfrac{1}{1-ae^{-2\pi jf}}\)</span></td></tr><tr class="odd"><td style="text-align: center;">Rectangular function: <span class="math inline">\(r_N[n]=u[n]-u[n-N]\)</span></td><td style="text-align: center;"><span class="math inline">\(e^{-\pi jf(N-1)}\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span></td></tr></tbody></table><ul><li><strong>NOTA:</strong> For the rectangular function, the <span class="math inline">\(\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span> in the <span class="math inline">\(X(f)\)</span> is not the sinc function. Instead, <span class="math inline">\(\dfrac{\sin(\pi f)}{\pi f} = \text{sinc}(\pi f)\)</span>, the sinc function, which is non-periodic, is the Fourier transform of the rectangular function instead of its DTFT. The sampling makes the <span class="math inline">\(X(f)\)</span> periodic in frequency domain as shown in the table.</li></ul><h3 id="theorems">Theorems</h3><ul><li>periodic in <span class="math inline">\(f\)</span></li><li>linear</li><li>time-shift (delay): <span class="math inline">\(y[n] = x[n-d] \rightarrow Y(f) = X(f)e^{-2\pi jfd}\)</span></li><li>frequency-shift: <span class="math inline">\(y[n] = x[n]e^{2\pi jf_0n} \rightarrow Y(f) = X(f-f_0)\)</span></li><li>time-reverse: <span class="math inline">\(y[n] = x[-n] \rightarrow Y(f)=X(-f)\)</span></li><li>Frequency multiplication means time convolution and vice versa.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 4.&lt;/p&gt;
&lt;p&gt;NOTA: All &lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt; in this blog refers to the normalized frequency.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing-Lecture 3 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/"/>
    <id>http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/</id>
    <published>2019-01-22T22:15:58.000Z</published>
    <updated>2019-02-13T20:01:28.298Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 3. <a id="more"></a></p><ul><li>From now on, the hat, <span class="math inline">\(\hat{}\)</span>, represents the normalized version.</li></ul><h3 id="notable-notes">Notable Notes</h3><ul><li>von Coler et al. 2018, Parametric Synthesis of Glissando Note Transitions - A User Study in a Real-Time Application, DAFx-18.</li><li>signal: a mathematical function that carries information, could be pressure, control parameters and so on.</li><li>Lagrange polynomial used in spatial sampling, non-integer delay as an interpolating filter.</li><li>A delay system is a system.</li><li>ADSR is a synthesizer.</li><li><span class="math inline">\(s[n] = \sum\limits_{k\in \mathbb{Z}}s[k]\delta[n-k]\)</span></li><li><strong>Dirac delta function</strong><ul><li>There are many ways to define Dirac delta function, see <a href="http://mathworld.wolfram.com/DeltaFunction.html" target="_blank" rel="noopener">Wolfram MathWorld</a></li><li>See more <a href="http://tutorial.math.lamar.edu/Classes/DE/DiracDeltaFunction.aspx" target="_blank" rel="noopener">here</a></li><li>integral, kind of dot product.</li></ul></li><li><strong>Block by Block (buffer)</strong> in applications equals <strong>vectorization</strong></li><li><strong>Sampling</strong> makes the spectrum periodic<ul><li>For two frequency, <span class="math inline">\(\hat{f_0}\)</span> and <span class="math inline">\(\hat{f_0}+r\)</span><ul><li>Discrete-time domain: <span class="math inline">\(\cos(2\pi\hat{f_0}n) = \cos(2\pi(\hat{f_0}+r)n)\)</span>, because <span class="math inline">\(2\pi r n\)</span> is an integer multiple of <span class="math inline">\(2\pi\)</span>, so it is periodic inthe frequency domain.</li><li>Continuous-time domain: <span class="math inline">\(\cos(2\pi f_0 t) \neq \cos(2\pi (f_0+rf_0)t)\)</span></li></ul></li><li>From <span class="math inline">\(x(t)=x(t+T_0)\)</span> to <span class="math inline">\(x[n] = x[n+N_0]\)</span>, it only works when $N_0 = k $ and <span class="math inline">\(k=0,1,\dots, N_0\)</span></li></ul></li><li>impulse (time-domain) <span class="math inline">\(\rightarrow\)</span> 1 (frequency-domain) <span class="math inline">\(\rightarrow\)</span> alias filter (works as a bandlimited filter) <span class="math inline">\(\rightarrow\)</span> rectangular (frequency-domain) <span class="math inline">\(\rightarrow\)</span> ADC <span class="math inline">\(\rightarrow\)</span> sinc function (time-domain)</li><li>The basis of Fourier transform is simply rotating vectors in the 2D plane (<span class="math inline">\(e^{2\pi j\hat{f_0}n}\)</span>)</li></ul><h3 id="discrete-time-sequences">Discrete-time sequences</h3><h4 id="impulse">Impulse</h4><p><span class="math display">\[\begin{equation}  \delta[n] =     \begin{cases}      1, \quad n=0,\\      0, \quad n\neq0    \end{cases}  \end{equation}\]</span></p><ul><li>Delayed impulse: <span class="math inline">\(\delta_{n_0}[n]=\delta[n-n_0]\)</span></li><li>Impulse response</li></ul><h4 id="unit-step-sequence">Unit step sequence</h4><p><span class="math display">\[\begin{equation}  u[n] =     \begin{cases}      1, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(u[n]=u[n-1]+\delta[n]=\sum\limits_{k=0}^\infty\delta[n-k]\)</span></li><li>works as a switch (control)</li><li>used to check the stability</li></ul><h4 id="rectangular-sequence">Rectangular sequence</h4><p><span class="math display">\[\begin{equation}r[n]=u[n]-u[n-N],\end{equation}\]</span> where <span class="math inline">\(N\)</span> is the length of the rectangular</p><ul><li><span class="math inline">\(r[n] = \delta[n]\)</span> when <span class="math inline">\(N=1\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math display">\[\delta[n]=u[n]-u[n-1],\]</span> which is also explained as a finite-difference scheme, representing the slope the signal is we divide both sides by the sampling time $ T_s$</li><li>used to design waveforms like a square wave (a linear combination of rectangular sequence)</li></ul><h4 id="damped-exponentials">Damped Exponentials</h4><p><span class="math display">\[\begin{equation}  x[n] =     \begin{cases}      Aa^n, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(0&lt;a&lt;1\)</span>, damped signal, <span class="math inline">\(-1&lt;a&lt;0\)</span>, damped osillating signal.</li><li><a href="https://en.wikipedia.org/wiki/RC_circuit" target="_blank" rel="noopener"><strong>RC circuit</strong></a> and <a href="https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter" target="_blank" rel="noopener">RC filter</a>, working as a low pass filter, check <a href="https://www.electronics-tutorials.ws/filter/filter_2.html" target="_blank" rel="noopener">here</a>.</li><li>The frequency response of <span class="math inline">\(a^nu[n]\)</span> is <span class="math inline">\(\dfrac{1}{1-ae^{-j\hat{\omega}}}\)</span>, where <span class="math inline">\(\hat{\omega}\)</span> is the normalized radian frequency.</li><li>recursive</li></ul><h4 id="sinusoids-sequence">Sinusoids sequence</h4><p><span class="math display">\[\begin{equation}x[n] = A_0\cos(2\pi \hat{f_0}n+\phi_0),\end{equation}\]</span> where <span class="math inline">\(\hat{f_0}\)</span> is the normalized frequency and <span class="math inline">\(\phi_0\)</span> is the initial phase.</p><ul><li>recursive computaion of <span class="math inline">\(sin\)</span> functions</li></ul><h4 id="complex-exponential-sequence">Complex exponential sequence</h4><p><span class="math display">\[P_{f_0}[n]=e^{2\pi j \hat{f_0}n}\]</span> and <span class="math display">\[z[n] = A_0e^{j\phi_0}e^{j2\pi\hat{f_0}n}=z[n-1]e^{2\pi j \hat{f_0}},\]</span> where the phasor <span class="math inline">\(\hat{A}=Ae^{j\phi_0}\)</span> is the complex amplitude.</p><h4 id="damped-sinusoids">Damped sinusoids</h4><p><span class="math display">\[x[n] = A_0e^{-\alpha n}\cos(2\pi\hat{f_0}n+\phi_0)\]</span> and <span class="math display">\[z[n] = \hat{A_0}e^{-\alpha+2\pi j\hat{f_0}n},\]</span> where <span class="math inline">\(e^{-\alpha}\)</span> represents the damping.</p><h3 id="the-link-between-phase-shift-and-time-delay">The link between phase shift and time delay</h3><p>Comparing: <span class="math display">\[x(t) \rightarrow x(t-d)\]</span> and <span class="math display">\[sin(2\pi f_0t+\phi_0) \rightarrow sin(2\pi f_0 (t-d)+\phi_0),\]</span> where the phase shift <span class="math inline">\(-2\pi f_0 d\)</span> is frequency dependent.</p><h3 id="others">Others</h3><h4 id="spatial-wave">spatial wave</h4><p><span class="math display">\[p(t,r) = A_0\cos(2\pi f_0(t-\frac{r}{c}))\]</span> - the link between the spatial domain and the phase domain - wavenumber is the spatial frequency of the wave <span class="math inline">\(k = \dfrac{2\pi f_0}{c}=\dfrac{2\pi}{\lambda}\)</span> (radians or circle per unit distance), BTW, <strong>wavenumber is not dimensionless</strong> but Helmholtz number <span class="math inline">\(ka\)</span> is. - Compared to frequency <span class="math inline">\(\omega = \dfrac{2\pi}{T}\)</span>, where <span class="math inline">\(T\)</span> and <span class="math inline">\(\lambda\)</span> are the length of the period in time and space, respectively.</p><h4 id="phasor">Phasor</h4><ul><li>phasor <span class="math inline">\(\leftrightarrow\)</span> vector</li></ul><h4 id="linear-chirp">Linear chirp</h4><p><span class="math display">\[\phi[n] = \phi_0 + 2\pi(\hat{f_0}+\frac{\beta(n+1)}{2})n\]</span> instead of simply <span class="math inline">\(\phi[n] = \phi_0+2\pi f[n]n\)</span>, where <span class="math inline">\(f[n] = \hat{f_0}+\beta n\)</span></p><ul><li>this is to maintain the phase continuity.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 3.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 1 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/"/>
    <id>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/</id>
    <published>2019-01-16T01:13:15.000Z</published>
    <updated>2019-02-22T21:27:24.900Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 1. <a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 1.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing-Lecture 2 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/"/>
    <id>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/</id>
    <published>2019-01-16T00:15:03.000Z</published>
    <updated>2019-02-01T06:29:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 2. <a id="more"></a></p><h2 id="dot-product">Dot product</h2><ul><li><span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span></li><li>The <a href="https://en.wikipedia.org/wiki/Correlation_and_dependence#Definition" target="_blank" rel="noopener">correlation</a> is related to dot product, see <a href="https://qr.ae/TUnqvl" target="_blank" rel="noopener">here</a>.</li><li>norm (<span class="math inline">\(\left\lVert\mathbf{u}\right\rVert = D(\mathbf{u},\mathbf{u})=\sum_{i=1}^3u_i^2\)</span>) <span class="math inline">\(\rightarrow\)</span> dot product (<span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span>) <span class="math inline">\(\rightarrow\)</span> Energy <span class="math inline">\(\left\lVert\mathbf{u}\right\rVert ^2\)</span>.</li><li><span class="math inline">\(D(\mathbf{u},\mathbf{u}) = \mathbf{u}^\intercal \mathbf{u}\)</span></li><li>inner product</li><li>Signal in discrete time of lenght <span class="math inline">\(N\)</span> has a dimension of <span class="math inline">\(N\)</span>;</li><li><a href="https://en.wikipedia.org/wiki/Orthogonality" target="_blank" rel="noopener">Orthogonal</a> <span class="math inline">\(\mathbf{s_1}^\intercal \mathbf{s_2} = 0\)</span>, meaning, nonzeros in <span class="math inline">\(\mathbf{s_1}\)</span> correspond to zeros in <span class="math inline">\(\mathbf{s_2}\)</span> <span class="math inline">\(\rightarrow\)</span> <strong>Frequency does not overlap ??</strong></li></ul><h2 id="matrix">Matrix</h2><ul><li>A matrix is a system.</li><li><a href="https://en.wikipedia.org/wiki/Hadamard_matrix" target="_blank" rel="noopener"><strong>Hadamard matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> <a href="https://en.wikipedia.org/wiki/Hadamard_transform" target="_blank" rel="noopener">Hadamard Transform</a> is an example of a generalized class of Fourier transform.</li><li><a href="https://en.wikipedia.org/wiki/Rotation_matrix" target="_blank" rel="noopener"><strong>Rotation matrix</strong></a></li><li>In Matlab, <code>u.*v</code> equals <code>diag(u)*v</code>, where <code>diag(u)</code> is the <strong>temporal envelope</strong>.</li><li>In Matlab, <span class="math inline">\(B^{-1}C=\)</span><code>B\C</code> and <span class="math inline">\(B/C^{-1}=\)</span><code>B/C</code>.</li><li>The relationship between <strong>the deconvolution and the inverse of a matrix</strong></li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix" target="_blank" rel="noopener"><strong>Toeplitz matrix</strong></a> and its "upside down" version - <a href="https://en.wikipedia.org/wiki/Hankel_matrix" target="_blank" rel="noopener"><strong>Hankel matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> filter correlation <span class="math inline">\(\rightarrow\)</span> <strong>Transmission line matrix (Waveguide)</strong></li><li><a href="https://en.wikipedia.org/wiki/Vandermonde_matrix" target="_blank" rel="noopener"><strong>VanderMonde matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> damped sin wave (inversion) $nose cancellation</li><li>Matrices might not be inversable just like one might not recover the original signal from its projection onto one axis.</li><li><span class="math inline">\((\mathbf{ABC})^\intercal = \mathbf{C}^\intercal\mathbf{B}^\intercal\mathbf{A}^\intercal\)</span></li><li><a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors" target="_blank" rel="noopener">Eigenvector <span class="math inline">\(\mathbf{v}\)</span> and eigenvalues <span class="math inline">\(\lambda\)</span></a>. "Eigen" origins from German for "proper".<ul><li><span class="math inline">\(T(\mathbf{v})=\lambda\mathbf{v}\)</span>: <span class="math inline">\(T\)</span> is a linear transform and <span class="math inline">\(\mathbf{v}\)</span> and <span class="math inline">\(\lambda\)</span> are its eigenvector and eigenvalue.</li><li><a href="https://en.wikipedia.org/wiki/Spectrum_of_a_matrix" target="_blank" rel="noopener">The spectrum of a matrix is the set of its eigenvalues</a> and each eigenvector represents one frequency or one dimension/direction. Check <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix" target="_blank" rel="noopener"><strong>Eigendecomposition of a matrix</strong></a>.</li></ul></li></ul><h2 id="functions-and-polynomials">Functions and Polynomials</h2><ul><li>Linear (gain or interpolation), exponential (the feedback loop) and polynomial functions (spline interpolation, harmonic distortion or representing any functions)</li><li>Chebyshev Polynomial and distortion</li><li>Roots of polynomials <span class="math inline">\(p_n(x_i) = 0\)</span><ul><li><code>roots</code> (order limits)</li><li><span class="math inline">\(p_n(x) = (x-x_1)p_{n-1}(x) = a_n\prod_{i=1}^n(x-x_i)\)</span> <strong>??</strong></li></ul></li></ul><h2 id="rational">Rational</h2><ul><li><span class="math inline">\(f(x) = \frac{Q}{P}\)</span></li><li>Filter frequency response is a rational function (for most of cases), e.g., an exception, viscosity loss of pipe <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(\sqrt{f}\)</span> <span class="math inline">\(\rightarrow\)</span> irrational function</li></ul><h2 id="complex-numbers">Complex numbers</h2><h3 id="imaginary">Imaginary</h3><ul><li>Matlab considers a number to be complex (<span class="math inline">\(\mathbb{C}\)</span>)<br></li><li>Complex number is defined because it does not exist in <span class="math inline">\(\mathbb{R}\)</span> or is just not defined before?</li><li><span class="math inline">\(j, -1, -j, 1\)</span> for <span class="math inline">\(j^n\)</span>, where <span class="math inline">\(n=1,2,3,4\)</span>.</li><li>Imaginary, a good word, but <a href="https://www.math.toronto.edu/mathnet/answers/imaginary.html" target="_blank" rel="noopener">imaginary is not real imaginary</a></li></ul><h3 id="phase-and-angle">Phase and angle</h3><ul><li><code>atan2</code>, "2" because it accepts two arguments and <code>angle</code> in Matlab uses <code>atan2</code></li><li>phase in(de)crease infinitely but how?</li></ul><h3 id="conjuage">Conjuage</h3><ul><li><a href="http://www.oed.com/view/Entry/39266?rskey=5nAP9w&amp;result=1&amp;isAdvanced=false#eid" target="_blank" rel="noopener">conjugate</a> meaning the opposite angle</li><li>real coefficients of polynomial <span class="math inline">\(\rightarrow\)</span> roots must be grouped by pairs</li><li>Euler's formula<span class="math inline">\(\rightarrow\)</span></li><li><span class="math inline">\(e^{j\theta} = \cos\theta+j\sin\theta\)</span> where <span class="math inline">\(e^{j\theta}\)</span> is the <a href="https://en.wikipedia.org/wiki/Analytic_signal" target="_blank" rel="noopener">analytic signal</a>, the analytic representation of the real-value function (<a href="https://en.wikipedia.org/wiki/Analytic_continuation" target="_blank" rel="noopener">analytic continuation</a>)</li><li>Transfer complex to real after passing a linear system is true but it is not true for a nonliear processing. <strong>WHY?</strong></li></ul><h3 id="unity-circle">Unity Circle</h3><ul><li>For root of unity <span class="math inline">\(z^N=1\)</span>, there are <span class="math inline">\(N\)</span> Nth root because it is an Nth-order polynomial <span class="math inline">\(1-z^N=0\)</span>.</li><li>Reciprocal of <span class="math inline">\(z\)</span> <span class="math inline">\(\rightarrow\)</span> unit circle (in(out)side) <span class="math inline">\(\rightarrow\)</span> stability ((un)stable)</li><li>polynomial<ul><li><a href="https://en.wikipedia.org/wiki/Complex_conjugate_root_theorem" target="_blank" rel="noopener">Complex conjugate root theorem</a>: real coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate pairs.</li><li>symmetrical coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate inverse pairs</li><li>when, <span class="math inline">\(|z|=1\)</span>, <span class="math inline">\(z^*=\dfrac{1}{z}\)</span>, roots are pairs of both inverse and conjugate, and are on unit circle.</li></ul></li><li><span class="math inline">\(D(u,v)=\overline{D(v,u)}\)</span></li><li><span class="math inline">\(D(u,v) = \sum_{i=1}^{N}\bar{u}_iv_i=u^{*T}v = u^Hv\)</span>, <span class="math inline">\(H\)</span> means transposed and conjugated <span class="math inline">\(\rightarrow\)</span> <code>u'</code> in Matlab</li><li><code>u.'</code> only does the transpose</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 2.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Sync your blogs across different OSs in Hexo</title>
    <link href="http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/"/>
    <id>http://swang251.github.io/2019/01/07/Sync-your-blog-across-different-OSs-in-Hexo/</id>
    <published>2019-01-07T06:13:04.000Z</published>
    <updated>2019-01-11T22:25:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is an article about how to synchronize blogs across your different operating systems. <a id="more"></a></p><p>It has been one year since I first set up Hexo and half a year since my first meaningful blog. I think it better to note down the steps I used to set up my GitHub Pages.</p><h2 id="github-pages-hexo-maupassant">GitHub Pages + Hexo + Maupassant</h2><h3 id="github-pages">GitHub Pages</h3><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository.</p></blockquote><ul><li>You would need to create a new repository named "username.github.io".</li></ul><h3 id="static-generator">Static Generator</h3><p>The static generator would help transform your plain text into static webpages. There are several choices, the most widely used of which are <a href="https://jekyllrb.com/" target="_blank" rel="noopener">Jekyll</a>, <a href="https://gohugo.io/" target="_blank" rel="noopener">Hugo</a> and <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a>. I didn't try everything. Instead, I try to read comparison articles online and find the one suit for me. I remember that one of the reasons that Hexo attracts me is its "Blazing Fast". &gt; <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> is a fast, simple and powerful blog framework. You write posts in Markdown (or other languages) and Hexo generates static files with a beautiful theme in seconds.</p><h3 id="theme">Theme</h3><p>You might need a theme for your blog and again, there are <a href="https://hexo.io/themes/" target="_blank" rel="noopener">hundreds of options</a>. Finally, I decide to go for <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> because it looks concise. &gt; <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a> - A simple Hexo template with great performance on different devices, ported from a Typecho theme by <a href="https://github.com/pagecho/maupassant" target="_blank" rel="noopener">Cho</a>, forked and modified from <a href="https://github.com/icylogic" target="_blank" rel="noopener">icylogic</a>.</p><h2 id="installation">Installation</h2><ul><li>The setup of Hexo is really simple. I just follow the <a href="https://hexo.io/docs/" target="_blank" rel="noopener">Hexo Documentation</a> and its done. This would include:<ul><li>Install <a href="https://hexo.io/docs/#Install-Git" target="_blank" rel="noopener">Git</a></li><li>Install <a href="https://hexo.io/docs/#Install-Node-js" target="_blank" rel="noopener">Node.js</a></li><li>Install <a href="https://hexo.io/docs/#Install-Hexo" target="_blank" rel="noopener">Hexo</a></li></ul></li></ul><h2 id="setup">Setup</h2><h3 id="hexo-setup">Hexo Setup</h3><ol type="1"><li>Go to the directory of the GitHub Page repository</li><li><code>hexo init</code>, initialization. Several folders and files would be generated.</li><li><code>npm install</code>, install packages based on <em>package.json</em> generated during <code>hexo init</code>, where <code>npm</code> is short for Node.js package manager. Actually, <code>npm install</code> should already be called during <code>hexo init</code>. (ref. <a href="https://hexo.io/docs/setup" target="_blank" rel="noopener">Hexo Setup</a>, <a href="https://docs.npmjs.com/cli/install.html" target="_blank" rel="noopener">npm-install</a>)</li><li>Follow the way of <a href="https://hexo.io/docs/deployment#Git" target="_blank" rel="noopener">deployment using Git</a>.</li></ol><h3 id="directory-structures">Directory Structures</h3><p>Several folders and files would be generated after <code>hexo init</code></p><ul><li><strong><a href="(https://hexo.io/docs/setup#config-yml)">_config.yml</a></strong>: site <a href="https://hexo.io/docs/configuration" target="_blank" rel="noopener">configuration</a> file, where one can configure most settings here</li><li><strong><a href="https://hexo.io/docs/setup#package-json" target="_blank" rel="noopener">package.json</a></strong> and <strong>package-lock.json</strong>: Application data, including the modules you need. The <strong>package-lock.json</strong> is automatically generated for any operations where npm modifies either the node_modules tree, or package.json. It describes the exact tree that was generated, such that subsequent installs are able to generate identical trees, regardless of intermediate dependency updates. (ref. <a href="https://docs.npmjs.com/files/package-lock.json" target="_blank" rel="noopener">npm-package-lock.json</a> and <a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">npm-package.json</a>).</li><li><strong>[node_modules]</strong>: the folder that local modules/packages of Node.js drop into. Its contents should correspond to <strong>package.json</strong> and is generated based on <code>npm install</code></li><li><strong><a href="https://hexo.io/docs/setup#scaffolds" target="_blank" rel="noopener">scaffolds</a></strong>: Seems like a folder for templates.</li><li><strong><a href="https://hexo.io/docs/setup#source" target="_blank" rel="noopener">source</a></strong>: the source folder including the original contents of the site, e.g., your Markdown files.</li><li><strong><a href="https://hexo.io/docs/setup#themes" target="_blank" rel="noopener">themes</a></strong>: the theme folders.</li><li><strong>db.json</strong>: no ideas about it, seems to be generated by <code>hexo generate</code> and is kind of cache which stores all posts, tags, categories, etc. in a JSON format for faster parsing. It would correspond to the generated sites.</li><li><strong>public</strong>: All the static webpage files generated by <code>hexo generate</code> and also the ones deployed to the git repository using <code>hexo-deployer-git</code>.</li><li><strong>.deploy_git</strong>, the folder for deployment of the static pages.</li></ul><h3 id="theme-setup">Theme Setup</h3><ul><li>Follow the installation of the theme <a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="noopener">Maupassant</a>.</li></ul><h3 id="git-the-whole-blogs-instead-of-the-only-the-static-websites">Git the whole blogs instead of the only the static websites</h3><p>You might have already noticed that using <code>hexo-deployer-git</code>, only the static websites would be git to the GitHub repository and you'll lose everything if your laptop dies without backup. Also, it is hard to synchronize across your multiple computers. So here is how to git everything including the original markdowns using two branches. The is based on this <a href="http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%23more" target="_blank" rel="noopener">article</a> which is 404 now. But you could still refer to his answer in <a href="https://www.zhihu.com/question/21193762/answer/79109280" target="_blank" rel="noopener">知乎</a></p><ol type="1"><li><p>Create the repository username.github.io</p></li><li><p>Add the following to .gitignore <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public/</span><br><span class="line">package-lock.json</span><br><span class="line">.deploy_git/</span><br><span class="line">db.json</span><br></pre></td></tr></table></figure></p></li><li><p>Create two branches: master and hexo.</p></li><li><p>Set hexo as the default branch.</p></li><li><p>clone the repository and set up based on the instruction above.</p></li><li><p>set the <code>deploy -&gt; branch</code> in **_config.yml** to master.</p></li></ol><p>This way, the static webpages generated and deployed by <code>hexo g -d</code> would be stored in the master branch which the original markdown files and the configuration would be in hexo branch using <code>git push origin hexo</code>.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is an article about how to synchronize blogs across your different operating systems.
    
    </summary>
    
      <category term="daily" scheme="http://swang251.github.io/categories/daily/"/>
    
    
      <category term="Hexo" scheme="http://swang251.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Adding a Shared Google Calendar to the Calendar App on the Mac</title>
    <link href="http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/"/>
    <id>http://swang251.github.io/2018/12/30/GoogleCalendarOnMac/</id>
    <published>2018-12-30T15:57:19.000Z</published>
    <updated>2018-12-30T17:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.</p><a id="more"></a><p>There are two methods:</p><h3 id="method-1">Method 1:</h3><ol type="1"><li>When you open the link of the calendar shared with you. You could click the plus sign at the right corner to add it into your own google calendar. <img src="/images/20181229/google_calendar_add.png"></li><li>Go to https://www.google.com/calendar/syncselect and check the calendar shared with you.</li><li>Go to the Mac Calendar and you will find it in your calendar list just under your google account. Check it for display.</li></ol><h3 id="method-2">Method 2:</h3><ol type="1"><li>As step 1 in Method 1.</li><li>Go to the Google Calendar and the shared calendar appears in the "Other calendars", go to the setting of the shared calendar.</li><li>Scroll down and find the "Integrate calendar-&gt;public address in iCal format" and copy the address.</li><li>Open the Mac Calendar and go to "Files -&gt; New Calendar Subscription" and paste the address into the "Calendar URL".</li></ol><p>PS: Also answered in <a href="https://apple.stackexchange.com/a/347044/222234}</p>" target="_blank" rel="noopener">StackExchange</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In addition to your own google calendar, which is easy to be added to your Mac Calendar, there might also be some Google calendars shared with you. It would be convenient if they could also be added to your Mac Calendar and here is how.&lt;/p&gt;
    
    </summary>
    
      <category term="daily" scheme="http://swang251.github.io/categories/daily/"/>
    
    
      <category term="MacOS" scheme="http://swang251.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>DSP First - Chapter 5 - FIR Filters</title>
    <link href="http://swang251.github.io/2018/12/24/DSPFirst-Ch5/"/>
    <id>http://swang251.github.io/2018/12/24/DSPFirst-Ch5/</id>
    <published>2018-12-24T18:10:07.000Z</published>
    <updated>2019-03-11T23:56:56.988Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>A <strong>filter</strong> is a system that is designed to remove some component or modify some characteristic of a signal.</p></blockquote><a id="more"></a><p>Several different things are introduced, including: - <em>Finite impulse response (FIR)</em> systems: refered as FIR filters, are systems for which <em>each output value is the sum of a finite number of weighted values of the input sequence</em>. - <em>Difference equation</em>: the basis of the input-output structure of the FIR filter as a time-domain computation. - <em>Unit impulse response</em> - <em>Convolution</em> - <em>Linearity</em> and <em>time invariance</em> - <em>Discrete-time systems</em></p><h3 id="discrete-time-systems">Discrete-time systems</h3><blockquote><p>A discrete-time system is a computational process for transforming one sequence into another sequence. - <span class="math inline">\(x[n]\rightarrow \mathcal{T}\{\cdot\}\rightarrow y[n]=\mathcal{T}\{x[n]\}\)</span>, where <span class="math inline">\(x[n]\)</span> is the input signal and <span class="math inline">\(y[n]\)</span> is the output signal, both of which are discrete-time signals.</p></blockquote><h3 id="the-running-average-moving-average-filter">The running-average (moving-average) filter</h3><ul><li><a href="https://ccrma.stanford.edu/~jos/fp/Difference_Equation_I.html" target="_blank" rel="noopener">Difference equation</a>, e.g., the general, causal, linear and time invariant difference equation: <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{k=0}^M b_k x[n-k] - \sum\limits_{l=0}^N a_l y[n-l],\end{equation}\label{DE}\]</span> where <span class="math inline">\(k\)</span> and <span class="math inline">\(l\)</span> are the "dummy" counting indices for the sum and <span class="math inline">\(n\)</span> denotes the index of the <span class="math inline">\(n^{th}\)</span> sample of the output sequence.</li><li>Causal and noncausal:<ul><li><em>Causal filter</em>: a filter that uses only the present and past values of the <strong>input</strong>.</li><li><em>Noncausal filter</em>: a filter that uses future values of the <strong>input</strong>.</li></ul></li><li>Causal running averager or backward averager, similarly, we have the centralized running averager and the forward averager.</li></ul><h3 id="the-general-fir-filter">The general FIR filter</h3><ul><li>The general causal difference equation <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{k=0}^M b_k x[n-k],\end{equation}\label{FIR}\]</span> where the coefficients <span class="math inline">\(b_k\)</span> are fixed numbers.<ul><li><span class="math inline">\(M\)</span>, the <em>order</em> of the FIR filter</li><li><span class="math inline">\(L=M+1\)</span>, the number of filter coefficients is the filter <em>length</em></li></ul></li><li>Eq. <span class="math inline">\(\eqref{FIR}\)</span> could be written as <span class="math display">\[\begin{equation}  y[n] = \sum\limits_{l=n-M}^n b_{n-l} x[l],\end{equation}\label{FIR_l}\]</span> where <span class="math inline">\(l=n-k\)</span> showing the FIR is causal using the input <span class="math inline">\(x[l]\)</span> start from the previous <span class="math inline">\(M\)</span> samples, i.e. <span class="math inline">\(l=n-M\)</span>, up to the current one <span class="math inline">\(l=n\)</span></li><li>For finite length input signal, i.e., <span class="math inline">\(x[l]\neq 0\)</span> for <span class="math inline">\(l\in[0, N-1]\)</span> and a <span class="math inline">\(M^{th}\)</span>-order FIR filter (of length <span class="math inline">\(M+1\)</span>, i.e., involving <span class="math inline">\(M+1\)</span> samples), there would be <em>transient component</em> of the output including <span class="math inline">\(M\)</span> samples <em>running onto</em> and <em>running off</em> session. And the total output length would be <span class="math inline">\(N+M\text{ (order)}=N+L-1\)</span>.</li></ul><h3 id="the-unit-impulse-response-and-convolution">The unit impulse response and convolution</h3><blockquote><p>The impulse response provides a complete characterization of the FIR filter. - Three new ideas introduced: - the unit impulse sequence - the unit impulse response - the convolution sum</p></blockquote><h4 id="unit-impulse-sequence">Unit impulse sequence</h4><ul><li>Unit impulse, or mathematically taken as the Kronecker <em>delta function</em> <span class="math display">\[\begin{equation} \delta[n]=    \begin{cases}    1\quad n=0\\    0\quad n\neq 0    \end{cases}\end{equation}\label{deltaFunction}\]</span></li><li><em>Express any sequence interm of delta function</em> <span class="math display">\[\begin{equation}  x[n]=\sum\limits_k x[k]\delta[n-k]  \end{equation}\lab  el{x}\]</span><ul><li>the unit impulse is a sequence</li><li><span class="math inline">\(\mathbf{x}\)</span> is a summation of infinite impulse sequences <span class="math inline">\(\mathbf{\delta}_k\)</span></li></ul></li></ul><h4 id="unit-impulse-response-sequence">Unit impulse response sequence</h4><ul><li>The output from a filter is called the <strong>response</strong> to the input.</li><li><strong>Unit impulse response</strong> <span class="math inline">\(h[n]\)</span> represents the output when the input is the unit impulse <span class="math inline">\(\delta[n]\)</span>.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;A &lt;strong&gt;filter&lt;/strong&gt; is a system that is designed to remove some component or modify some characteristic of a signal.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="DSP First" scheme="http://swang251.github.io/tags/DSP-First/"/>
    
  </entry>
  
</feed>

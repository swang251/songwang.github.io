<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swang251.github.io/"/>
  <updated>2020-05-07T02:01:54.942Z</updated>
  <id>http://swang251.github.io/</id>
  
  <author>
    <name>Song Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How do I use Zotero?</title>
    <link href="http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/"/>
    <id>http://swang251.github.io/2020/01/07/How-do-I-use-Zotero/</id>
    <published>2020-01-07T15:30:24.000Z</published>
    <updated>2020-05-07T02:01:54.942Z</updated>
    
    <content type="html"><![CDATA[<p>I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use <a href="https://www.zotero.org/" target="_blank" rel="noopener">Zotero</a> mainly because it is an open-source software and is more flexible.</p><a id="more"></a><h2 id="workflow">Workflow</h2><ul><li>Read the <a href="https://www.zotero.org/support/start" target="_blank" rel="noopener">documentation</a></li><li><a href="https://www.zotero.org/support/adding_items_to_zotero" target="_blank" rel="noopener">Adding Items to Zotero</a><ul><li>We need to install the <em>Zotero Connector</em> for Chrome, Firefox, or other web browsers.</li><li>We need to launch the Zotero desktop application before he could save items to Zotero.</li></ul></li><li><a href="https://www.zotero.org/support/attaching_files#adding_files" target="_blank" rel="noopener">Adding files to items</a><ul><li>the <em>Zotero Connector</em> provides an automatic routine to save the PDF to the Zotero.</li><li>However, I personally prefer to "manually" save the PDFs using <a href="#zotfile">ZotFile</a>.</li></ul></li><li>Organize your PDFs: see <a href="#pdf-organization">below</a></li><li>Adding notes to items: here I list two options<ul><li><a href="https://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown</a>: use <a href="#markdown-here"><em>Markdown Here</em></a></li><li><a href="https://orgmode.org/" target="_blank" rel="noopener">Org mode</a>: use <a href="#org-mode"><em>.org</em></a> attachments</li></ul></li></ul><h2 id="attachementspdfs-organization">Attachements/PDFs Organization</h2><p>There are two options here to manage your attachments: <a href="https://www.zotero.org/support/attaching_files#stored_files_and_linked_files" target="_blank" rel="noopener">stored files and linked files</a>.</p><h3 id="save-and-sync-the-attachements-in-your-zotero-library">Save and sync the attachements in your Zotero library</h3><ul><li>All your attachments will be stored in <code>${Zotero}\storage</code> (set your Data Directory Location in <code>preference</code>-<code>Advanced</code>-<code>Files and Folders</code>), since everything is coded and automatically organized, you will see a series of folders likely named as <code>2NEHBKP9</code>.</li><li>Zotero allows you to sync your files/attachements in My Library. All the attachements you put under the items can be synchronized to the <a href="https://www.zotero.org/storage" target="_blank" rel="noopener">Zotero Storage</a> or your own WebDAV.<ul><li>You can modify it by going to the <code>preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Sync</code> <span class="math inline">\(\rightarrow\)</span> <code>Settings</code> <span class="math inline">\(\rightarrow\)</span> <code>File Syncing</code></li><li>Check/uncheck the <code>Sync attachement files in My Library using</code></li><li>Select <code>Zotero</code> or <code>WebDAV</code>.</li><li>If you select <code>WebDAV</code>, you will need to provide your account infomation.<ul><li>Here is how it works using <a href="https://www.jianguoyun.com" target="_blank" rel="noopener">Jianguoyun</a>: <a href="http://help.jianguoyun.com/?p=2064" target="_blank" rel="noopener">坚果云第三方应用授权WebDAV开启方法</a></li></ul></li></ul></li></ul><p><strong>However, there are two limitation of the this method:</strong></p><ul><li>Zotero storage is not free</li><li>The cloud storage you are using, like <a href="https://help.dropbox.com/installs-integrations/third-party/webdav-or-ftp" target="_blank" rel="noopener">Dropbox, doesn't support WebDAV</a></li></ul><p>So here is another way to organize and sync your attachements.</p><h3 id="save-the-links-to-the-pdfs-in-your-zotero-library.">Save the links to the PDFs in your Zotero library.</h3><p>Zotero allows you to store the link to files in My Library.</p><ul><li>Set the set your <a href="https://www.zotero.org/support/preferences/advanced#linked_attachment_base_directory" target="_blank" rel="noopener">base directory</a> by going to the <code>Preference</code> <span class="math inline">\(\rightarrow\)</span> <code>Advanced</code> <span class="math inline">\(\rightarrow\)</span> <code>Files and Folders</code> <span class="math inline">\(\rightarrow\)</span> <code>Linked Attachment Base Directory</code>. This way, links are stored as the relative path in your library so that is easier when you access the linked files on different computers.</li><li>Use ZotFile for a linked-file workflow</li></ul><h3 id="zotfile">ZotFile</h3><blockquote><p><a href="http://zotfile.com/" target="_blank" rel="noopener">ZotFile</a> is a Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items, sync PDFs from your Zotero library to your (mobile) PDF reader (e.g. an iPad, Android tablet, etc.) and extract annotations from PDF files.</p></blockquote><ul><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> Renaming Rules</li><li>ZotFile Preferences <span class="math inline">\(\rightarrow\)</span> General Setting<ul><li>Source Folder for Attaching New Files: makes it easier to attach newly downloaded files.<ul><li>Download PDF <span class="math inline">\(\rightarrow\)</span> select the paper item <span class="math inline">\(\rightarrow\)</span> right click: Attach New File (ZotFile)</li></ul></li><li>Location of Files<ul><li>Attach stored copy of file(s)</li><li>Custom Location:<ul><li>Use subfolder defined by <code>/%F</code></li></ul></li></ul></li></ul></li></ul><h2 id="note-management">Note Management</h2><h3 id="markdown-here">Markdown Here</h3><blockquote><p><a href="https://markdown-here.com/" target="_blank" rel="noopener">Markdown Here</a> is an extension for Chrome, Firefox, Safari, Opera, Thunderbird, and Postbox.</p></blockquote><ul><li>One can <a href="https://github.com/jlegewie/markdown-here#building-the-extension-bundles" target="_blank" rel="noopener">build the extension bundle</a> from the source code and generate the <code>.xpi</code> file for Zotero</li><li>Then in Zotero, go to Tools <span class="math inline">\(\rightarrow\)</span> Add-on <span class="math inline">\(\rightarrow\)</span> Install Add-on From File...</li><li>When you edit the note, go to File <span class="math inline">\(\rightarrow\)</span> Markdown Toggle or use the hotkey <code>Ctrl+Alt+M</code> to switch back and forth between the plain and the rendered text</li></ul><h3 id="org-mode">Org-mode</h3><blockquote><p><a href="https://orgmode.org/" target="_blank" rel="noopener">Org mode</a> is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.</p></blockquote><p>I started to use Org mode in 2018 and gradually fall in love with it. To me, there is no substitute of Org mode. I tried different markdown softwares like Quiver, Joplin, etc. They are good, (especially the Joplin) but they cannot replace Org mode. Everything is foldable in Org mode which makes it much easier to explore and organize the documents. Also, considering how painful it is to keep notes in the Zotero-note, even with the <a href="https://markdown-here.com/" target="_blank" rel="noopener">Markdown Here</a>, I decided to find a way out to use Org mode for writing reading summaries and notes which can be integrated with Zotero.</p><ul><li>create a <code>noteTemplate.org</code></li><li>Everytime you will add the note by<ul><li>Right click on items <span class="math inline">\(\rightarrow\)</span> Add Attachment <span class="math inline">\(\rightarrow\)</span> Attach Stored Copy of File <span class="math inline">\(\rightarrow\)</span> Select the <code>noteTemplate.org</code></li><li>Right click on <code>.org</code> file under the item <span class="math inline">\(\rightarrow\)</span> Rename File from Parent Metadata</li></ul></li></ul><h3 id="zotxt">Zotxt</h3><blockquote><p><a href="https://gitlab.com/egh/zotxt-emacs" target="_blank" rel="noopener">zotxt-emacs</a> works with zotxt to provide an Emacs integration with Zotero, allowing you to manage citation keys for pandoc markdown documents as well as org mode links to items in your Zotero collection. - Check <a href="http://www.mkbehr.com/posts/a-research-workflow-with-zotero-and-org-mode/" target="_blank" rel="noopener">this article</a> about using Zotxt</p></blockquote><h2 id="other">Other</h2><h3 id="better-bibtex-for-zotero">Better BibTeX for Zotero</h3><blockquote><p><a href="https://retorque.re/zotero-better-bibtex/" target="_blank" rel="noopener">Beter BibTex (BBT)</a> is an extension for Zotero and Juris-M that makes it easier to manage bibliographic data, especially for people authoring documents using text-based toolchains (e.g. based on LaTeX / Markdown). - Automatically exports the <code>.bib</code> file and organizes the citation key.</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I used Endnote as my first reference management software when I started my master study. I also tried a little bit Mendeley and saw how well it is intrinsically coupled Elsevier publications and the PDF editor. However, I finally decided to use &lt;a href=&quot;https://www.zotero.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Zotero&lt;/a&gt; mainly because it is an open-source software and is more flexible.&lt;/p&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Emacs" scheme="http://swang251.github.io/tags/Emacs/"/>
    
      <category term="Zotero" scheme="http://swang251.github.io/tags/Zotero/"/>
    
      <category term="Org-mode" scheme="http://swang251.github.io/tags/Org-mode/"/>
    
  </entry>
  
  <entry>
    <title>Building a Personal Palabos Git Repository</title>
    <link href="http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/"/>
    <id>http://swang251.github.io/2019/12/17/Building-a-Personal-Palabos-Git-Repository/</id>
    <published>2019-12-17T06:05:22.000Z</published>
    <updated>2020-01-13T16:55:16.278Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://palabos.unige.ch/" target="_blank" rel="noopener">Palabos</a> just released a new version (v2.1r0) and pushed everything on <a href="https://gitlab.com/unigespc/palabos" target="_blank" rel="noopener">GitLab</a>. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the <a href="https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow" target="_blank" rel="noopener">Feature Branch Workflow</a> and the <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Git Workflow</a>. <img src="/images/20191217/PalabosGitFlow.jpg"> <a id="more"></a> ## Requirements The workflow has to at least fulfill the following requirements. - Allow private development: researchers might want to develop and test their own algorithms on Palabos. Some of the algorithms may not have been published yet. It is therefore reasonable to keep the repository private. - Allow easy merge requests: This is about implementations of published algorithms or some complement functions/dataProcessors that should definitely be contributed to the official Palabos version. - Allow updates from the UniGeSPC/Palabos: keep the personal repository up-to-date with the official one. - Allow bug fixed both committed to the private and the official repositories.</p><h2 id="forked-project">Forked Project</h2><ul><li>Firstly, <a href="https://docs.gitlab.com/ee/gitlab-basics/fork-project.html" target="_blank" rel="noopener">fork</a> the project <a href="https://gitlab.com/unigespc/palabos" target="_blank" rel="noopener">UniGeSPC/palabos</a>. After this, you could find the folked project under <em>Projects--&gt;Your Projects</em></li><li>Go to your forked Palabos project. You can make it private by set the Project visibility to <em>private</em>. (Go to <em>Setting --&gt; General --&gt; Visibility, project features, permissions --&gt; Project visibility</em>)</li></ul><h2 id="branches">Branches</h2><p>There are four kinds of branches:</p><h3 id="master-branch">Master branch</h3><p>The <strong>master</strong> branch is simply used to save a copy of the <strong>UniGeSPC/palabos/master</strong>. Whenever this is a new release/update from the upstream, it should be merged to the <strong>master</strong> branch which is then merged to the <strong>develop</strong> branch.</p><p>As our own Palabos project is forked from the <strong>UniGeSPC/palabos</strong>, when we first clone the GitLab repository, our <strong>master</strong> branch should be synchronized with the <strong>UniGeSPC/palabos/master</strong>.</p><p>In order to track the official Palabos project, we need to add the <strong>UniGeSPC/palabos</strong> as the upstream <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add upstream https://gitlab.com/unigespc/palabos.git</span><br></pre></td></tr></table></figure></p><p>The upstream repository is shown when typing <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure></p><p>As only the master branch of the upstream repository matters, I modified my <em>.git/config</em> so that whenever I call <code>git fetch</code>, it only fetches the <strong>master</strong> branch instead of all branches. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[remote &quot;upstream&quot;]</span><br><span class="line">        url = https://gitlab.com/unigespc/palabos.git</span><br><span class="line">        fetch = +refs/heads/master:refs/remotes/upstream/master</span><br></pre></td></tr></table></figure></p><p>When there is a new release in the upstream, fetch it and merge it into <strong>master</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git fetch upstream master</span><br><span class="line">$ git checkout master</span><br><span class="line">$ git merge upstream/master</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure></p><p>The <strong>master</strong> branch is then merged to the <strong>develop</strong> branch that is introduced later. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><h3 id="develop-branch">Develop branch</h3><p>The <strong>develop</strong> branch is used for the development, including new features or algorithms. It is initially branched off from the <strong>master</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b develop master</span><br></pre></td></tr></table></figure></p><p>However, it may never be merged back to <strong>master</strong>. Instead, whenever <strong>master</strong> gets an update from the upstream, it should be merged to <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff master</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>Remember here we always use the flag <code>--no-ff</code> to avoid fast-forward merge.</p><blockquote><p>The --no-ff flag causes the merge to always create a new commit object, even if the merge could be performed with a fast-forward. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature.</p></blockquote><h3 id="feature-branch">Feature branch</h3><p>The <strong>feature</strong> branch is used for both algorithm implementations and new functions/dataProcessors. It can be used for implementing both published and unpublished algorithms. The <strong>feature</strong> branch has a name convention <strong>feature-</strong>*. Whenever starting a new <strong>feature</strong>, it should be branched off from either the <strong>master</strong> branch or the <strong>develop</strong> branch.</p><p>When you want to implement an algorithm that would be contributed to the upstream Palabos repository, you should branch off the <strong>master</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION master</span><br></pre></td></tr></table></figure></p><p>Otherwise, you should branch off the <strong>develop</strong> branch: <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature-DESCRIPTION develop</span><br></pre></td></tr></table></figure></p><p>When the development of a new feature is done and tested, it should be merged to the <strong>develop</strong> branch. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff feature-DESCRIPTION</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>If you want to <a href="https://gitlab.com/unigespc/palabos/blob/master/CONTRIBUTING.md" target="_blank" rel="noopener">contribute</a> this new feature to Palabos, you can create a <a href="https://docs.gitlab.com/ee/gitlab-basics/add-merge-request.html" target="_blank" rel="noopener"><code>merge request</code></a>.</p><p>You can also delete this branch once it is merged to both the <strong>develop</strong> branch and the official Palabos. <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature-DESCRIPTION</span><br></pre></td></tr></table></figure></p><h3 id="bugfix-branch">bugFix branch</h3><p><strong>bugFix</strong> is used to fix bugs. It is suggested to open an issue for each bug your find. It could then be branched off from <strong>develop</strong> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b bugFix-issueX develop</span><br></pre></td></tr></table></figure></p><p>Once the bug is fixed, it should be merged back to the <strong>develop</strong> branch <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout develop</span><br><span class="line">$ git merge --no-ff bugFix-issueX</span><br><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></p><p>However, the Palabos Group might also fix the bug in the upstream branches if you don't create a <code>merge request</code> for your <strong>bugFix</strong> branch. If this happens, you might have to solve the conflict manually when you fetch <strong>upstream/master</strong> into the local <strong>master</strong> and then merged to the <strong>develop</strong>.</p><h2 id="conclusion">Conclusion</h2><p>Generally, this framework should work for most of our daily development and usage based on Palabos. My main doubt now is about the <strong>master</strong> branch. As it does nothing but saving a copy of the upstream, it seems reasonablbe to remove it. Everytime we see an new release from the upstream, the <strong>upstream/master</strong> could be directly merged in to the <strong>develop</strong> branch. However, the <strong>master</strong> branch is still kept for now to make the structure clearer.</p><p>Even though the workflow is not perfect, it allows us to maintain a customized Palabos while keeping the repository up-to-date with the upstream official Palabos. It is also easy to contribute to Palabos if you want. The flow diagram showed at the beginning is made based on <a href="https://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="noopener">Vincent Driessen</a>'s template. Don't be hesitate to leave a message if you have any comments or suggestions. Thank you.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://palabos.unige.ch/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Palabos&lt;/a&gt; just released a new version (v2.1r0) and pushed everything on &lt;a href=&quot;https://gitlab.com/unigespc/palabos&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitLab&lt;/a&gt;. This is something that all the Palabos community used to looking forward and makes it easier for the users to get official updates and contribute their own code. Personally, I would like to build my own Palabos version with in-house developed code while keeping updated from the official one. In this post, I am trying to talk about the Git workflow I use, which is mainly based on the &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/feature-branch-workflow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Feature Branch Workflow&lt;/a&gt; and the &lt;a href=&quot;https://nvie.com/posts/a-successful-git-branching-model/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git Workflow&lt;/a&gt;. &lt;img src=&quot;/images/20191217/PalabosGitFlow.jpg&quot;&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="Git" scheme="http://swang251.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Palabos Immersed Boundary-Lattice Boltzmann Method</title>
    <link href="http://swang251.github.io/2019/06/12/Palabos-Immersed-Boundary-Lattice-Boltzmann-Method/"/>
    <id>http://swang251.github.io/2019/06/12/Palabos-Immersed-Boundary-Lattice-Boltzmann-Method/</id>
    <published>2019-06-12T14:31:43.000Z</published>
    <updated>2019-06-12T21:23:41.447Z</updated>
    
    <content type="html"><![CDATA[<p>The immersed boundary method (IBM) is proposed by Peskin in 1972 in his Ph.D. thesis and then is widely used for complex boundaries and moving boundary problems. IBM is applied in the context of lattice Boltzmann method (LBM) for the first time in 2004 by Feng and Michaelides (Feng and Michaelides, J. Comput. Phys, 2004). People also call such combination immersed boundary-lattice Boltzmann method (IB-LBM). In Palabos, different off-lattice methods have been implemented, including the Filippo-Hanel method, the Guo-Zheng-Shi method, the Bouzidi method and also the IBM.</p><a id="more"></a><p>In Palabos, there is a demo showing how to use the IBM to solve the moving wall problems (<em>example/showCases/movingWall</em>). As one can notice, in Palabosv2.0r0, only 3D IBM is implemented and the corresponding implementaions can be found in</p><ul><li><em>src/offLattice/immersedWalls3D.h</em></li><li><em>src/offLattice/immersedWalls3D.hh</em></li></ul><p>Here I will discuss only how the method used in the showCase works.</p><p>In the moving wall case, the multi direct-forcing IB-LBM proposed by Inamuro (2012) is used. Two main function are used:</p><ul><li><code>instantiateImmersedWallData(vertices, areas, container)</code> for the wall boundary instantiation,</li><li><code>inamuroIteration(parameters)</code> for the main IBM iteration.</li></ul><h3 id="instantiateimmersedwalldata">InstantiateImmersedWallData</h3><p><code>instantiateImmersedWallData</code> is a function wrapper for the functional <code>instantiateImmersedWallData3D</code> where the boundary data is stored in a container block called <code>ImmersedWallData3D</code>.</p><h3 id="inamuroiteration">InamuroIteration</h3><p><code>inamuroIteration</code> is a function wrapper for the functional <code>InamuroIteration3D</code> which implements the IB-LBM algorithm following Inamuro (2012). In Inamuro's paper, there are 5 steps (from Step 0-5) in the iterative procedure and it iterate from Step 1 to Step 4. In Palabos, the iteration is implemented with a slighly different procedure.</p><ul><li><code>for (neighboring) {averageJ += W*nextJ;}</code> corresponds to Eq 2.22 (<em>Step -1</em>) and Eq. 2.28 (<em>Step 3.</em>) and the <span class="math inline">\(\mathbf{j}_l(\mathbf{X}_k)\)</span> is calculated instead of <span class="math inline">\(\mathbf{u}_l(\mathbf{X}_k)\)</span>;</li><li><code>for (vertices) {deltaG[i] = area[i]*(wallVelocity-averageJ);}</code> calculates the <span class="math inline">\(g_l(\mathbf{X}_k)\)</span> in <em>Step 0</em> and the last term of the RHS in Eq. 2.29, <em>Step 4</em>;</li><li><code>for (vertices) {g[i] += deltaG[i];}</code> (incompressible model), does the Eq. 2.29 in <em>Step. 4</em>;</li><li><code>for (neighboring) {nextJ += tau*W*deltaG[i];}</code> corresponds to <em>Step 1</em> and <em>Step 2</em> for spreading the force for correct the velocity at the Eulerian grid points. We can take it as substituting <span class="math inline">\(\mathbf{g}_l(\mathbf{x})\)</span> in Eq. 2.27 by Eq. 2.26.</li></ul><p>In the main function in <em>movingWall.cpp</em>, the iteration time depends on <code>param.ibIter</code>.</p><h4 id="n.b.">N.B.</h4><ul><li>The loop for neighboring starts range from -1 to 2. This is because the <code>plint</code> in the line <code>Array&lt;plint,3&gt; intPos ((plint)vertex[0], (plint)vertex[1], (plint)vertex[2])</code> floors the vertex point to the nearest smaller position.</li><li>Still don't understand how the <code>tau</code> in <code>nextJ += tau*W*deltaG[i]</code> helps calculate the moment.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;The immersed boundary method (IBM) is proposed by Peskin in 1972 in his Ph.D. thesis and then is widely used for complex boundaries and moving boundary problems. IBM is applied in the context of lattice Boltzmann method (LBM) for the first time in 2004 by Feng and Michaelides (Feng and Michaelides, J. Comput. Phys, 2004). People also call such combination immersed boundary-lattice Boltzmann method (IB-LBM). In Palabos, different off-lattice methods have been implemented, including the Filippo-Hanel method, the Guo-Zheng-Shi method, the Bouzidi method and also the IBM.&lt;/p&gt;
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 6 (Notes)</title>
    <link href="http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/"/>
    <id>http://swang251.github.io/2019/02/12/Digital-Audio-Signal-Processing-Lecture-6/</id>
    <published>2019-02-13T00:33:47.000Z</published>
    <updated>2020-02-21T18:55:32.751Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 6. <a id="more"></a></p><h3 id="inverse-system">Inverse System</h3><ul><li><span class="math inline">\(y=\mathcal{T}\{x\}\)</span> and <span class="math inline">\(x = \mathcal{T_i}\{y\}\)</span>, where <span class="math inline">\(\mathcal{TT_i} = \mathcal{T_iT} = \mathbf{I}\)</span></li><li><span class="math inline">\(h*h_i = h_i*h = \delta\)</span></li><li><strong>E.g.</strong>, michrophone with a flare that is a high-pass system, needs an inverse system to get rid of the HP effect.</li><li><strong>E.g.</strong>, <span class="math inline">\(h[n]=u[n]\)</span> (accumulator) <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(h_i[n]=\delta[n]-\delta[n-1]\)</span>, where <span class="math inline">\(h*h_i = \delta\)</span></li><li>Infinite impulse response <span class="math inline">\(\longleftrightarrow\)</span> finite impulse response, where the stability needs to be checked when inversion is from finite IR to infinite IR.</li><li><span class="math inline">\(power \propto amplitude^2\)</span><ul><li>Power dB = <span class="math inline">\(10\log_{10}(\dfrac{p}{p_0}) = 20\log_{10}(\dfrac{a}{a_0})\)</span></li><li>Amplitude dB = <span class="math inline">\(5\log_{10}(\dfrac{p}{p_0}) = 10\log_{10}(\dfrac{a}{a_0})\)</span></li></ul></li></ul><h3 id="frequency-response-of-lti-system">Frequency Response of LTI System</h3><ul><li><span class="math inline">\(p_{f_0}[n] = e^{2\pi jf_0 n}\)</span> is the eigenvector of a filter</li><li>Eigenvalue &amp; eigenvector of LTI system<ul><li><span class="math display">\[ \begin{align} y[n] &amp;= h*p_{f_0} = \sum\limits_{k\in \mathbb{Z}}h[k]p_{f_0}[n-k] \\      &amp;= \sum\limits_{k\in \mathbb{Z}}h[k]e^{2\pi jf_0 (n-k)} \\      &amp;= e^{2\pi jf_0 n}\sum\limits_{k\in \mathbb{Z}}h[k]e^{-2\pi jf_0k} \\      &amp;= p_{f_0}[n]H(f_0) \end{align}\]</span></li><li>where <span class="math inline">\(p_{f_0}\)</span> is the eigenvector and <span class="math inline">\(H(f_0)\)</span> is the eigenvalue.</li></ul></li></ul><h3 id="notable-notes">Notable notes</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 6.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 5 (Notes)</title>
    <link href="http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/"/>
    <id>http://swang251.github.io/2019/02/05/Digital-Audio-Signal-Processing-Lecture-5/</id>
    <published>2019-02-05T23:00:52.000Z</published>
    <updated>2020-02-21T17:45:35.918Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 5. <a id="more"></a></p><h3 id="convolution-and-multiplication">Convolution and multiplication</h3><ul><li><span class="math inline">\(Z(f)=X(f)Y(f)\leftrightarrow z=x*y\)</span></li><li><span class="math inline">\(Z(f)=X(f)*Y(f)\leftrightarrow z=xy\)</span></li><li>Application in Source-Filter model</li></ul><h3 id="parsevals-theorem"><a href="https://en.wikipedia.org/wiki/Parseval%27s_theorem" target="_blank" rel="noopener">Parseval's theorem</a></h3><p><span class="math display">\[\sum\limits_{n=-\infty}^\infty x^2[n]= \dfrac{1}{2\pi}\int_{-\pi}^{\pi}|X(e^{j\hat{\omega}})|^2\text{d}\hat{\omega}=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f,\]</span> where the <span class="math inline">\(|X(f)|^2\)</span> is called the power spectral <strong>density</strong> which is with respect to frequency.</p><ul><li>To prove:<ul><li>Given signal and its DTFT <span class="math inline">\(x\leftrightarrow X\)</span></li><li>For the time reversed version of <span class="math inline">\(x\)</span>, <span class="math inline">\(y[n] = x[-n] \leftrightarrow Y(f)=\overline{X}(f)\)</span></li><li>For signal <span class="math inline">\(z\)</span> whose DTFT is defined as <span class="math inline">\(Z(f)=X(f)Y(f) = X(f)\overline{X}(f)\)</span>. <span class="math inline">\(z=x*y\)</span></li><li>In time domain: <span class="math inline">\(z[n]=\sum\limits_{k\in\mathbb{Z}}x[k]y[n-k] = \sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span>, where <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}x[k]x[k-n]\)</span> is the <a href="https://en.wikipedia.org/wiki/Autocorrelation" target="_blank" rel="noopener">autocorrelation</a>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\sum_\limits{k\in\mathbb{Z}}x^2[k]\label{Parseval1}\end{equation}\]</span>.</li><li>Taking the inverse DTFT: <span class="math inline">\(z[n] = \int_{-\frac{1}{2}}^{\frac{1}{2}}Z(f)e^{2\pi jfn}\text{d}f = \int_{-\tfrac{1}{2}}^{\tfrac{1}{2}}X(f)Y(f)e^{2\pi jfn}\text{d}f\)</span>. When <span class="math inline">\(n=0\)</span>, <span class="math display">\[\begin{equation}z[0]=\int_{-\frac{1}{2}}^{\frac{1}{2}}|X(f)|^2\text{d}f\label{Parseval2}\end{equation}\]</span>.</li><li>Eq. <span class="math inline">\(\eqref{Parseval1}\)</span> = Eq. <span class="math inline">\(\eqref{Parseval2}\)</span>.</li></ul></li></ul><h3 id="symmetry-properties-of-signal-and-related-spectral-properties.">Symmetry properties of signal and related spectral properties.</h3><ul><li>Even: <span class="math inline">\(x_e[n]=x_e[-n]\)</span></li><li>Odd: <span class="math inline">\(x_o[n]=-x_o[-n]\)</span></li><li>properties:<ul><li><span class="math inline">\(x_e\bot x_o\)</span>, (<span class="math inline">\(\sum x[n]y[n]=0\)</span>, dot product equals zero)</li><li><span class="math inline">\(\text{odd}\times\text{even} = \text{even}\)</span></li></ul></li><li>For any signal, it could be decomposed as into an even signal and an odd signal, meaning, <span class="math inline">\(x[n] = x_e[n]+x_o[n]\)</span>, where <span class="math inline">\(x_e[n] = \frac{x[n]+x[-n]}{2}\)</span> and <span class="math inline">\(x_o[n] = \frac{x[n]-x[-n]}{2}\)</span></li><li>Apply it into Fourier transform <span class="math display">\[ \begin{align}    X(f) &amp;= \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]+x_o[n])(\cos 2\pi fn - j \sin2\pi fn)\\         &amp;= \sum\limits_{n\in\mathbb{Z}}(x_e[n]\cos2\pi fn - jx_o[n]\sin2\pi fn),\\ \end{align}\]</span> where <strong>the <span class="math inline">\(\Re{\{X(f)\}}\)</span> is even and the <span class="math inline">\(\Im{\{X(f)\}}\)</span> is odd. </strong><ul><li>So a real spectrum means the even signal and a pure imaginary spectrum corresponds to a odd signal.</li></ul></li></ul><h3 id="frequency-shift-and-modulation">Frequency shift and modulation</h3><ul><li><span class="math inline">\(z=xp_{f_0}\)</span> (<span class="math inline">\(z[n]=x[n]e^{2\pi jf_0n}\)</span>)</li><li>Its Fourier transform: <span class="math inline">\(Z(f) = X*P_{f_0}=X(f-f_0)\)</span>, where <span class="math inline">\(P_{f_0}(f)=\delta(f-f_0)=\delta_{f_0}(f)\)</span></li><li><strong>Periodic in one domain</strong> means <strong>evenly spaced in the other domain</strong>.</li><li><a href="https://en.wikipedia.org/wiki/Dirac_comb" target="_blank" rel="noopener">Dirac comb</a></li></ul><h3 id="derivative-of-a-spectrum">Derivative of a Spectrum</h3><ul><li><span class="math display">\[\begin{align}    \dfrac{\text{d} X(f)}{\text{d} f}        &amp;= \frac{\text{d} \sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}}{\text{d} f}\\       &amp;= -2\pi j \sum\limits_{n\in\mathbb{Z}}nx[n]e^{-2\pi jfn}\end{align}\]</span></li><li>Application: <strong>gain</strong><ul><li><span class="math inline">\(x[n] \rightarrow y[n] = g[n]x[n]\)</span>, where <span class="math inline">\(g[n] = a+bn\)</span> is a gain, linearly evolves over time.</li><li><span class="math inline">\(y[n]=ax[n]+b(nx[n])\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y(f) = aX(f)+\frac{bj}{2\pi}\frac{\text{d} X(f)}{\text{d}f}\)</span>.</li><li><strong>gain in time</strong> <span class="math inline">\(\leftrightarrow\)</span> <strong>derivative in spectrum</strong></li><li><strong>Further explanation?</strong></li></ul></li></ul><h3 id="time-scaling">Time scaling</h3><ul><li><span class="math inline">\(y(t)=x(\alpha t)\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(Y = \frac{1}{\alpha}X(\frac{f}{\alpha})\)</span></li></ul><h3 id="discrete-time-system">Discrete-time system</h3><ul><li>A system: <span class="math inline">\(y=\mathcal{T}\{x\}\)</span> or <span class="math inline">\(y[n] = \mathcal{T}\{x\}[n]\)</span></li><li>Like delay (<span class="math inline">\(y[n]=x[n-n_0]\)</span>), square (<span class="math inline">\(y[n]=x^2[n]\)</span>), moving max, threshold and so on.</li><li><strong>Distortion - Chebyshev polynomials?</strong></li><li><strong>Noise reduction need distortion?</strong></li></ul><h4 id="classes">classes</h4><ul><li>memoryless: only the current time (no past, no future samples);</li><li>linear: additivity and scalability</li><li>time invariance: the system propcessing doesn't depends on when you apply it (<span class="math inline">\(y[n-{n_0}]=\mathcal{T}\{x[n-{n_0}]\}\)</span>)</li><li>Stability: <span class="math inline">\(\lVert x\rVert &lt; B_x\)</span> <span class="math inline">\(\leftrightarrow\)</span> <span class="math inline">\(\lVert y\rVert &lt; B_y\)</span>.<ul><li>delay: stable</li><li>amplifier: stable</li><li>accumulator: depends</li></ul></li></ul><h3 id="linear-time-invariant-system-leftrightarrow-filter">Linear Time-Invariant system <span class="math inline">\(\leftrightarrow\)</span> filter</h3><ul><li>A filter is a LTI system.</li><li><span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span> <span class="math display">\[\begin{align}  y[n] &amp;= \mathcal{T}\{x\}[n] \\       &amp;= \mathcal{T}\{\sum\limits_{k\in\mathbb{Z}}x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\mathcal{T}\{x[k]\delta_k[n]\}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}\{x[k]\mathcal{T}\{\delta_k[n]\}\} \quad \text{applying linearities}\\       &amp;= \sum\limits_{k\in\mathbb{Z}}x[k]h_k[n],  \end{align}\]</span> where <span class="math inline">\(h_k=\mathcal{T}\{\delta_k\}\)</span> is the <strong>impulse reponse</strong>.</li><li><span class="math inline">\(y=x*h\)</span></li><li><span class="math inline">\(Y=XH\)</span>, where <span class="math inline">\(H\)</span> is the Fourier transform of <span class="math inline">\(h\)</span> and is the frequency response.</li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix#Discrete_convolution" target="_blank" rel="noopener">Toeplitz matrix and convolution</a></li><li>For convoluion: <span class="math inline">\(N_y = N_x+N_h-1\)</span></li><li>Properties:<ul><li>Stability: depends on <span class="math inline">\(h\)</span>, meaning the bound of <span class="math inline">\(\sum\limits_{k\in\mathbb{Z}}|h[n-k]|\)</span></li><li>causality: <span class="math inline">\(h[n-k]=0\)</span> for <span class="math inline">\(k\leq n\)</span>.</li><li>memoryless: <span class="math inline">\(h[k]=0\)</span> when <span class="math inline">\(k\neq 0\)</span></li></ul></li></ul><h3 id="notable-notes">Notable notes</h3><ul><li>Energy: the accumulated version of the power <span class="math inline">\(x^2[n]\)</span></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 5.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Simulation Routine, and Code/Result Management across Laptop and Cluster</title>
    <link href="http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/"/>
    <id>http://swang251.github.io/2019/01/30/Commands-and-Routine-of-Simulation-on-Graham-Compute-Canada-Cluster/</id>
    <published>2019-01-30T10:41:19.000Z</published>
    <updated>2019-05-31T20:33:58.636Z</updated>
    
    <content type="html"><![CDATA[<p>For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster <a href="https://docs.computecanada.ca/wiki/Graham" target="_blank" rel="noopener">GRAHAM</a> of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.</p><a id="more"></a><h3 id="softwaretool-list">Software/Tool List</h3><ul><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> (version control)</li><li><a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> (remote repository storage)</li><li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Sourcetree</a> (Git GUI)</li><li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> (cross-platform building software)</li><li><a href="https://www.jetbrains.com/clion/" target="_blank" rel="noopener">CLion</a> (C++ IDE)</li><li><a href="https://www.gnu.org/software/emacs/" target="_blank" rel="noopener">Emacs</a> (Text editor for code editing on the cluster)</li><li><a href="https://slurm.schedmd.com/overview.html" target="_blank" rel="noopener">Slurm</a> (job scheduler used by Compute Canada clusters)</li><li><a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a> (file transfer)</li><li><a href="https://www.paraview.org/" target="_blank" rel="noopener">Paraview</a> (result visualization)</li></ul><h3 id="login-and-version-control">Login and Version Control</h3><ul><li>For convenience, I make an alias of the ssh connection called <code>graham</code>. Details could be check in my <a href="https://swang251.github.io/2018/10/04/Passwordless-SSH-connection-to-a-Cluster/">previous blog</a>.</li><li>I am using <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> and <a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket</a> for version control.</li></ul><h3 id="file-structure">File Structure</h3><ul><li>For the LBM simulation, I got my projects stored in the folder <em>lbm</em> and the Palabos library in <em>palabos</em>, make sure they are in the same directory level.</li><li>Each project is named as the case short name + dimension. For example, I have <em>aeolianToneCylinder2D</em> and <em>ductRadiation2DAxisymmetric</em>.</li><li>In each project, the file structure is shown below. It includes<ul><li><em>main.cpp</em>: the main c++ file,</li><li><em>CMakeLists.txt</em>: the CMake configuration file,</li><li><em>./laptop-cmake-build-debug/</em>: the workspace folder for the laptop, including the<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file,</li></ul></li><li><em>./cluster-cmake-build-debug/</em>: the workspace folder for the cluster,<ul><li>CMAKE workspace files,</li><li>Makefile,</li><li>excutable file,</li><li>.xml simulation setup file ,</li><li>.sh file for submitting batch jobs,</li></ul></li><li><em>./Analysis/</em>: the folder for the simulation results and the analysis scripts.<ul><li>.m matlab script</li><li>.vtk for visualization</li><li>.dat for simulaiton <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">aeolianToneCylinder2D</span><br><span class="line">+-- main.cpp</span><br><span class="line">+-- CMakeLists.txt</span><br><span class="line">+-- laptop-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">+-- cluster-cmake-build-debug</span><br><span class="line">|   +-- aeolianToneCylinder2D.xml</span><br><span class="line">|   +-- aeolianToneCylinder2D.sh</span><br><span class="line">+-- Analysis</span><br><span class="line">|   +-- *.m</span><br><span class="line">|   +-- ResultFolders</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="build-and-compilation">Build and Compilation</h3><ul><li>I am using <a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a> for cross-platform project building (MacOS for my laptop and Linux on the cluster).</li><li>Each platform owns its own workspace folder, i.e., <em>./laptop-cmake-build-debug</em> for the laptop and <em>./cluster-cmake-build-debug</em> for the cluster.</li><li>The project on the laptop is built and debugged through CLion which is straight forward.</li><li>On the cluster end, go to the folder <em>./cluster-cmake-build-debug</em> and use the command <code>cmake ../</code> to build the project. Then, use <code>make</code> to compile everything.</li><li>Sometimes, we need to manually load cmake module. Use <code>module avail cmake</code> to check the available cmake version and use, e.g., <code>module load cmake/3.12.3</code> to load the new cmake version.</li></ul><h3 id="running-jobs">Running Jobs</h3><ul><li><p>For each project, there will be a corresponding batch file <em>**.sh</em>. For example <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#SBATCH --account=def-SUPERVISOR</span><br><span class="line">#SBATCH --time=01:00:00</span><br><span class="line">#SBATCH --ntasks=64</span><br><span class="line">#SBATCH --mem-per-cpu=128M</span><br><span class="line">#SBATCH --job-name=JOBNAME</span><br><span class="line">#SBATCH --output=%x-%j-np64.out</span><br><span class="line">#SBATCH --mail-user=EMAILADDRESS</span><br><span class="line">#SBATCH --mail-type=BEGIN</span><br><span class="line">#SBATCH --mail-type=END</span><br><span class="line">#SBATCH --mail-type=FAIL </span><br><span class="line"></span><br><span class="line">mpirun -np 64 ./projectName ./projectName.xml</span><br></pre></td></tr></table></figure></p><ul><li><code>--mail</code> provides the option for notification at different stage of the simulation which is quite useful.</li></ul></li><li><p>make sure everything is included</p><ul><li>output directory created (or automatically created)</li><li>program parameters</li><li>have the modified code compiled (<code>make</code>)</li></ul></li><li><p>submit the job: <code>sbatch ./projectName.sh</code></p><ul><li>you will see <em>Submitted batch job 11315557</em></li></ul></li><li><p>job status: <code>squeue -u $USER</code></p><ul><li>you will see <em>JOBID USER ACCOUNT NAME ST START_TIME TIME_LEFT NODES CPUS GRES MIN_MEM NODELIST (REASON)</em></li></ul></li><li><p>cancel job: <code>scancel JobID</code></p></li><li><p>check the efficiency of the job: <code>seff JobID</code></p></li><li><p>The information of the submitted job, including the output, would be written in the <em>.out</em> files.</p></li></ul><h3 id="file-transfer">File transfer</h3><ul><li>File transfer is normally done by <a href="https://www.globus.org/" target="_blank" rel="noopener">Globus</a>, details can be found <a href="https://docs.computecanada.ca/wiki/Globus" target="_blank" rel="noopener">here</a></li></ul><h3 id="cpu-based-paraview-client-server-visualization">CPU-based ParaView client-server visualization</h3><p>For large data processing, it will be more convenient to handle it on the cluster end, making use of ParaView cliend-server mechanisms.</p><ul><li>check the <a href="https://docs.computecanada.ca/wiki/Visualization#CPU-based_ParaView_client-server_visualization_on_general_purpose_clusters" target="_blank" rel="noopener">Compute Canada Documentation Wiki</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;For my research involving the lattice Boltzmann method, I normally run most of the simulation on the cluster &lt;a href=&quot;https://docs.computecanada.ca/wiki/Graham&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GRAHAM&lt;/a&gt; of Compute Canada. It is boring and inconvenient to manage the code and the simulation results across my own laptop and the cluster. But still, I am building up my own way to manage everything and try to make it as easy as possible. Here I briefly note down how I organize my codes using Cmake and Git, and what is the routine of running simulation on the cluster.&lt;/p&gt;
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/tags/Research-Daily/"/>
    
      <category term="HPC" scheme="http://swang251.github.io/tags/HPC/"/>
    
      <category term="CAML" scheme="http://swang251.github.io/tags/CAML/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 4 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/"/>
    <id>http://swang251.github.io/2019/01/29/Digital-Audio-Signal-Processing-Lecture-4/</id>
    <published>2019-01-29T22:38:43.000Z</published>
    <updated>2020-01-24T17:52:59.947Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 4.</p><p>NOTA: All <span class="math inline">\(f\)</span> in this blog refers to the normalized frequency. <a id="more"></a></p><h3 id="different-representation">Different representation</h3><h4 id="time-domain-representation">Time-domain representation</h4><ul><li><span class="math inline">\(\delta_k\)</span>: the feature of time, representing time 'k';</li><li><span class="math inline">\(x = \sum\limits_{k\in\mathbb{Z}} x[k]\delta_k\)</span> or <span class="math inline">\(x[n] = \sum\limits_{k\in\mathbb{Z}}x[k]\delta[n-k]\)</span></li></ul><h4 id="frequency-domain-representation-spectrum">Frequency-domain representation (spectrum)</h4><ul><li><span class="math inline">\(p_f[n] = e^{2\pi jfn}\)</span>: the feature of frequency, and be used to represent <span class="math inline">\(x[n]\)</span> in terms of frequency <span class="math inline">\(f\)</span>.</li><li><span class="math inline">\(x[n]\)</span> is a linear combination of <span class="math inline">\(p_f[n]\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(x[n] = \int X(f)p_f[n]\text{d}f\)</span>, where <span class="math inline">\(X(f)\)</span> is the Fourier representation.</li></ul><h3 id="heuristic-description-of-fourier-transform">Heuristic description of Fourier Transform</h3><h4 id="for-xn-aejtheta">For <span class="math inline">\(x[n] = ae^{j\theta}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{f_0}[n] = ae^{j(2\pi f_0n+\theta)}\)</span><ul><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\cos(2\pi f_0n+\theta) = a\cos\theta\delta(f_0)\)</span>,</li><li><span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} a\sin(2\pi f_0n+\theta) = a\sin\theta\delta(f_0)\)</span>,</li><li>so <span class="math display">\[\begin{equation} \sum\limits_{n\in\mathbb{Z}} ae^{j\theta}p_{f_0}n = ae^{j\theta}\delta(f_0),\end{equation}\label{distribution}\]</span> where <span class="math inline">\(\delta(f_0)\)</span> is a distribution function</li></ul></li></ul><h4 id="for-xn-aejthetae2pi-f_0n">For <span class="math inline">\(x[n] = ae^{j\theta}e^{2\pi f_0n}\)</span></h4><ul><li><span class="math inline">\(x[n]p_{-f}[n] = ae^{j\theta}e^{2\pi j(f_0-f)n}\)</span><ul><li>Looking for a modulated frquency <span class="math inline">\(f_{modulated} = f_0-f\)</span>.</li><li>So we have, <span class="math display">\[\begin{equation}\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n] = ae^{j\theta}\delta(f_0-f),\end{equation}\]</span> meaning there is a contribution of <span class="math inline">\(x[n]\)</span> only when <span class="math inline">\(f_0 = f\)</span>.</li></ul></li><li>Go for, <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]p_{-f}[n]\)</span> = <span class="math inline">\(\sum\limits_{n\in\mathbb{Z}} x[n]\overline{p_f[n]} = \mathbf{x}\cdot\mathbf{p_f} = \mathbf{p_f}^H\cdot\mathbf{x}\)</span>, assuming <span class="math inline">\(\mathbf{x}\)</span> is a real vector (signal).<ul><li>Meaning <strong>projecting signal <span class="math inline">\(\mathbf{x}\)</span> onto the coordinate <span class="math inline">\(\mathbf{p_f}\)</span></strong>,</li><li>where it first does the modulation (<span class="math inline">\(e^{-2\pi jfn}\)</span>) and then the summation (<span class="math inline">\(\sum\)</span>)</li><li>Properties of the Euclidean Inner Product: <span class="math inline">\(\mathbf{u}\cdot\mathbf{v} = \overline{\mathbf{v}\cdot\mathbf{u}}\)</span></li></ul></li><li><strong>Fourier transform and inverse Fourier transform</strong><ul><li><span class="math inline">\(X(f)=\sum\limits_{n\in\mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>: the "-" sign comes from the conjugate of <span class="math inline">\(\mathbf{p_f}\)</span> during the dot products</li><li><span class="math inline">\(x[n]=\int X(f)e^{+2\pi jfn}\text{d}f\)</span>: the "+" sign because these is the linear combination of <span class="math inline">\(\mathbf{p_f}\)</span></li></ul></li></ul><h3 id="more-about-fourier-transform">More about Fourier Transform</h3><ul><li>Fourier Transform: <span class="math inline">\(X(f) = \int x(t)e^{-2\pi jFt}\text{d}t\)</span>.</li><li>Discrete-time Fourier Transform: <span class="math inline">\(X(f) = \sum\limits_{n\in \mathbb{Z}}x[n]e^{-2\pi jfn}\)</span>.</li><li>The frequency is real and continuous.</li><li><span class="math inline">\(X(f) \in \mathbb{C}\)</span> is periodic and complex.</li><li>Though it is easy to prove, but <strong>why does sampling make signal periodic in frequency domain?</strong><ul><li><span class="math inline">\(X(f) = X(f+1)\)</span></li></ul></li><li>Convergence: <span class="math inline">\(|X(f)|\)</span>. (<a href="https://en.wikipedia.org/wiki/Norm_(mathematics)" target="_blank" rel="noopener">norm</a>)</li></ul><h3 id="examples">Examples</h3><table><colgroup><col style="width: 42%"><col style="width: 57%"></colgroup><thead><tr class="header"><th style="text-align: center;">Time-domain <span class="math inline">\(x[n]\)</span></th><th style="text-align: center;">Frequency-domain <span class="math inline">\(X(f)\)</span></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">Impulse: <span class="math inline">\(\delta[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(1\)</span></td></tr><tr class="even"><td style="text-align: center;">Damped exponential: <span class="math inline">\(a^n u[n]\)</span></td><td style="text-align: center;"><span class="math inline">\(\dfrac{1}{1-ae^{-2\pi jf}}\)</span></td></tr><tr class="odd"><td style="text-align: center;">Rectangular function: <span class="math inline">\(r_N[n]=u[n]-u[n-N]\)</span></td><td style="text-align: center;"><span class="math inline">\(e^{-\pi jf(N-1)}\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span></td></tr></tbody></table><ul><li><strong>NOTA:</strong> For the rectangular function, the <span class="math inline">\(\dfrac{\sin(\pi fN)}{\sin(\pi f)}\)</span> in the <span class="math inline">\(X(f)\)</span> is not the sinc function. Instead, <span class="math inline">\(\dfrac{\sin(\pi f)}{\pi f} = \text{sinc}(\pi f)\)</span>, the sinc function, which is non-periodic, is the Fourier transform of the rectangular function instead of its DTFT. The sampling makes the <span class="math inline">\(X(f)\)</span> periodic in frequency domain as shown in the table.</li></ul><h3 id="theorems">Theorems</h3><ul><li>periodic in <span class="math inline">\(f\)</span></li><li>linear</li><li>time-shift (delay): <span class="math inline">\(y[n] = x[n-d] \rightarrow Y(f) = X(f)e^{-2\pi jfd}\)</span></li><li>frequency-shift: <span class="math inline">\(y[n] = x[n]e^{2\pi jf_0n} \rightarrow Y(f) = X(f-f_0)\)</span></li><li>time-reverse: <span class="math inline">\(y[n] = x[-n] \rightarrow Y(f)=X(-f)\)</span></li><li>Frequency multiplication means time convolution and vice versa.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 4.&lt;/p&gt;
&lt;p&gt;NOTA: All &lt;span class=&quot;math inline&quot;&gt;\(f\)&lt;/span&gt; in this blog refers to the normalized frequency.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing-Lecture 3 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/"/>
    <id>http://swang251.github.io/2019/01/22/Digital-Audio-Signal-Processing-Lecture-3/</id>
    <published>2019-01-22T22:15:58.000Z</published>
    <updated>2019-02-13T20:01:28.298Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 3. <a id="more"></a></p><ul><li>From now on, the hat, <span class="math inline">\(\hat{}\)</span>, represents the normalized version.</li></ul><h3 id="notable-notes">Notable Notes</h3><ul><li>von Coler et al. 2018, Parametric Synthesis of Glissando Note Transitions - A User Study in a Real-Time Application, DAFx-18.</li><li>signal: a mathematical function that carries information, could be pressure, control parameters and so on.</li><li>Lagrange polynomial used in spatial sampling, non-integer delay as an interpolating filter.</li><li>A delay system is a system.</li><li>ADSR is a synthesizer.</li><li><span class="math inline">\(s[n] = \sum\limits_{k\in \mathbb{Z}}s[k]\delta[n-k]\)</span></li><li><strong>Dirac delta function</strong><ul><li>There are many ways to define Dirac delta function, see <a href="http://mathworld.wolfram.com/DeltaFunction.html" target="_blank" rel="noopener">Wolfram MathWorld</a></li><li>See more <a href="http://tutorial.math.lamar.edu/Classes/DE/DiracDeltaFunction.aspx" target="_blank" rel="noopener">here</a></li><li>integral, kind of dot product.</li></ul></li><li><strong>Block by Block (buffer)</strong> in applications equals <strong>vectorization</strong></li><li><strong>Sampling</strong> makes the spectrum periodic<ul><li>For two frequency, <span class="math inline">\(\hat{f_0}\)</span> and <span class="math inline">\(\hat{f_0}+r\)</span><ul><li>Discrete-time domain: <span class="math inline">\(\cos(2\pi\hat{f_0}n) = \cos(2\pi(\hat{f_0}+r)n)\)</span>, because <span class="math inline">\(2\pi r n\)</span> is an integer multiple of <span class="math inline">\(2\pi\)</span>, so it is periodic inthe frequency domain.</li><li>Continuous-time domain: <span class="math inline">\(\cos(2\pi f_0 t) \neq \cos(2\pi (f_0+rf_0)t)\)</span></li></ul></li><li>From <span class="math inline">\(x(t)=x(t+T_0)\)</span> to <span class="math inline">\(x[n] = x[n+N_0]\)</span>, it only works when $N_0 = k $ and <span class="math inline">\(k=0,1,\dots, N_0\)</span></li></ul></li><li>impulse (time-domain) <span class="math inline">\(\rightarrow\)</span> 1 (frequency-domain) <span class="math inline">\(\rightarrow\)</span> alias filter (works as a bandlimited filter) <span class="math inline">\(\rightarrow\)</span> rectangular (frequency-domain) <span class="math inline">\(\rightarrow\)</span> ADC <span class="math inline">\(\rightarrow\)</span> sinc function (time-domain)</li><li>The basis of Fourier transform is simply rotating vectors in the 2D plane (<span class="math inline">\(e^{2\pi j\hat{f_0}n}\)</span>)</li></ul><h3 id="discrete-time-sequences">Discrete-time sequences</h3><h4 id="impulse">Impulse</h4><p><span class="math display">\[\begin{equation}  \delta[n] =     \begin{cases}      1, \quad n=0,\\      0, \quad n\neq0    \end{cases}  \end{equation}\]</span></p><ul><li>Delayed impulse: <span class="math inline">\(\delta_{n_0}[n]=\delta[n-n_0]\)</span></li><li>Impulse response</li></ul><h4 id="unit-step-sequence">Unit step sequence</h4><p><span class="math display">\[\begin{equation}  u[n] =     \begin{cases}      1, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(u[n]=u[n-1]+\delta[n]=\sum\limits_{k=0}^\infty\delta[n-k]\)</span></li><li>works as a switch (control)</li><li>used to check the stability</li></ul><h4 id="rectangular-sequence">Rectangular sequence</h4><p><span class="math display">\[\begin{equation}r[n]=u[n]-u[n-N],\end{equation}\]</span> where <span class="math inline">\(N\)</span> is the length of the rectangular</p><ul><li><span class="math inline">\(r[n] = \delta[n]\)</span> when <span class="math inline">\(N=1\)</span> <span class="math inline">\(\rightarrow\)</span> <span class="math display">\[\delta[n]=u[n]-u[n-1],\]</span> which is also explained as a finite-difference scheme, representing the slope the signal is we divide both sides by the sampling time $ T_s$</li><li>used to design waveforms like a square wave (a linear combination of rectangular sequence)</li></ul><h4 id="damped-exponentials">Damped Exponentials</h4><p><span class="math display">\[\begin{equation}  x[n] =     \begin{cases}      Aa^n, \quad n\leq0,\\      0, \quad n&lt;0    \end{cases}  \end{equation}\]</span></p><ul><li><span class="math inline">\(0&lt;a&lt;1\)</span>, damped signal, <span class="math inline">\(-1&lt;a&lt;0\)</span>, damped osillating signal.</li><li><a href="https://en.wikipedia.org/wiki/RC_circuit" target="_blank" rel="noopener"><strong>RC circuit</strong></a> and <a href="https://en.wikipedia.org/wiki/Low-pass_filter#RC_filter" target="_blank" rel="noopener">RC filter</a>, working as a low pass filter, check <a href="https://www.electronics-tutorials.ws/filter/filter_2.html" target="_blank" rel="noopener">here</a>.</li><li>The frequency response of <span class="math inline">\(a^nu[n]\)</span> is <span class="math inline">\(\dfrac{1}{1-ae^{-j\hat{\omega}}}\)</span>, where <span class="math inline">\(\hat{\omega}\)</span> is the normalized radian frequency.</li><li>recursive</li></ul><h4 id="sinusoids-sequence">Sinusoids sequence</h4><p><span class="math display">\[\begin{equation}x[n] = A_0\cos(2\pi \hat{f_0}n+\phi_0),\end{equation}\]</span> where <span class="math inline">\(\hat{f_0}\)</span> is the normalized frequency and <span class="math inline">\(\phi_0\)</span> is the initial phase.</p><ul><li>recursive computaion of <span class="math inline">\(sin\)</span> functions</li></ul><h4 id="complex-exponential-sequence">Complex exponential sequence</h4><p><span class="math display">\[P_{f_0}[n]=e^{2\pi j \hat{f_0}n}\]</span> and <span class="math display">\[z[n] = A_0e^{j\phi_0}e^{j2\pi\hat{f_0}n}=z[n-1]e^{2\pi j \hat{f_0}},\]</span> where the phasor <span class="math inline">\(\hat{A}=Ae^{j\phi_0}\)</span> is the complex amplitude.</p><h4 id="damped-sinusoids">Damped sinusoids</h4><p><span class="math display">\[x[n] = A_0e^{-\alpha n}\cos(2\pi\hat{f_0}n+\phi_0)\]</span> and <span class="math display">\[z[n] = \hat{A_0}e^{-\alpha+2\pi j\hat{f_0}n},\]</span> where <span class="math inline">\(e^{-\alpha}\)</span> represents the damping.</p><h3 id="the-link-between-phase-shift-and-time-delay">The link between phase shift and time delay</h3><p>Comparing: <span class="math display">\[x(t) \rightarrow x(t-d)\]</span> and <span class="math display">\[sin(2\pi f_0t+\phi_0) \rightarrow sin(2\pi f_0 (t-d)+\phi_0),\]</span> where the phase shift <span class="math inline">\(-2\pi f_0 d\)</span> is frequency dependent.</p><h3 id="others">Others</h3><h4 id="spatial-wave">spatial wave</h4><p><span class="math display">\[p(t,r) = A_0\cos(2\pi f_0(t-\frac{r}{c}))\]</span> - the link between the spatial domain and the phase domain - wavenumber is the spatial frequency of the wave <span class="math inline">\(k = \dfrac{2\pi f_0}{c}=\dfrac{2\pi}{\lambda}\)</span> (radians or circle per unit distance), BTW, <strong>wavenumber is not dimensionless</strong> but Helmholtz number <span class="math inline">\(ka\)</span> is. - Compared to frequency <span class="math inline">\(\omega = \dfrac{2\pi}{T}\)</span>, where <span class="math inline">\(T\)</span> and <span class="math inline">\(\lambda\)</span> are the length of the period in time and space, respectively.</p><h4 id="phasor">Phasor</h4><ul><li>phasor <span class="math inline">\(\leftrightarrow\)</span> vector</li></ul><h4 id="linear-chirp">Linear chirp</h4><p><span class="math display">\[\phi[n] = \phi_0 + 2\pi(\hat{f_0}+\frac{\beta(n+1)}{2})n\]</span> instead of simply <span class="math inline">\(\phi[n] = \phi_0+2\pi f[n]n\)</span>, where <span class="math inline">\(f[n] = \hat{f_0}+\beta n\)</span></p><ul><li>this is to maintain the phase continuity.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 3.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing Lecture 1 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/"/>
    <id>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-1/</id>
    <published>2019-01-16T01:13:15.000Z</published>
    <updated>2020-01-24T18:59:43.182Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 1. <a id="more"></a></p><h2 id="introduction">Introduction</h2><ul><li>Tools and concepts used in the course: quantitative, math, symbolic</li><li>Symbolic representation</li></ul><h2 id="symbolic-representation">Symbolic Representation</h2><ul><li>numbers: <span class="math inline">\(i,j,k,l,m,n\)</span> (interger), <span class="math inline">\(x,y,z,t\)</span> (coordinate).</li><li>Interger: count object: <span class="math inline">\(\mathbb{Z,V}\)</span></li><li>Real: <span class="math inline">\(\mathbb{R}\)</span> + rational <span class="math inline">\(x=\dfrac{p}{q}\)</span></li></ul><h2 id="properties-links">Properties Links</h2><ul><li><span class="math inline">\(\subset\)</span> (includes), <span class="math inline">\(\in\)</span> (belong to)</li><li><span class="math inline">\(s_i\)</span>, where <span class="math inline">\(i\in[0,1\cdots]\)</span></li><li><span class="math inline">\(m=\dfrac{1}{N}\sum\limits_{i=0}^{N-1}s_i\)</span></li></ul><h2 id="sequence-and-series">Sequence and Series</h2><h3 id="sequence">Sequence</h3><ul><li><strong>Definition</strong>: ordered set of values (mathmatical objects).</li><li>Arithmetic sequence<ul><li><span class="math display">\[u_n=\begin{cases} a,\quad n=0, \\ u_{n-1}+b,\quad n&gt;0.\end{cases}\]</span></li><li>or <span class="math inline">\(u_n=a+nb\)</span>.</li></ul></li><li>Geometric sequence<ul><li><span class="math display">\[u_n=\begin{cases} a,\quad n=0, \\ u_{n-1}\cdot b,\quad n&gt;0.\end{cases}\]</span></li><li>or <span class="math inline">\(u_n=a\cdot b^n\)</span>.</li></ul></li><li>Harmonic sequence<ul><li><span class="math inline">\(u_k[n]=a_k\cos(2\pi f_k n +\phi_k)\)</span></li></ul></li></ul><h3 id="series">Series</h3><ul><li><strong>Definition</strong>: <span class="math inline">\(S_n=\sum\limits_{i=0}^n u_i\)</span></li><li>Arithmetic series <span class="math display">\[\begin{align}S_n&amp;= \sum\limits_{i=0}^n (b+ia) \\&amp;= \sum\limits_{i=0}^n b \sum\limits_{i=0}^n ia \\&amp;= (n+1)b + a\dfrac{n(n+1)}{2} \\&amp;= (n+1)\cdot(b+\dfrac{an}{2}).\end{align}\]</span></li><li>Geometric series <span class="math display">\[S_n=\sum\limits_{i=0}^n ba^i=b\cdot\sum\limits_{i=0}^n a^i = b\left(\dfrac{1-a^{n+1}}{1-a}\right)\]</span>, when <span class="math inline">\(n\rightarrow \infty\)</span><ul><li><span class="math inline">\(|a|&lt;1 \rightarrow S_n=b\dfrac{1}{1-a}\)</span></li><li><span class="math inline">\(|a|&gt;1 \rightarrow S_n=\pm\infty\)</span></li></ul></li><li>Fourier series <span class="math inline">\(S_K[n]=\sum\limits_{k=0}^Ku_k[n]=\sum\limits_{k=0}^K a_k\cos(2\pi f_k n+\phi_k)\)</span></li></ul><h3 id="vectors-matrices">Vectors &amp; Matrices</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 1.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
  <entry>
    <title>Digital Audio Signal Processing-Lecture 2 (Notes)</title>
    <link href="http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/"/>
    <id>http://swang251.github.io/2019/01/15/Digital-Audio-Signal-Processing-Lecture-2/</id>
    <published>2019-01-16T00:15:03.000Z</published>
    <updated>2020-01-17T05:51:41.012Z</updated>
    
    <content type="html"><![CDATA[<p>Notes of Digital Audio Signal Processing, Lecture 2. <a id="more"></a></p><h2 id="dot-product">Dot product</h2><ul><li><span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span></li><li>The <a href="https://en.wikipedia.org/wiki/Correlation_and_dependence#Definition" target="_blank" rel="noopener">correlation</a> is related to dot product, see <a href="https://qr.ae/TUnqvl" target="_blank" rel="noopener">here</a>.</li><li>norm (<span class="math inline">\(\left\lVert\mathbf{u}\right\rVert = D(\mathbf{u},\mathbf{u})=\sum_{i=1}^3u_i^2\)</span>) <span class="math inline">\(\rightarrow\)</span> dot product (<span class="math inline">\(D(\mathbf{u},\mathbf{v})=\sum_{i=1}^3u_iv_i\)</span>) <span class="math inline">\(\rightarrow\)</span> Energy <span class="math inline">\(\left\lVert\mathbf{u}\right\rVert ^2\)</span>.</li><li><span class="math inline">\(D(\mathbf{u},\mathbf{u}) = \mathbf{u}^\intercal \mathbf{u}\)</span></li><li>inner product</li><li>Signal in discrete time of lenght <span class="math inline">\(N\)</span> has a dimension of <span class="math inline">\(N\)</span>;</li><li><a href="https://en.wikipedia.org/wiki/Orthogonality" target="_blank" rel="noopener">Orthogonal</a> <span class="math inline">\(\mathbf{s_1}^\intercal \mathbf{s_2} = 0\)</span>, meaning, nonzeros in <span class="math inline">\(\mathbf{s_1}\)</span> correspond to zeros in <span class="math inline">\(\mathbf{s_2}\)</span> <span class="math inline">\(\rightarrow\)</span> <strong>Frequency does not overlap ??</strong></li></ul><h2 id="matrix">Matrix</h2><ul><li>A matrix is a system.</li><li><a href="https://en.wikipedia.org/wiki/Hadamard_matrix" target="_blank" rel="noopener"><strong>Hadamard matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> <a href="https://en.wikipedia.org/wiki/Hadamard_transform" target="_blank" rel="noopener">Hadamard Transform</a> is an example of a generalized class of Fourier transform.</li><li><a href="https://en.wikipedia.org/wiki/Rotation_matrix" target="_blank" rel="noopener"><strong>Rotation matrix</strong></a></li><li>In Matlab, <code>u.*v</code> equals <code>diag(u)*v</code> (element-wise multiplication), where <code>diag(u)</code> is the <strong>temporal envelope</strong>.</li><li>In Matlab, <span class="math inline">\(B^{-1}C=\)</span><code>B\C</code> and <span class="math inline">\(B/C^{-1}=\)</span><code>B/C</code>.</li><li>The relationship between <strong>the deconvolution and the inverse of a matrix</strong></li><li><a href="https://en.wikipedia.org/wiki/Toeplitz_matrix" target="_blank" rel="noopener"><strong>Toeplitz matrix</strong></a> and its "upside down" version - <a href="https://en.wikipedia.org/wiki/Hankel_matrix" target="_blank" rel="noopener"><strong>Hankel matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> filter correlation <span class="math inline">\(\rightarrow\)</span> <strong>Transmission line matrix (Waveguide)</strong></li><li><a href="https://en.wikipedia.org/wiki/Vandermonde_matrix" target="_blank" rel="noopener"><strong>VanderMonde matrix</strong></a> <span class="math inline">\(\rightarrow\)</span> damped sine wave (inversion) <span class="math inline">\(\rightarrow\)</span> noise cancellation</li><li>Matrices might not be inversable just like one might not recover the original signal from its projection onto one axis.</li><li><span class="math inline">\((\mathbf{ABC})^\intercal = \mathbf{C}^\intercal\mathbf{B}^\intercal\mathbf{A}^\intercal\)</span></li><li><a href="https://en.wikipedia.org/wiki/Eigenvalues_and_eigenvectors" target="_blank" rel="noopener">Eigenvector <span class="math inline">\(\mathbf{v}\)</span> and eigenvalues <span class="math inline">\(\lambda\)</span></a>. "Eigen" origins from German for "proper".<ul><li><span class="math inline">\(T(\mathbf{v})=\lambda\mathbf{v}\)</span>: <span class="math inline">\(T\)</span> is a linear transform and <span class="math inline">\(\mathbf{v}\)</span> and <span class="math inline">\(\lambda\)</span> are its eigenvector and eigenvalue.</li><li><a href="https://en.wikipedia.org/wiki/Spectrum_of_a_matrix" target="_blank" rel="noopener">The spectrum of a matrix is the set of its eigenvalues</a> and each eigenvector represents one frequency or one dimension/direction. Check <a href="https://en.wikipedia.org/wiki/Eigendecomposition_of_a_matrix" target="_blank" rel="noopener"><strong>Eigendecomposition of a matrix</strong></a>.</li></ul></li></ul><h2 id="functions-and-polynomials">Functions and Polynomials</h2><ul><li>Linear (gain or interpolation), exponential (the feedback loop) and polynomial functions (spline interpolation, harmonic distortion or representing any functions)</li><li>Chebyshev Polynomial and distortion</li><li>Roots of polynomials <span class="math inline">\(p_n(x_i) = 0\)</span><ul><li><code>roots</code> (order limits)</li><li><span class="math inline">\(p_n(x) = (x-x_1)p_{n-1}(x) = a_n\prod_{i=1}^n(x-x_i)\)</span> <strong>??</strong></li></ul></li></ul><h2 id="rational">Rational</h2><ul><li><span class="math inline">\(f(x) = \frac{Q}{P}\)</span></li><li>Filter frequency response is a rational function (for most of cases), e.g., an exception, viscosity loss of pipe <span class="math inline">\(\rightarrow\)</span> <span class="math inline">\(\sqrt{f}\)</span> <span class="math inline">\(\rightarrow\)</span> irrational function</li></ul><h2 id="complex-numbers">Complex numbers</h2><h3 id="imaginary">Imaginary</h3><ul><li>Matlab considers a number to be complex (<span class="math inline">\(\mathbb{C}\)</span>)<br></li><li>Complex number is defined because it does not exist in <span class="math inline">\(\mathbb{R}\)</span> or is just not defined before?</li><li><span class="math inline">\(j, -1, -j, 1\)</span> for <span class="math inline">\(j^n\)</span>, where <span class="math inline">\(n=1,2,3,4\)</span>.</li><li>Imaginary, a good word, but <a href="https://www.math.toronto.edu/mathnet/answers/imaginary.html" target="_blank" rel="noopener">imaginary is not real imaginary</a></li></ul><h3 id="phase-and-angle">Phase and angle</h3><ul><li><code>atan2</code>, "2" because it accepts two arguments and <code>angle</code> in Matlab uses <code>atan2</code></li><li>phase in(de)crease infinitely but how?</li></ul><h3 id="conjugate">Conjugate</h3><ul><li><a href="http://www.oed.com/view/Entry/39266?rskey=5nAP9w&amp;result=1&amp;isAdvanced=false#eid" target="_blank" rel="noopener">conjugate</a> meaning the opposite angle</li><li>real coefficients of polynomial <span class="math inline">\(\rightarrow\)</span> roots must be grouped by pairs</li><li>Euler's formula<span class="math inline">\(\rightarrow\)</span></li><li><span class="math inline">\(e^{j\theta} = \cos\theta+j\sin\theta\)</span> where <span class="math inline">\(e^{j\theta}\)</span> is the <a href="https://en.wikipedia.org/wiki/Analytic_signal" target="_blank" rel="noopener">analytic signal</a>, the analytic representation of the real-value function (<a href="https://en.wikipedia.org/wiki/Analytic_continuation" target="_blank" rel="noopener">analytic continuation</a>)</li><li>Transfer complex to real after passing a linear system is true but it is not true for a nonliear processing. <strong>WHY?</strong></li></ul><h3 id="unity-circle">Unity Circle</h3><ul><li>For root of unity <span class="math inline">\(z^N=1\)</span>, there are <span class="math inline">\(N\)</span> Nth root because it is an Nth-order polynomial <span class="math inline">\(1-z^N=0\)</span>.</li><li>Reciprocal of <span class="math inline">\(z\)</span> <span class="math inline">\(\rightarrow\)</span> unit circle (in(out)side) <span class="math inline">\(\rightarrow\)</span> stability ((un)stable)</li><li>polynomial<ul><li><a href="https://en.wikipedia.org/wiki/Complex_conjugate_root_theorem" target="_blank" rel="noopener">Complex conjugate root theorem</a>: real coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate pairs.</li><li>symmetrical coefficients <span class="math inline">\(\rightarrow\)</span> roots are conjugate inverse pairs</li><li>when, <span class="math inline">\(|z|=1\)</span>, <span class="math inline">\(z^*=\dfrac{1}{z}\)</span>, roots are pairs of both inverse and conjugate, and are on unit circle.</li></ul></li><li>For <a href="https://en.wikipedia.org/wiki/Dot_product#Complex_vectors" target="_blank" rel="noopener">complex vectors</a> <span class="math inline">\(\mathbf{u}\)</span> and <span class="math inline">\(\mathbf{v}\)</span>,<ul><li><span class="math inline">\(D(u,v) = \sum_{i=1}^{N}\bar{u}_iv_i=u^{*T}v = u^Hv\)</span>, <span class="math inline">\(H\)</span> means transposed and conjugated <span class="math inline">\(\rightarrow\)</span> <code>u'</code> in Matlab</li><li><code>u.'</code> only does the transpose</li><li><span class="math inline">\(D(u,v)=\overline{D(v,u)}\)</span></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Notes of Digital Audio Signal Processing, Lecture 2.
    
    </summary>
    
      <category term="DSP" scheme="http://swang251.github.io/categories/DSP/"/>
    
    
      <category term="Lecture Notes (DASP)" scheme="http://swang251.github.io/tags/Lecture-Notes-DASP/"/>
    
  </entry>
  
</feed>

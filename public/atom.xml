<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Song Wang</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://swang251.github.io/"/>
  <updated>2018-09-17T22:11:41.000Z</updated>
  <id>http://swang251.github.io/</id>
  
  <author>
    <name>Song Wang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LBM-based Solver</title>
    <link href="http://swang251.github.io/2018/09/17/LBM-based-Solver/"/>
    <id>http://swang251.github.io/2018/09/17/LBM-based-Solver/</id>
    <published>2018-09-17T21:04:05.000Z</published>
    <updated>2018-09-17T22:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is simply a list of different Lattice Boltzmann Method-based solvers.</p><a id="more"></a><h2 id="Palabos"><a href="#Palabos" class="headerlink" title="Palabos"></a><a href="http://palabos.org" target="_blank" rel="noopener">Palabos</a></h2><ul><li>Short for “PArallel LAttice BOltzmann Solver”,</li><li>“Palabos” = “παλαβός” in Greek, meaning “Crazy”</li><li>Developed by <a href="https://www.flowkit.com/" target="_blank" rel="noopener">FlowKit Ltd. technology company</a></li><li>Supported by <a href="http://spc.unige.ch/doku.php" target="_blank" rel="noopener">Scientific and Parallel Computing Group (SPC)</a> at the University of Geneva.</li><li>A fork from OpenLB</li><li>Written in C++ with no external dependencies (only Posix and MPI). It also provides additional programmer interfaces for the Python and Java.</li></ul><h2 id="OpenLB"><a href="#OpenLB" class="headerlink" title="OpenLB"></a><a href="http://www.openlb.net/" target="_blank" rel="noopener">OpenLB</a></h2><ul><li>Developed by the <a href="http://www.lbrg.kit.edu/" target="_blank" rel="noopener">Lattice Boltzmann Research Group</a> at Karlsruhe Institute of Technology, which is led by Dr. Mathias J. Krause.</li><li>The <a href="http://www.openlb.net/authors" target="_blank" rel="noopener">author list</a></li></ul><h2 id="XFlow-CFD"><a href="#XFlow-CFD" class="headerlink" title="XFlow CFD"></a><a href="https://www.3ds.com/products-services/simulia/products/xflow/" target="_blank" rel="noopener">XFlow CFD</a></h2><ul><li>A SIMULIA product.</li><li>Using MRT-CM and Wall-Modeled Large Eddy Simulation (WMLES) for simulation.</li><li>The <a href="https://www.youtube.com/watch?v=dN92l2gp6lc" target="_blank" rel="noopener">co-simulation with Abaqus</a> sounds cool.</li></ul><h2 id="PowerFlow"><a href="#PowerFlow" class="headerlink" title="PowerFlow"></a><a href="https://exa.com/en/product/simulation-tools/powerflow-cfd-simulation" target="_blank" rel="noopener">PowerFlow</a></h2><ul><li>A product of <a href="https://exa.com/en" target="_blank" rel="noopener">Exa Corporation</a> which is acquired by Dassault Systèmes on November 17 (<a href="https://exa.com/en/message-our-customers" target="_blank" rel="noopener">news here</a>) and becomes part of SIMULIA, a Dassault Systèmes brand.</li><li><a href="https://exa.com/en/company/cfd-simulation-resources" target="_blank" rel="noopener">Demo video and literature</a> could be found in the link.</li><li><a href="https://exa.com/en/company/exa-lattice-boltzmann-technology" target="_blank" rel="noopener">Technology</a> including very large eddy simulation (VLES).</li></ul><h2 id="ProLB"><a href="#ProLB" class="headerlink" title="ProLB"></a><a href="http://www.prolb-cfd.com/" target="_blank" rel="noopener">ProLB</a></h2><ul><li>A recently (maybe) built solver, one of whose creators is Prof. Pierre Sagaut.</li><li>Especially for aeroacoustic and aerodynamic simulation of weakly compressible flow.</li><li>The <a href="http://www.prolb-cfd.com/technology/" target="_blank" rel="noopener">technology</a> includes double relaxation time (DRT) for collision, wall-modeled large eddy simulation (WMLES) for turbulence modeling, immersed boundary model (IBM) for boundary conditions.</li></ul><p>PS: </p><ul><li><a href="https://www.3ds.com/" target="_blank" rel="noopener">Dassault Systèmes</a> , a subsidiary of Dassault Group, is a CAE/PLM software developing company whose subsidiaries including SIMULIA and SolidWorks. <a href="https://www.3ds.com/products-services/simulia/" target="_blank" rel="noopener">SIMULIA</a> products include Abaqus, XFLOW CFD, and now also PowerFlow.</li><li>Just forget me if anything description is wrong.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This is simply a list of different Lattice Boltzmann Method-based solvers.&lt;/p&gt;
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
      <category term="OpenLB" scheme="http://swang251.github.io/tags/OpenLB/"/>
    
      <category term="XFlow" scheme="http://swang251.github.io/tags/XFlow/"/>
    
      <category term="PowerFlow" scheme="http://swang251.github.io/tags/PowerFlow/"/>
    
      <category term="ProLB" scheme="http://swang251.github.io/tags/ProLB/"/>
    
  </entry>
  
  <entry>
    <title>Selective Filter 2D - Palabos</title>
    <link href="http://swang251.github.io/2018/09/15/Selective-Filter-2D-Palabos/"/>
    <id>http://swang251.github.io/2018/09/15/Selective-Filter-2D-Palabos/</id>
    <published>2018-09-16T03:36:17.000Z</published>
    <updated>2018-09-16T04:52:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>I just implemented the 2D selective filter<sup>1</sup> in Palabos. Because of the non-local calculation when filtering the collision operator, it takes Miguel and me some time to think about a way to implement it in Palabos. </p><ul><li><p>We first thought about the <code>integrateProcessingFunctional</code> but it might only do the post-collision operation (though we could apply a -1 <code>level</code> and call <code>executeInternalProcessors(-1)</code> manually). </p></li><li><p>Then Miguel found the <em>DynamicProcessor</em> could be a candidate,something in <em>src/basicDynamics/dynamicsProcessorXD.hh</em> where there is <code>ExternalRhoJcollideAndStream2D</code> for external macroscopic variable cases (<em>examples/codesByTopic/externalMacroscopicVariables</em>). </p></li><li><p>I then found the <code>nonLocalDynamicsXD</code> written in <em>src/core/nonLocalDynamicsXD.h/hh</em>. This doesn’t seems to be complete and neither is there a show case. However, you can find something related in <code>ExecuteNonLocalDynamics3D</code>, a functional inherited from <code>BoxProcessingFunctional3D_L</code> in <em>src/boundaryCondition/NLD_boundaries3D.h/hh</em>. </p></li></ul><p>I finally decide to go to the last direction because I consider <code>nonLocalDynamicsXD</code> as a good interface to start with. So, the basic idea here is to keep every variables and function of the dynamics in the <code>dynamics</code> class and create each member function a functional for data processor. Likely, I write <code>SelectiveFilterBGKDynamics2D.nonLocalAction()</code> and <code>SelectiveFilterBGKDynamics2D.prepareFNeq()</code> and two functional inherited from <code>BoxProcessingFunctional2D_L</code>. In addition, the dynamics class has two private members for the original and the filtered $f_{neq}$. <code>applyProcessingFunctional</code> would be used in the main function.</p><p>One important thing I found when writing a new dynamics is about the <code>serialize</code> and <code>unserialize</code>. I do need write <code>serializer.addValues()</code> and <code>unserializer.readValues()</code> for each member variables or there would be a problem. I don’t get it totally understand it but hopefully, <a href="https://isocpp.org/wiki/faq/serialization" target="_blank" rel="noopener">this article</a> would help, and I will be back with the answer soon.</p><ol><li>Ricot, Denis, Simon Marié, Pierre Sagaut, and Christophe Bailly. 2009. “Lattice Boltzmann Method with Selective Viscosity Filter.” Journal of Computational Physics 228 (12): 4478–4490.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I just implemented the 2D selective filter&lt;sup&gt;1&lt;/sup&gt; in Palabos. Because of the non-local calculation when filtering the collision oper
      
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
  </entry>
  
  <entry>
    <title>Setup tips for NI hardware + DAQ Toolbox on Matlab + Windows XP (SP3)</title>
    <link href="http://swang251.github.io/2018/09/11/daqplot-windowsxp-caml/"/>
    <id>http://swang251.github.io/2018/09/11/daqplot-windowsxp-caml/</id>
    <published>2018-09-12T02:19:12.000Z</published>
    <updated>2018-09-14T20:05:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>Working on old version software and hardware is not as easy and direct as it seems to be. I am recently trying to set up the Dantec Dynamics CTA hot-wire anemometer. Because the software could only run on Windows XP or other versions in the same era, I have to install Windows XP on the PC of our lab. </p><p>This blog writes about the setup on Windows XP (SP3) 32-bit for the NI PCI-4472 data acquisition board and DaqPlot, a program for data acquisition and analysis written by Gary P. Scavone and is a simplified version of DataLogger by James Woodhouse.</p><ul><li>The latest release of Matlab for Windows XP (SP3) 32-bit is R2015b (<a href="https://www.mathworks.com/support/sysreq/previous_releases.html" target="_blank" rel="noopener">details here</a>);</li><li>The earliest release of Matlab (or Data Acquisition Toolbox) supporting NI PCI-4472 is R2014a (<a href="https://www.mathworks.com/hardware-support/nidaqmx.html" target="_blank" rel="noopener">details here</a>);</li><li>The latest release of NI-DAQmx supporting Windows XP (SP3) 32-bit is NI-DAQmx 15.5.1;</li><li>The earliest release of NI-DAQmx for NI PCI-4472 required by Data Acquisition Toolbox on Matlab is NI-DAQmx 9.0 (or 9.1);</li><li>Check <a href="https://www.mathworks.com/help/daq/troubleshooting-tips.html" target="_blank" rel="noopener">troubleshooting tips</a> for Data Acquisition Toolbox when needed, e.g. the comments recommended <code>daq.getVendors</code> and <code>daq.getDevices</code>.</li></ul><p>In addition,</p><ul><li>The latest StreamWare for Dantec Dynamics CTA system supporting NI-DAQmx driver is StreamWare v3.40 SP4.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Working on old version software and hardware is not as easy and direct as it seems to be. I am recently trying to set up the Dantec Dynam
      
    
    </summary>
    
      <category term="Research Daily" scheme="http://swang251.github.io/categories/Research-Daily/"/>
    
    
      <category term="Research Daily" scheme="http://swang251.github.io/tags/Research-Daily/"/>
    
      <category term="CAML" scheme="http://swang251.github.io/tags/CAML/"/>
    
  </entry>
  
  <entry>
    <title>Palabos Dynamics Calling Relationships</title>
    <link href="http://swang251.github.io/2018/09/10/Palabos-Dynamics-Calling-Relationships/"/>
    <id>http://swang251.github.io/2018/09/10/Palabos-Dynamics-Calling-Relationships/</id>
    <published>2018-09-10T19:59:43.000Z</published>
    <updated>2018-09-10T20:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, the calling relationship of dynamics would be shown which helps write your own dynamic classes. The dynamics classes are mainly written in <em>/src/basicDynamics/</em> and <em>/src/complexDynamics/</em>. Here we will take <code>BGKdynamics</code> and <code>MRTdynamics</code> as examples for illustration.</p><h3 id="BGKdynamics"><a href="#BGKdynamics" class="headerlink" title="BGKdynamics"></a>BGKdynamics</h3><ul><li>The calling graph: <code>BGKdynamics::collide()</code> &lt;– <code>dynamicsTemplates::bgk_ma2_collision()</code> &lt;– <code>dynamicsTemplatesImpl::bgk_ma2_collision()</code>.</li><li>The declaration and implementation of functions in class <code>BGKdynamics</code> are in <em>src/basicDynamics/isoThermalDynamics.h</em> and <em>../isoThermalDynamics.hh</em>, respectively.</li><li>The structs <code>dynamicsTemplates</code> and <code>dynamicsTemplatesImpl</code> and the two member functions with the same name <code>bgk_ma2_collision()</code> are written in <em>src/latticeBoltzmann/dynamicsTemplates.h</em></li></ul><h3 id="MRTdynamics"><a href="#MRTdynamics" class="headerlink" title="MRTdynamics"></a>MRTdynamics</h3><ul><li>The calling graph: <code>MRTdynamics::collide()</code> &lt;– <code>mrtTemplates::mrtCollision()</code> &lt;– <code>mrtTemplatesImpl::mrtCollision()</code>.</li><li>The declaration and implementation of functions in class <code>MRTdynamics</code> are in <em>src/complexDynamics/mrtDynamics.h</em> and <em>../mrtDynamics.hh</em>, respectively.</li><li>The structs <code>mrtTemplates</code> and <code>mrtTemplatesImpl</code> and the two member functions with the same name <code>mrtCollision()</code> are written in <em>src/latticeBoltzmann/mrtTemplates.h</em></li></ul><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><ul><li>The kernal function is the <code>XXXdynamics::collide()</code> which implements the collision step.</li><li>The <code>collide()</code> would call different computations from different <code>Templates</code> like <code>dynamicsTemplates</code>, <code>mrtTemplates</code>, <code>momentTemplates</code> and so on.</li><li>The <code>collide()</code> is implemented on <code>cell</code> level. So for non-local dynamics, a superclass <code>class NonLocalDynamics2D : public CompositeDynamics&lt;T,Descriptor&gt;</code> might be used.</li></ul><p>To better understand the calling relations, one could use <a href="https://romanegloo.wordpress.com/2012/03/29/generating-a-callgraph-by-using-doxygen-and-graphviz-13/" target="_blank" rel="noopener">Doxygen+GraphViz</a> to plot the call graph or get use of the structure or call graph/hierachy function within IDE.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this article, the calling relationship of dynamics would be shown which helps write your own dynamic classes. The dynamics classes are
      
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
  </entry>
  
  <entry>
    <title>The guide for the Data Processor structure of Palabos</title>
    <link href="http://swang251.github.io/2018/08/28/The-guide-for-the-Data-Processor-structure-of-Palabos/"/>
    <id>http://swang251.github.io/2018/08/28/The-guide-for-the-Data-Processor-structure-of-Palabos/</id>
    <published>2018-08-29T03:49:02.000Z</published>
    <updated>2018-08-29T04:20:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, the running and calling sequences of the data processors related functions is briefly summarized, based on the <a href="http://www.palabos.org/documentation/userguide/data-processors.html" target="_blank" rel="noopener">official documentation</a>. Mainly six ‘layers’ are mentioned here.</p><h3 id="First-two-kinds-of-data-processors-are-used"><a href="#First-two-kinds-of-data-processors-are-used" class="headerlink" title="First, two kinds of data processors are used:"></a>First, two kinds of data processors are used:</h3><ul><li><strong>applyProcessingFunctional</strong>, the wrapper for <code>excuteDataProcessor</code>: is executed just once, on one or more blocks</li><li><strong>integrateProcessingFunctional</strong>, the wrapper for <code>addInternalProcessor</code>:  is added to a block and is part of the block and can be executed as many times as wished, blabla. The added processors are implicitly (to the users) called by the function <em>executeInternalProcessors</em></li></ul><h3 id="Second"><a href="#Second" class="headerlink" title="Second"></a>Second</h3><ul><li>The function <code>integrateProcessingFunctional</code> and <code>applyProcessingFunctional</code> are defined and implemented in <em>/src/multiBlock/multiDataProcessorWrapper2D.h/hh</em>.</li><li>The <em>/src/atomicBlock/dataProcessorWrapperXD.h/hh</em> stores the atomic Block version.</li><li>The function <code>applyProcessingFunctional</code> has three main parameters: 1) <code>BoxProcessingFunctionalXD_LSTN functional</code>, 2) <code>BoxXD domain</code> and, 3) <code>MultiBlockLatticeXD lattice</code>;</li><li>The function <code>integrateProcessingFunctional</code> has an additional parameter: <code>plint level</code>;</li></ul><h3 id="Third"><a href="#Third" class="headerlink" title="Third"></a>Third</h3><ul><li><code>applyProcessingFunctional</code> calls <code>excuteDataProcessor(BoxProcessorGeneratorXD(functional, domain), lattice);</code></li><li><code>integrateProcessingFunctional</code> calls <code>addInternalProcessor(BoxProcessorGeneratorXD(functional, domain), lattice, level);</code></li><li>So the <code>BoxProcessorGeneratorXD</code> has no difference for the two wrapper functions.</li></ul><h3 id="Fourth"><a href="#Fourth" class="headerlink" title="Fourth"></a>Fourth</h3><ul><li>the <code>excuteDataProcessor</code> and <code>addInternalProcessor</code> are defined and implemented in <em>/src/multiBlock/multiBlockOperationsXD.h/.cpp</em></li><li>Both functions has the parameter <code>DataProcessorGeneratorXD const&amp; generator</code></li><li>one of the overriden of the functions is the kernel one.</li><li>The kernel  <code>excuteDataProcessor</code>  and <code>addInternalProcessor</code> finally calls the corresponding atomicBlock versions which is defined and implemented in <em>/src/atomicBlock/atomicBlockOperationsXD.h/.cpp</em></li></ul><h3 id="Fifth-in-the-atomicBlock-versions"><a href="#Fifth-in-the-atomicBlock-versions" class="headerlink" title="Fifth, in the atomicBlock versions"></a>Fifth, in the atomicBlock versions</h3><ul><li><em>/src/atomicBlock/atomicBlockOperationsXD.h/.cpp</em></li><li>the kernel <code>excuteDataProcessor</code> calls the <code>processor -&gt; process()</code> where <code>processor</code> is a <code>DataProcessorXD</code> defined in <em>/src/atomicBlock/dataProcessingFunctionalXD.h/.cpp</em></li><li>the kernel <code>addInternalProcessor</code> calls the <code>actor.integrateDataProcessor</code>, where the <code>actor</code> is an <code>AtomicBlockXD</code> written in <em>/src/atomicBlock/atomicBlockXD.h/.cpp</em>, inside which the <code>integrateDataProcessor</code> runs <code>processors[level].push_back(processor)</code>;</li></ul><h3 id="Sixth"><a href="#Sixth" class="headerlink" title="Sixth"></a>Sixth</h3><ul><li><code>DataProcessorXD</code>  &lt;== <code>BoxProcessorXD</code> who overrides the function <code>process()</code> runing <code>functional -&gt; processGenericBlock(domain, atomicBlocks)</code> where <code>BoxProcessingFunctionalXD* functional</code> is written in the file <em>/src/atomicBlock/dataProcessingFunctionalXD.cpp</em></li><li><strong>BoxProcessingFunctionalXD</strong> is a base class defined in the same file which <strong>has many subclasses for different purposes</strong>.</li><li>The <code>processGenericBlock</code> calls the <code>process</code> function in the tons of subclasses functionals of the class <code>BoxProcessingFunctionalXD</code>, like <code>NTensorFieldBoxProcessingFunctional3D</code> or <code>BoxProcessingFunctionalXD_LL</code></li><li>The <code>process()</code> would be finally overriden by the subclasses of <code>BoxProcessingFunctionalXD_LL</code> or so, and implemented. likely in <code>class TurbulentLatticeToPassiveAdvDiff3X : public BoxProcessingFunctionalXD_LL</code> in <em>/src/multiPhysics/advectionDiffusion3D.h/.hh</em></li><li><code>SpecialFunctional</code> ==&gt; <code>BoxProcessingFunctionalXD_LL</code> etc.  ==&gt; <code>BoxProcessingFunctionalXD</code></li></ul><h3 id="In-addition-about-excuteInternalProcessors"><a href="#In-addition-about-excuteInternalProcessors" class="headerlink" title="In addition, about excuteInternalProcessors()"></a>In addition, about <code>excuteInternalProcessors()</code></h3><ul><li>It is called in 1) <code>MultiBlockLatticeXD::stream()</code>, 2) <code>MultiBlockLatticeXD::collideAndStream()</code> and 3) <code>MultiBlockXD::initialize()</code></li><li>The <code>MultiBlockXD::executeInternalProcessors(level)</code> calls the <code>getComponent(blockId).excuteInternalProcessors(leve)</code> which is at the atomicBlocks unit. (line511@<em>/arc/multiBlock/multiBlock3D.cpp</em>)</li><li>The <code>AtomicBlockXD::executeInternalProcessors(level, processors)</code> finally calls the processors -&gt; process(); in (line254@<em>/src/atomicBlock/atomicBlock3D.cpp</em>)</li></ul><h3 id="An-example"><a href="#An-example" class="headerlink" title="An example"></a>An example</h3><p><em>/examples/showCases/boussinesqThermal2d/rayleighBenard2D.cpp</em></p><ul><li>line 171:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">applyProcessingFunctional (</span><br><span class="line">            new IniTemperatureRayleighBenardProcessor2D&lt;T,NSDESCRIPTOR,ADESCRIPTOR&gt;(parameters), </span><br><span class="line">            adLattice.getBoundingBox(),  adLattice );</span><br></pre></td></tr></table></figure><p>where the <code>Struct IniTemperatureRayleighBenardProcessor2D : public BoxProcessingFunctional2D_L&lt;T,adDescriptor&gt;</code> is a functional</p><ul><li>line 293: </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">integrateProcessingFunctional (new BoussinesqThermalProcessor2D&lt;&gt;(), nslattice.getBoundingBox(), nslattice, adLattice, processorlevel );</span><br></pre></td></tr></table></figure><p>where the <code>class BoussinesqThermalProcessor2D : BoxProcessingFunctional2D_LL</code> is a functional defined and implemented in <em>/src/multiPhysics/boussinesqThermalProcessor2D.h/.hh</em>.</p><p><strong>NOTA:</strong> the code used here is Palabos version 2.0</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In this article, the running and calling sequences of the data processors related functions is briefly summarized, based on the &lt;a href=&quot;
      
    
    </summary>
    
      <category term="Palabos" scheme="http://swang251.github.io/categories/Palabos/"/>
    
    
      <category term="Palabos" scheme="http://swang251.github.io/tags/Palabos/"/>
    
      <category term="LBM" scheme="http://swang251.github.io/tags/LBM/"/>
    
      <category term="CFD" scheme="http://swang251.github.io/tags/CFD/"/>
    
  </entry>
  
  <entry>
    <title>Practical Vocal Acoustics Ch3 Vocal Resonance</title>
    <link href="http://swang251.github.io/2018/08/12/Practical-Vocal-Acoustics-Ch3-Vocal-Resonance/"/>
    <id>http://swang251.github.io/2018/08/12/Practical-Vocal-Acoustics-Ch3-Vocal-Resonance/</id>
    <published>2018-08-12T13:36:38.000Z</published>
    <updated>2018-08-12T13:37:34.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Voice" scheme="http://swang251.github.io/categories/Voice/"/>
    
    
      <category term="Voice" scheme="http://swang251.github.io/tags/Voice/"/>
    
      <category term="Practical Vocal Acoustics" scheme="http://swang251.github.io/tags/Practical-Vocal-Acoustics/"/>
    
  </entry>
  
  <entry>
    <title>Practical Vocal Acoustics Ch1-Modes and Registers</title>
    <link href="http://swang251.github.io/2018/08/11/Practical-Vocal-Acoustics-Ch1-p5-Mode-of-Phonation/"/>
    <id>http://swang251.github.io/2018/08/11/Practical-Vocal-Acoustics-Ch1-p5-Mode-of-Phonation/</id>
    <published>2018-08-12T03:25:34.000Z</published>
    <updated>2018-08-12T04:21:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>The <strong>mode of phonation</strong> relates to three factors: breath pressure, airflow, and glottal resistance. The modes could be decided by the glottal resistance which equals the breath pressure by the airflow. The mode could be:</p><ul><li><strong>pressed phonation</strong>: high resistance; stronger high harmonics; “metallic”, “overly bright”,</li><li><strong>breathy phonation</strong>: low resistance; weaker high harmonics; “airy”, “fluty”,</li><li><strong>flow phonation</strong>: moderate resistance.</li></ul><p>Different from the modes of <a href="https://completevocal.institute/" target="_blank" rel="noopener">CVT (Complete Vocal Technique)</a>, which is about the register and sound production mechanisms, including neutral, curbing, overdrive, and edge. The modes here is about phonation. It is more related to the sound, which is the results of different mechanisms, instead of the mechanisms itself.</p><p>The <strong>laryngeal register</strong> refers to the muscular adjustment of the vocal folds for pitch regulation, which is primarily controlled by:</p><ul><li><strong>the thyroarytenoids</strong> (TA): vocal fold shortening, thickening vocal fold muscles.</li><li><strong>the cricothyroids</strong> (CT): vocal fold stretching, thinning muscles that lie partly outside the larynx.</li></ul><p>Two laryngeal registers list here are:</p><ul><li><strong>chestier</strong> (shorter, thicker vocal folds), more and stronger high harmonics &lt;– the more complex pressure form &lt;– vertical phase difference &lt;– thicker vocal folds &lt;– TA,</li><li><strong>headier</strong> (longer, thinner vocal folds), fewer and weaker high harmonics &lt;– more sinusoidal pressure wave &lt;– little to no vertical phase difference &lt;– thinner vocal folds &lt;– CT.</li></ul><p>The chestier and headier register might correspond to the modal voice and falsetto voice register, respectively, in the four-register system together with the vocal fry register and the whistle register.</p><p>Here the word <strong>register</strong> should be carefully used, which is determined by three key elements: </p><ol><li>A register is composed of contiguous pitches;</li><li>Pitches within any given register are produced in the same physiological manner;</li><li>Pitches within any given register share the same basic timbre.</li></ol><blockquote><p>By the word register we mean a series of consecutive and homogeneous tones going from low to high, produced by the development of the same mechanical principle, and whose nature differs essentially from another series of tones, equally consecutive and homogeneous, produced by another mechanical principle (Garcia, 1847)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;strong&gt;mode of phonation&lt;/strong&gt; relates to three factors: breath pressure, airflow, and glottal resistance. The modes could be dec
      
    
    </summary>
    
      <category term="Voice" scheme="http://swang251.github.io/categories/Voice/"/>
    
    
      <category term="Voice" scheme="http://swang251.github.io/tags/Voice/"/>
    
      <category term="Practical Vocal Acoustics" scheme="http://swang251.github.io/tags/Practical-Vocal-Acoustics/"/>
    
  </entry>
  
  <entry>
    <title>On the Art of Singing I-19 &#39;The Choral Conductor as Teacher of Vocal Technique&#39;</title>
    <link href="http://swang251.github.io/2018/07/03/On-the-Art-of-Singing-19/"/>
    <id>http://swang251.github.io/2018/07/03/On-the-Art-of-Singing-19/</id>
    <published>2018-07-03T23:38:01.000Z</published>
    <updated>2018-07-04T03:19:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>As a 10-year-chorister, this article resolves some of my confusions. Especially what is claimed at the very beginning, there is no difference nor conflict between the training of the solo voice and that of a chorister. Even though, the voice today in modern music conservatories are different from the one of Josquin, Palestrina, or Gesualdo.</p><p>In traditional choral literature, it is required to be “blend” at all <em>tessitura</em> and dynamic levels which might be problematic because of the unbalanced voices between the professionals and amateurs and the unique timbre characteristics of each vocal instrument. What might be worse is that trying to submerge the voice into the surrounding bland sound threats to the professionals’ vocal health. In order to solve such problem, the choral conductor should pursue the balancing voices instead of the blend voices. </p><p>The choral conductor is responsible to teach the choristers how to become efficient singers. “It is not necessary to be a professional singer in order to be a fine teacher of singing, but it is necessary that one achieve a good level of technical proficiency with one’s own instrument.” Three main areas of vocal technique should be developed including <em>breath management/appoggio</em> (onset, agility, and sostenuto exercises), <em>free laryngeal function</em> (vibrato) and <em>resonance balancing</em> (vowel definition exercises). </p><p>Here below are some useful points:</p><ul><li>At the cessation of each sound, the vocal folds and the breath should be replenished in a synergistic manner.</li><li>In all onset, agility, and sostenuto exercises, the abdominal wall, although flexible while articulating the laughter-like impulses, remains stable and neither pulls inward nor presses outward at the moment of onset.</li><li>Many tuning problems in choral ensembles are the consequence of the singers’ inability to clearly differentiate vowels.</li><li>Dropping the jaw tends to narrow the pharynx.</li><li>Singers need to learn to “track the vowel” by changing the shapes of the vocal tract to the corresponding target vowel and the laryngeal configuration.</li><li>The particular vowel, the tessitura, and the intensity determine the degree of jaw opening (and also the form of all the articulators).</li><li>An even vibrato, the result of relaxant laryngeal function, is an inherent characteristic of freely produced vocal sound which should not be avoided in a choir. However, of course, a too wide and too slow “wobble” sound or a too narrow and too swift vibrato should be avoided.</li><li>Musical accuracy is the major priority for each choral director.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As a 10-year-chorister, this article resolves some of my confusions. Especially what is claimed at the very beginning, there is no differ
      
    
    </summary>
    
      <category term="Voice" scheme="http://swang251.github.io/categories/Voice/"/>
    
    
      <category term="On the Art of Singing" scheme="http://swang251.github.io/tags/On-the-Art-of-Singing/"/>
    
      <category term="Voice" scheme="http://swang251.github.io/tags/Voice/"/>
    
  </entry>
  
  <entry>
    <title>On the Art of Singing I-6 &#39;Diction and Vocal Technique&#39;</title>
    <link href="http://swang251.github.io/2018/07/01/On-the-Art-of-Singing-6/"/>
    <id>http://swang251.github.io/2018/07/01/On-the-Art-of-Singing-6/</id>
    <published>2018-07-01T21:13:30.000Z</published>
    <updated>2018-07-02T02:52:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>This article discusses the relationship between the diction and the vocal technique. </p><p>The singing tone is not the results of a universal, neutral timbre superimposed by a series of vowels. Instead, the tone, or acoustically the timbre, or physiologically the shape of the articulators, should be adjusted based on the difference of the vowel. The diction does not exist as a separate entity from the tone. The shapes of the resonator (vocal tract) keep matching that of the generator (larynx). </p><blockquote><p>For the singing voice, as for the speaking voice, neither undistorted tone nor recognizable diction can be superimposed on a single predetermined acoustic posture. As spectrum analysis demonstrates, diction need not be inimical to tone, because it is part of the timbre balance.</p></blockquote><p>In addition, as claimed by the Richard, “the clean diction is not produced by exaggerated, heavy consonants, but by quickly occurring consonants (except for consonantal doubling in languages that require it) that do not impede the connected flow of well-defined vowels.” This point deserves more notice as we are always required to exaggerate the consonant in order to make it audible to the audience. However, the key point for a clear and clean diction is the <strong>flow connection</strong> of the vowels. That means <em>the consonant should never disturb the continuous matching adjustment of the larynx and the vocal tract</em>.</p><p>As a conclusion, we should keep in mind that <strong>vowel is the timbre</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This article discusses the relationship between the diction and the vocal technique. &lt;/p&gt;
&lt;p&gt;The singing tone is not the results of a uni
      
    
    </summary>
    
      <category term="Voice" scheme="http://swang251.github.io/categories/Voice/"/>
    
    
      <category term="On the Art of Singing" scheme="http://swang251.github.io/tags/On-the-Art-of-Singing/"/>
    
      <category term="Voice" scheme="http://swang251.github.io/tags/Voice/"/>
    
  </entry>
  
  <entry>
    <title>On the Art of Singing II-28 &#39;The Two Poles of Bel Canto&#39;</title>
    <link href="http://swang251.github.io/2018/06/29/On-the-Art-of-Singing-28/"/>
    <id>http://swang251.github.io/2018/06/29/On-the-Art-of-Singing-28/</id>
    <published>2018-06-29T11:38:56.000Z</published>
    <updated>2018-07-02T18:35:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Two factors to form the basis of all good technical singing are <em>sostenuto</em> and <em>coloratura</em>, literally meaning “sustained” and “coloring” in English. </p><p>In the form of the operatic <em><a href="https://en.wikipedia.org/wiki/Concert_aria" target="_blank" rel="noopener">scena</a></em>, <em>cavatina</em> and <em>cabaletta</em> exhibite, in which the singer was expected to show the two chief technical facets of skillful singing: <em>legato</em> and <em>agility</em>.</p><p>These two vocal techniques are Siamese twins. One completes the other cannot exist without the other.</p><p>Examples of <em>scene</em> or “double arias”: Handel’s <em>Piangerò</em>. Mozart’s <em>Non mi dir</em>, Bellini’s <em>Non mi credea</em>, and Verdi’s <em>Ah! fors’è lui!</em></p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Sustained</th><th style="text-align:center">Coloring</th></tr></thead><tbody><tr><td style="text-align:center"><strong>Techiniques</strong></td><td style="text-align:center">Sostenuto</td><td style="text-align:center">Coloratura</td></tr><tr><td style="text-align:center"><strong>Scena Sections</strong></td><td style="text-align:center">Cavatina</td><td style="text-align:center">cabaletta</td></tr><tr><td style="text-align:center"><strong>Technical Facets</strong></td><td style="text-align:center">legato</td><td style="text-align:center">agility</td></tr><tr><td style="text-align:center"><strong>Adjectives</strong></td><td style="text-align:center">verismo</td><td style="text-align:center">pyrotechnical melismatic</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Two factors to form the basis of all good technical singing are &lt;em&gt;sostenuto&lt;/em&gt; and &lt;em&gt;coloratura&lt;/em&gt;, literally meaning “sustained”
      
    
    </summary>
    
      <category term="Voice" scheme="http://swang251.github.io/categories/Voice/"/>
    
    
      <category term="On the Art of Singing" scheme="http://swang251.github.io/tags/On-the-Art-of-Singing/"/>
    
      <category term="Voice" scheme="http://swang251.github.io/tags/Voice/"/>
    
  </entry>
  
</feed>
